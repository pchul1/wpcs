<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="alertConfigDAO">

	<typeAlias alias="alertConfigVO" type="daewooInfo.alert.bean.AlertConfigVO"/>
	<typeAlias alias="alertSearchVO" type="daewooInfo.alert.bean.AlertSearchVO"/>
	
	<!-- get Alert Config List -->
	<select id="getAlertConfigList" parameterClass="alertSearchVO" resultClass="alertConfigVO">
        SELECT 
            B.FACT_CODE         as factCode
            , B.BRANCH_NO       as branchNo
            , B.ITEM_CODE        as itemCode
            , (SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = B.ITEM_CODE)    as itemName
            , ARS_FLAG          as arsFlag
            , SMS_FLAG          as smsFlag
            , NVL(SEND_CYCLE,0) as alertTerm
            , USE_FLAG              as used            
        FROM 
            T_WARNING_STD A
            ,T_FACT_MEASU_ITEM B
        WHERE A.FACT_CODE(+) = B.FACT_CODE
        AND A.BRANCH_NO(+) = B.BRANCH_NO
        AND A.ITEM_CODE(+) = B.ITEM_CODE 
        AND B.FACT_CODE = #factCode#
        AND B.BRANCH_NO = #branchNo#
    <isEqual property="system" compareValue="A">
        AND A.ITEM_CODE = '00000'
    </isEqual>        
        ORDER BY B.ITEM_CODE
	</select>
		
	<statement id="updateAlertConfig" parameterClass="alertConfigVO">
        UPDATE T_WARNING_STD 
           SET SEND_CYCLE = #alertTerm# 
               , USE_FLAG = #used# 
        <isEqual property="arsFlag" compareValue="Y">
        	,ARS_FLAG = 'A'
        </isEqual>
        <isEqual property="arsFlag" compareValue="N">
        	,ARS_FLAG = ''
        </isEqual>
        <isEqual property="smsFlag" compareValue="Y">
	        ,SMS_FLAG = 'S'
        </isEqual>
        <isEqual property="smsFlag" compareValue="N">
	        ,SMS_FLAG = ''
        </isEqual>
        WHERE FACT_CODE = #factCode# 
          AND BRANCH_NO = #branchNo# 
          AND ITEM_CODE = #itemCode#
	</statement>
	    
    <!-- merge Alert Config Data -->
    <statement id="mergeAlertConfig" parameterClass="alertConfigVO">
        MERGE INTO T_WARNING_STD A 
        USING ( SELECT 
        				<isEqual property="arsFlag" compareValue="Y">
				        	'A' AS ARS_FLAG, 
				        </isEqual>
				        <isEqual property="arsFlag" compareValue="N">
				        	'' AS ARS_FLAG, 
				        </isEqual>
				        <isEqual property="smsFlag" compareValue="Y">
					        'S' AS SMS_FLAG,
				        </isEqual>
				        <isEqual property="smsFlag" compareValue="N">
					        '' AS SMS_FLAG,
				        </isEqual>
        				#factCode# AS FACT_CODE, 
        				#branchNo# AS BRANCH_NO, 
        				#itemCode# AS ITEM_CODE, 
                       #alertTerm# AS SEND_CYCLE, 
                       #used# AS USE_FLAG
                FROM 
                	DUAL) B
        ON (A.FACT_CODE = B.FACT_CODE AND A.BRANCH_NO = B.BRANCH_NO AND A.ITEM_CODE = B.ITEM_CODE)
        WHEN MATCHED THEN 
            UPDATE SET 
                A.ARS_FLAG = B.ARS_FLAG
                , A.SMS_FLAG = B.SMS_FLAG
                , A.SEND_CYCLE = B.SEND_CYCLE
                , A.USE_FLAG = B.USE_FLAG
        WHEN NOT MATCHED THEN
            INSERT (A.FACT_CODE, A.BRANCH_NO, A.ITEM_CODE, A.ARS_FLAG, A.SMS_FLAG, A.SEND_CYCLE, A.USE_FLAG)
            VALUES (B.FACT_CODE, B.BRANCH_NO, B.ITEM_CODE, B.ARS_FLAG, B.SMS_FLAG, B.SEND_CYCLE, B.USE_FLAG)
	</statement>  
	
    <!-- delete Alert Config Data -->
    <statement id="getAlertConfigTimeView" parameterClass="alertConfigVO" resultClass="alertConfigVO">
         SELECT 
            TO_CHAR(REG_DATE,'YYYY-MM-DD HH24:MI') REG_DATE ,
            ALERT_DELAY_TIME
        FROM 
            T_ALERT_CONFIG_TIME
        WHERE SEQ = 1
	</statement>
	
    
    <!-- merge Alert Config Data -->
    <statement id="mergeAlertConfigTime" parameterClass="alertConfigVO">
        MERGE INTO T_ALERT_CONFIG_TIME A 
        USING ( SELECT 
        				1 SEQ,
        				SYSDATE AS REG_DATE, 
        				#alert_delay_time# AS ALERT_DELAY_TIME
                FROM DUAL) B
        ON (A.SEQ = B.SEQ)
        WHEN MATCHED THEN 
            UPDATE SET 
                A.REG_DATE = B.REG_DATE
                , A.ALERT_DELAY_TIME = B.ALERT_DELAY_TIME
        WHEN NOT MATCHED THEN
            INSERT (A.SEQ, A.REG_DATE, A.ALERT_DELAY_TIME)
            VALUES (B.SEQ, B.REG_DATE, B.ALERT_DELAY_TIME)
	</statement>
</sqlMap>