<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="SmsManageCounterDAO">
	<typeAlias alias="smsVO" type="daewooInfo.smsmanage.bean.SmsVO"/>
	<typeAlias alias="smsTargetVO" type="daewooInfo.smsmanage.bean.SmsTargetVO"/>
	<typeAlias alias="smsBranchVO" type="daewooInfo.smsmanage.bean.SmsBranchVO"/>
	
	<!-- SMS 검출 리스트 호출 -->
	<select id="getSmsConfigList" parameterClass="smsVO" resultClass="smsVO" remapResults="true">
		SELECT DET_CODE, 
		       (SELECT B.COMMON_CODE_NAME 
		         FROM T_COMMON_CODE B 
		        WHERE B.COMMON_CODE = DET_CODE 
		       ) DET_CODE_NAME, 
		       SYS_KIND, 
		       DET_CONTENT, 
		       DET_DETAIL_CONTENT, 
		       DET_CYCLE, 
		       DP_YN, 
		       CRTDATE, 
		       MODDATE, 
		       USER_YN 
		  FROM T_SMS_CONFIG
		 WHERE SYS_KIND = 'U'
	</select>
	
	
	<select id="getSmsConfigDetail" parameterClass="smsVO" resultClass="smsVO" remapResults="true">
		SELECT DET_CODE, 
		       (SELECT B.COMMON_CODE_NAME 
		         FROM T_COMMON_CODE B 
		        WHERE B.COMMON_CODE = DET_CODE 
		       ) DET_CODE_NAME, 
		       SYS_KIND, 
		       DET_CONTENT, 
		       DET_DETAIL_CONTENT, 
		       DET_CYCLE, 
		       DP_YN, 
		       CRTDATE, 
		       MODDATE, 
		       USER_YN 
		  FROM T_SMS_CONFIG
		 WHERE DET_CODE = #det_code#
		   AND SYS_KIND = #sys_kind#
	</select>
	
	
	<!-- SMS 검출 리스트 호출 -->
	<update id="MergeSmsConfig" parameterClass="smsVO">
		MERGE INTO T_SMS_CONFIG A USING 
		    (SELECT #sys_kind# sys_kind, 
		    		#det_code# det_code, 
		    		#det_cycle# det_cycle, 
		    		#det_content# det_content, 
		    		#user_yn# user_yn
		      FROM DUAL) B 
		    ON ( A.SYS_KIND = B.SYS_KIND AND A.DET_CODE = B.DET_CODE) 
		WHEN MATCHED THEN 
		   UPDATE SET 
		   		A.DET_CYCLE = B.DET_CYCLE,
		   		A.DET_CONTENT = B.DET_CONTENT,
		   		A.USER_YN = B.USER_YN 
		WHEN NOT MATCHED THEN 
		   INSERT 
		          (
			      		A.DET_CODE,
						A.SYS_KIND,
						A.DET_CONTENT,
						A.DET_CYCLE,
						A.USER_YN,
						A.CRTDATE
		          ) 
		          VALUES 
		          ( 
			      		B.DET_CODE,
						B.SYS_KIND,
						B.DET_CONTENT,
						B.DET_CYCLE,
						B.USER_YN,
						SYSDATE
		          )
	</update>
	
	<!-- SMS 검출 리스트 호출 -->
	<update id="MergeAllSms" parameterClass="smsVO">
		MERGE INTO T_SMS A USING 
		    (SELECT #sys_kind# sys_kind, 
		    		#det_code# det_code, 
		    		#det_cycle# det_cycle, 
		    		#det_content# det_content, 
		    		#user_yn# user_yn
		      FROM DUAL) B 
		    ON ( A.SYS_KIND = B.SYS_KIND AND A.DET_CODE = B.DET_CODE) 
		WHEN MATCHED THEN 
		   UPDATE SET 
		   		A.DET_CYCLE = B.DET_CYCLE,
		   		A.DET_CONTENT = B.DET_CONTENT,
		   		A.USER_YN = B.USER_YN 
	</update>
	
	<select id="CommonSmsTargetList" resultClass="smsTargetVO">
		SELECT A.SMS_TARGET_NO, 
		       A.FACT_CODE, 
		       A.BRANCH_NO, 
		       A.MEMBER_ID, 
		       A.USE_FLAG, 
		       A.REG_DATE, 
		       A.REG_ID, 
		       A.RECV_TYPE, 
		       A.DET_CODE, 
		       FN_GET_DEPT_NAME(MEMBER.DEPT_CODE) AS DEPTNONAME, 
		       MEMBER.MEMBER_NAME MEMBERNAME, 
		       MEMBER.MOBILE_NO MOBILENO
		  FROM T_SMS_TARGET A, 
		       T_MEMBER MEMBER 
		 WHERE MEMBER.MEMBER_ID = A.MEMBER_ID 
		       AND A.RECV_TYPE = 'C' 
		       AND A.DET_CODE = #det_code# 

	</select>
	
	<insert id="InsertSmsTarget" parameterClass="smsTargetVO">
	    MERGE INTO T_SMS_TARGET A USING  
			(SELECT #fact_code# FACT_CODE, 
		           #branch_no# BRANCH_NO, 
		           #member_id# MEMBER_ID, 
		           #recv_type# RECV_TYPE, 
		           #det_code# DET_CODE 
		      FROM DUAL 
		    ) B ON ( A.FACT_CODE = B.FACT_CODE AND A.BRANCH_NO = B.BRANCH_NO AND A.MEMBER_ID = B.MEMBER_ID AND A.RECV_TYPE = B.RECV_TYPE AND A.DET_CODE = B.DET_CODE) 
		WHEN NOT MATCHED THEN 
		       INSERT 
		              ( 
		                  A.SMS_TARGET_NO, 
		                  A.FACT_CODE, 
		                  A.BRANCH_NO, 
		                  A.MEMBER_ID, 
		                  A.REG_DATE, 
		                  A.RECV_TYPE, 
		                  A.DET_CODE 
		              ) 
		              VALUES 
		              ( 
		                  SEQ_SMS_TARGET.NEXTVAL, 
		                  B.FACT_CODE, 
		                  B.BRANCH_NO, 
		                  B.MEMBER_ID, 
		                  SYSDATE, 
		                  B.RECV_TYPE, 
		                  B.DET_CODE
		              )  
	</insert>
	
	<delete id="DeleteSmsTarget" parameterClass="smsTargetVO">
	    DELETE FROM T_SMS_TARGET
	     WHERE MEMBER_ID = #member_id#
	       AND DET_CODE = #det_code#
	       <isNotEmpty property="fact_code">
	           AND FACT_CODE = #fact_code#
	       </isNotEmpty>
	       <isNotEmpty property="branch_no">
	           AND BRANCH_NO = #branch_no#
	       </isNotEmpty>
	</delete>
	
	<select id="isExistBranchMember" parameterClass="smsTargetVO" resultClass="java.lang.Integer">
		SELECT COUNT(*)
		  FROM T_FACT_BRANCH_MEMBER 
		 WHERE member_id = #member_id#
		       AND fact_code = #fact_code#
		       AND branch_no = #branch_no#
	</select>
	
	<select id="DetailSmsBranchConfig" parameterClass="smsBranchVO" resultClass="smsBranchVO" remapResults="true">
		SELECT SYS_KIND, 
		       DET_CODE, 
		       NOT_SEND_FROM, 
		       NOT_SEND_TO, 
		       CHK_DELAY, 
		       CHK_TIME, 
		       CHK_LOC, 
		       NOT_RCV, 
		       SAME_VAL, 
		       SEND_USE_FLAG, 
		       DELAY_USE_FLAG, 
		       NOT_RCV_USE_FLAG, 
		       LOC_USE_FLAG, 
		       TIME_USE_FLAG, 
		       SEND_DETAIL_EXPLAN, 
		       DELAY_DETAIL_EXPLAN, 
		       NOT_RCV_DETAIL_EXPLAN, 
		       LOC_DETAIL_EXPLAN, 
		       TIME_DETAIL_EXPLAN 
		  FROM T_SMS_BRANCH_CONFIG 
		 WHERE SYS_KIND = #sys_kind# 
		       AND DET_CODE = #det_code#
	</select>
	
	
	<!-- SMS 검출 리스트 호출 -->
	<update id="MergeSmsBranchConfig" parameterClass="smsBranchVO">
		MERGE INTO T_SMS_BRANCH_CONFIG A USING 
		    (SELECT #sys_kind#	  SYS_KIND,
					#det_code#	  DET_CODE,
					#not_send_from#	  NOT_SEND_FROM,
					#not_send_to#	  NOT_SEND_TO,
					#chk_delay#	  CHK_DELAY,
					#chk_time#	  CHK_TIME,
					#chk_loc#	  CHK_LOC,
					#not_rcv#	  NOT_RCV,
					#same_val#	  SAME_VAL,
					#send_use_flag#	  SEND_USE_FLAG,
					#delay_use_flag#	  DELAY_USE_FLAG,
					#not_rcv_use_flag#	  NOT_RCV_USE_FLAG,
					#loc_use_flag#	  LOC_USE_FLAG,
					#time_use_flag#	  TIME_USE_FLAG,
					#send_detail_explan#	  SEND_DETAIL_EXPLAN,
					#delay_detail_explan#	  DELAY_DETAIL_EXPLAN,
					#not_rcv_detail_explan#	  NOT_RCV_DETAIL_EXPLAN,
					#loc_detail_explan#	  LOC_DETAIL_EXPLAN,
					#time_detail_explan#	  TIME_DETAIL_EXPLAN
		      FROM DUAL) B 
		    ON ( A.SYS_KIND = B.SYS_KIND AND A.DET_CODE = B.DET_CODE) 
		WHEN MATCHED THEN 
		   UPDATE SET 
		   		A.NOT_SEND_FROM = B.NOT_SEND_FROM,
				A.NOT_SEND_TO = B.NOT_SEND_TO,
				A.CHK_DELAY = B.CHK_DELAY,
				A.CHK_TIME = B.CHK_TIME,
				A.CHK_LOC = B.CHK_LOC,
				A.NOT_RCV = B.NOT_RCV,
				A.SAME_VAL = B.SAME_VAL,
				A.SEND_USE_FLAG = B.SEND_USE_FLAG,
				A.DELAY_USE_FLAG = B.DELAY_USE_FLAG,
				A.NOT_RCV_USE_FLAG = B.NOT_RCV_USE_FLAG,
				A.LOC_USE_FLAG = B.LOC_USE_FLAG,
				A.TIME_USE_FLAG = B.TIME_USE_FLAG,
				A.SEND_DETAIL_EXPLAN = B.SEND_DETAIL_EXPLAN,
				A.DELAY_DETAIL_EXPLAN = B.DELAY_DETAIL_EXPLAN,
				A.NOT_RCV_DETAIL_EXPLAN = B.NOT_RCV_DETAIL_EXPLAN,
				A.LOC_DETAIL_EXPLAN = B.LOC_DETAIL_EXPLAN,
				A.TIME_DETAIL_EXPLAN = B.TIME_DETAIL_EXPLAN
		WHEN NOT MATCHED THEN 
		   INSERT 
		          (
		          		A.SYS_KIND,
		          		A.DET_CODE,
			      		A.NOT_SEND_FROM,
						A.NOT_SEND_TO,
						A.CHK_DELAY,
						A.CHK_TIME,
						A.CHK_LOC,
						A.NOT_RCV,
						A.SAME_VAL,
						A.SEND_USE_FLAG,
						A.DELAY_USE_FLAG,
						A.NOT_RCV_USE_FLAG,
						A.LOC_USE_FLAG,
						A.TIME_USE_FLAG,
						A.SEND_DETAIL_EXPLAN,
						A.DELAY_DETAIL_EXPLAN,
						A.NOT_RCV_DETAIL_EXPLAN,
						A.LOC_DETAIL_EXPLAN,
						A.TIME_DETAIL_EXPLAN
		          ) 
		          VALUES 
		          ( 
		          		B.SYS_KIND,
		          		B.DET_CODE,
			      		B.NOT_SEND_FROM,
						B.NOT_SEND_TO,
						B.CHK_DELAY,
						B.CHK_TIME,
						B.CHK_LOC,
						B.NOT_RCV,
						B.SAME_VAL,
						B.SEND_USE_FLAG,
						B.DELAY_USE_FLAG,
						B.NOT_RCV_USE_FLAG,
						B.LOC_USE_FLAG,
						B.TIME_USE_FLAG,
						B.SEND_DETAIL_EXPLAN,
						B.DELAY_DETAIL_EXPLAN,
						B.NOT_RCV_DETAIL_EXPLAN,
						B.LOC_DETAIL_EXPLAN,
						B.TIME_DETAIL_EXPLAN
		          )
	</update>
	
	
	<update id="MergeAllSmsBranch" parameterClass="smsBranchVO">
		MERGE INTO T_SMS_BRANCH A USING 
		    (SELECT #sys_kind#	  SYS_KIND,
					#det_code#	  DET_CODE,
					#not_send_from#	  NOT_SEND_FROM,
					#not_send_to#	  NOT_SEND_TO,
					#chk_delay#	  CHK_DELAY,
					#chk_time#	  CHK_TIME,
					#chk_loc#	  CHK_LOC,
					#not_rcv#	  NOT_RCV,
					#same_val#	  SAME_VAL,
					#send_use_flag#	  SEND_USE_FLAG,
					#delay_use_flag#	  DELAY_USE_FLAG,
					#not_rcv_use_flag#	  NOT_RCV_USE_FLAG,
					#loc_use_flag#	  LOC_USE_FLAG,
					#time_use_flag#	  TIME_USE_FLAG,
					#send_detail_explan#	  SEND_DETAIL_EXPLAN,
					#delay_detail_explan#	  DELAY_DETAIL_EXPLAN,
					#not_rcv_detail_explan#	  NOT_RCV_DETAIL_EXPLAN,
					#loc_detail_explan#	  LOC_DETAIL_EXPLAN,
					#time_detail_explan#	  TIME_DETAIL_EXPLAN
		      FROM DUAL) B 
		    ON ( A.SYS_KIND = B.SYS_KIND AND A.DET_CODE = B.DET_CODE) 
		WHEN MATCHED THEN 
		   UPDATE SET 
		   		A.NOT_SEND_FROM = B.NOT_SEND_FROM,
				A.NOT_SEND_TO = B.NOT_SEND_TO,
				A.CHK_DELAY = B.CHK_DELAY,
				A.CHK_TIME = B.CHK_TIME,
				A.CHK_LOC = B.CHK_LOC,
				A.NOT_RCV = B.NOT_RCV,
				A.SAME_VAL = B.SAME_VAL,
				A.SEND_USE_FLAG = B.SEND_USE_FLAG,
				A.DELAY_USE_FLAG = B.DELAY_USE_FLAG,
				A.NOT_RCV_USE_FLAG = B.NOT_RCV_USE_FLAG,
				A.LOC_USE_FLAG = B.LOC_USE_FLAG,
				A.TIME_USE_FLAG = B.TIME_USE_FLAG,
				A.SEND_DETAIL_EXPLAN = B.SEND_DETAIL_EXPLAN,
				A.DELAY_DETAIL_EXPLAN = B.DELAY_DETAIL_EXPLAN,
				A.NOT_RCV_DETAIL_EXPLAN = B.NOT_RCV_DETAIL_EXPLAN,
				A.LOC_DETAIL_EXPLAN = B.LOC_DETAIL_EXPLAN,
				A.TIME_DETAIL_EXPLAN = B.TIME_DETAIL_EXPLAN
	</update>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- SMS 검출 리스트 호출 -->
	<update id="InitSmsConfig" parameterClass="smsVO">
		MERGE INTO T_SMS A USING  
		    (SELECT SYS_KIND, 
		           DET_CODE, 
		           DET_CYCLE, 
		           DET_CONTENT, 
		           USER_YN, 
		           #fact_code# FACT_CODE, 
		           #branch_no# BRANCH_NO 
		      FROM T_SMS_CONFIG 
		     WHERE SYS_KIND = 
		           (SELECT SYS_KIND 
		             FROM T_FACT_INFO A 
		            WHERE A.FACT_CODE = #fact_code# 
		           ) 
		    ) B ON ( A.FACT_CODE = B.FACT_CODE AND A.BRANCH_NO = B.BRANCH_NO AND A.DET_CODE = B.DET_CODE AND A.SYS_KIND = B.SYS_KIND) 
		WHEN NOT MATCHED THEN 
		       INSERT 
		              ( 
		                  A.FACT_CODE, 
		                  A.BRANCh_NO, 
		                  A.DET_CODE, 
		                  A.SYS_KIND, 
		                  A.DET_CONTENT, 
		                  A.DET_CYCLE, 
		                  A.USER_YN, 
		                  A.CRTDATE 
		              ) 
		              VALUES 
		              ( 
		                  B.FACT_CODE, 
		                  B.BRANCh_NO, 
		                  B.DET_CODE, 
		                  B.SYS_KIND, 
		                  B.DET_CONTENT, 
		                  B.DET_CYCLE, 
		                  B.USER_YN, 
		                  SYSDATE 
		              )
	</update>
	
	
	
	<update id="InitSmsBranchConfig" parameterClass="smsBranchVO">
		MERGE INTO T_SMS_BRANCH A USING 
		    (SELECT SYS_KIND, 
			       DET_CODE, 
			       NOT_SEND_FROM, 
			       NOT_SEND_TO, 
			       CHK_DELAY, 
			       CHK_TIME, 
			       CHK_LOC, 
			       NOT_RCV, 
			       SAME_VAL, 
			       SEND_USE_FLAG, 
			       DELAY_USE_FLAG, 
			       NOT_RCV_USE_FLAG, 
			       LOC_USE_FLAG, 
			       TIME_USE_FLAG, 
			       SEND_DETAIL_EXPLAN, 
			       DELAY_DETAIL_EXPLAN, 
			       NOT_RCV_DETAIL_EXPLAN, 
			       LOC_DETAIL_EXPLAN, 
			       TIME_DETAIL_EXPLAN,
		           #fact_code# FACT_CODE, 
		           #branch_no# BRANCH_NO 
			  FROM T_SMS_BRANCH_CONFIG
		     WHERE SYS_KIND = 
		           (SELECT SYS_KIND 
		             FROM T_FACT_INFO A 
		            WHERE A.FACT_CODE = #fact_code# 
		           ) 
		    ) B ON ( A.FACT_CODE = B.FACT_CODE AND A.BRANCH_NO = B.BRANCH_NO AND A.DET_CODE = B.DET_CODE AND A.SYS_KIND = B.SYS_KIND) 
		WHEN NOT MATCHED THEN 
		   INSERT 
		          (
		                A.FACT_CODE, 
		                A.BRANCh_NO, 
		          		A.SYS_KIND,
		          		A.DET_CODE,
			      		A.NOT_SEND_FROM,
						A.NOT_SEND_TO,
						A.CHK_DELAY,
						A.CHK_TIME,
						A.CHK_LOC,
						A.NOT_RCV,
						A.SAME_VAL,
						A.SEND_USE_FLAG,
						A.DELAY_USE_FLAG,
						A.NOT_RCV_USE_FLAG,
						A.LOC_USE_FLAG,
						A.TIME_USE_FLAG,
						A.SEND_DETAIL_EXPLAN,
						A.DELAY_DETAIL_EXPLAN,
						A.NOT_RCV_DETAIL_EXPLAN,
						A.LOC_DETAIL_EXPLAN,
						A.TIME_DETAIL_EXPLAN
		          ) 
		          VALUES 
		          ( 
		                B.FACT_CODE, 
		                B.BRANCH_NO, 
		          		B.SYS_KIND,
		          		B.DET_CODE,
			      		B.NOT_SEND_FROM,
						B.NOT_SEND_TO,
						B.CHK_DELAY,
						B.CHK_TIME,
						B.CHK_LOC,
						B.NOT_RCV,
						B.SAME_VAL,
						B.SEND_USE_FLAG,
						B.DELAY_USE_FLAG,
						B.NOT_RCV_USE_FLAG,
						B.LOC_USE_FLAG,
						B.TIME_USE_FLAG,
						B.SEND_DETAIL_EXPLAN,
						B.DELAY_DETAIL_EXPLAN,
						B.NOT_RCV_DETAIL_EXPLAN,
						B.LOC_DETAIL_EXPLAN,
						B.TIME_DETAIL_EXPLAN
		          )
	</update>
	
	<!-- SMS 검출 리스트 호출 -->
	<select id="getFactSmsList" parameterClass="smsVO" resultClass="smsVO" remapResults="true">
		SELECT DET_CODE, 
		       (SELECT B.COMMON_CODE_NAME 
		         FROM T_COMMON_CODE B 
		        WHERE B.COMMON_CODE = DET_CODE 
		       ) DET_CODE_NAME, 
		       SYS_KIND, 
		       DET_CONTENT, 
		       DET_DETAIL_CONTENT, 
		       DET_CYCLE, 
		       DP_YN, 
		       CRTDATE, 
		       MODDATE, 
		       USER_YN 
		  FROM T_SMS
		WHERE FACT_CODE = #fact_code#
		  AND BRANCH_NO = #branch_no# 
	</select>
	
	<select id="DetailFactSmsBranch" parameterClass="smsBranchVO" resultClass="smsBranchVO" remapResults="true">
		SELECT SYS_KIND, 
		       DET_CODE, 
		       NOT_SEND_FROM, 
		       NOT_SEND_TO, 
		       CHK_DELAY, 
		       CHK_TIME, 
		       CHK_LOC, 
		       NOT_RCV, 
		       SAME_VAL, 
		       SEND_USE_FLAG, 
		       DELAY_USE_FLAG, 
		       NOT_RCV_USE_FLAG, 
		       LOC_USE_FLAG, 
		       TIME_USE_FLAG, 
		       SEND_DETAIL_EXPLAN, 
		       DELAY_DETAIL_EXPLAN, 
		       NOT_RCV_DETAIL_EXPLAN, 
		       LOC_DETAIL_EXPLAN, 
		       TIME_DETAIL_EXPLAN 
		  FROM T_SMS_BRANCH 
		 WHERE SYS_KIND = #sys_kind# 
		       AND FACT_CODE = #fact_code#
			   AND BRANCH_NO = #branch_no# 
			   AND DET_CODE = #det_code# 
	</select>
	
	
	<!-- SMS 검출 리스트 호출 -->
	<update id="MergeFactSmsBranch" parameterClass="smsBranchVO">
		MERGE INTO T_SMS_BRANCH A USING 
		    (SELECT #sys_kind#	  SYS_KIND,
					#det_code#	  DET_CODE,
					#not_send_from#	  NOT_SEND_FROM,
					#not_send_to#	  NOT_SEND_TO,
					#chk_delay#	  CHK_DELAY,
					#chk_time#	  CHK_TIME,
					#chk_loc#	  CHK_LOC,
					#not_rcv#	  NOT_RCV,
					#same_val#	  SAME_VAL,
					#send_use_flag#	  SEND_USE_FLAG,
					#delay_use_flag#	  DELAY_USE_FLAG,
					#not_rcv_use_flag#	  NOT_RCV_USE_FLAG,
					#loc_use_flag#	  LOC_USE_FLAG,
					#time_use_flag#	  TIME_USE_FLAG,
					#send_detail_explan#	  SEND_DETAIL_EXPLAN,
					#delay_detail_explan#	  DELAY_DETAIL_EXPLAN,
					#not_rcv_detail_explan#	  NOT_RCV_DETAIL_EXPLAN,
					#loc_detail_explan#	  LOC_DETAIL_EXPLAN,
					#time_detail_explan#	  TIME_DETAIL_EXPLAN,
					#fact_code# fact_code,
					#branch_no# branch_no 
		      FROM DUAL) B 
		    ON ( A.SYS_KIND = B.SYS_KIND AND A.DET_CODE = B.DET_CODE AND A.FACT_CODE = B.FACT_CODE AND A.BRANCH_NO = B.BRANCH_NO) 
		WHEN MATCHED THEN 
		   UPDATE SET 
		   		A.NOT_SEND_FROM = B.NOT_SEND_FROM,
				A.NOT_SEND_TO = B.NOT_SEND_TO,
				A.CHK_DELAY = B.CHK_DELAY,
				A.CHK_TIME = B.CHK_TIME,
				A.CHK_LOC = B.CHK_LOC,
				A.NOT_RCV = B.NOT_RCV,
				A.SAME_VAL = B.SAME_VAL,
				A.SEND_USE_FLAG = B.SEND_USE_FLAG,
				A.DELAY_USE_FLAG = B.DELAY_USE_FLAG,
				A.NOT_RCV_USE_FLAG = B.NOT_RCV_USE_FLAG,
				A.LOC_USE_FLAG = B.LOC_USE_FLAG,
				A.TIME_USE_FLAG = B.TIME_USE_FLAG,
				A.SEND_DETAIL_EXPLAN = B.SEND_DETAIL_EXPLAN,
				A.DELAY_DETAIL_EXPLAN = B.DELAY_DETAIL_EXPLAN,
				A.NOT_RCV_DETAIL_EXPLAN = B.NOT_RCV_DETAIL_EXPLAN,
				A.LOC_DETAIL_EXPLAN = B.LOC_DETAIL_EXPLAN,
				A.TIME_DETAIL_EXPLAN = B.TIME_DETAIL_EXPLAN
		WHEN NOT MATCHED THEN 
		   INSERT 
		          (
		                A.FACT_CODE, 
		                A.BRANCH_NO, 
		          		A.SYS_KIND,
		          		A.DET_CODE,
			      		A.NOT_SEND_FROM,
						A.NOT_SEND_TO,
						A.CHK_DELAY,
						A.CHK_TIME,
						A.CHK_LOC,
						A.NOT_RCV,
						A.SAME_VAL,
						A.SEND_USE_FLAG,
						A.DELAY_USE_FLAG,
						A.NOT_RCV_USE_FLAG,
						A.LOC_USE_FLAG,
						A.TIME_USE_FLAG,
						A.SEND_DETAIL_EXPLAN,
						A.DELAY_DETAIL_EXPLAN,
						A.NOT_RCV_DETAIL_EXPLAN,
						A.LOC_DETAIL_EXPLAN,
						A.TIME_DETAIL_EXPLAN
		          ) 
		          VALUES 
		          ( 
		                B.FACT_CODE, 
		                B.BRANCH_NO, 
		          		B.SYS_KIND,
		          		B.DET_CODE,
			      		B.NOT_SEND_FROM,
						B.NOT_SEND_TO,
						B.CHK_DELAY,
						B.CHK_TIME,
						B.CHK_LOC,
						B.NOT_RCV,
						B.SAME_VAL,
						B.SEND_USE_FLAG,
						B.DELAY_USE_FLAG,
						B.NOT_RCV_USE_FLAG,
						B.LOC_USE_FLAG,
						B.TIME_USE_FLAG,
						B.SEND_DETAIL_EXPLAN,
						B.DELAY_DETAIL_EXPLAN,
						B.NOT_RCV_DETAIL_EXPLAN,
						B.LOC_DETAIL_EXPLAN,
						B.TIME_DETAIL_EXPLAN
		          )
	</update>
	
	
	<select id="FactSmsTargetList" resultClass="smsTargetVO">
		SELECT A.SMS_TARGET_NO, 
		       A.FACT_CODE, 
		       A.BRANCH_NO, 
		       A.MEMBER_ID, 
		       A.USE_FLAG, 
		       A.REG_DATE, 
		       A.REG_ID, 
		       A.RECV_TYPE, 
		       A.DET_CODE, 
		       FN_GET_DEPT_NAME(MEMBER.DEPT_CODE) AS DEPTNONAME, 
		       MEMBER.MEMBER_NAME MEMBERNAME, 
		       MEMBER.MOBILE_NO MOBILENO
		  FROM T_SMS_TARGET A, 
		       T_MEMBER MEMBER 
		 WHERE MEMBER.MEMBER_ID = A.MEMBER_ID 
		       AND A.RECV_TYPE = 'B' 
		       AND A.DET_CODE = #det_code#
		       AND A.FACT_CODE = #fact_code#
		       AND A.BRANCH_NO = #branch_no# 
	</select>
</sqlMap>