<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="thematicMapDAO">

	<typeAlias alias="thematicMapVO" 						type="daewooInfo.stats.bean.ThematicMapVO"/>
	<typeAlias alias="thematicMapSearchVO" 		    type="daewooInfo.stats.bean.ThematicMapSearchVO"/>

	<select id="getBermSettingInfo" parameterClass="thematicMapSearchVO" resultClass="thematicMapVO">
		SELECT    BERM_ID bermId
					, MEMBER_ID memberId
					, ITEM item
					, BERM_1 berm1
					, BERM_1_SET berm1Set
					, BERM_2 berm2
					, BERM_2_SET berm2Set
					, BERM_3 berm3
					, BERM_3_SET berm3Set
					, BERM_4 berm4
					, BERM_4_SET berm4Set
					, BERM_5 berm5
					, BERM_5_SET berm5Set
					, BERM_6 berm6
					, BERM_6_SET berm6Set
					, ITEM_R itemR
					, ITEM_H itemH
					, ITEM_T itemT
					, ITEM_WS itemWs
					, ITEM_WD itemWd
					, REG_ID regId
					, REG_DATE regDate
					, MOD_ID modId
					, MOD_DATE modDate
		  FROM T_THEMATICMAP_BERM
		WHERE MEMBER_ID = #searchMemberId#
		    AND ITEM = #searchItem#
	</select>			
	
	<select id="getBermDataList" parameterClass="thematicMapSearchVO" resultClass="thematicMapVO">
			SELECT '1' bermGubun, RTRIM(BERM_1_SET) berm
			  FROM T_THEMATICMAP_BERM
			 WHERE MEMBER_ID = #searchMemberId#
			     AND ITEM = #searchItem#
			     AND BERM_1 = 'Y'
			UNION ALL
			SELECT '2' bermGubun, RTRIM(BERM_2_SET) berm
			  FROM T_THEMATICMAP_BERM
			WHERE MEMBER_ID = #searchMemberId#
			    AND ITEM = #searchItem#
			    AND BERM_2 = 'Y'
			UNION ALL
			SELECT '3' bermGubun, RTRIM(BERM_3_SET) berm
			  FROM T_THEMATICMAP_BERM
			WHERE MEMBER_ID = #searchMemberId#
			    AND ITEM = #searchItem#
			    AND BERM_3 = 'Y'
			UNION ALL
			SELECT '4' bermGubun, RTRIM(BERM_4_SET) berm
			  FROM T_THEMATICMAP_BERM
			WHERE MEMBER_ID = #searchMemberId#
			    AND ITEM = #searchItem#
			    AND BERM_4 = 'Y'
			UNION ALL
			SELECT '5' bermGubun, RTRIM(BERM_5_SET) berm
			  FROM T_THEMATICMAP_BERM
			WHERE MEMBER_ID = #searchMemberId#
			    AND ITEM = #searchItem#
			    AND BERM_5 = 'Y'
			UNION ALL
			SELECT '6' bermGubun, RTRIM(BERM_6_SET) berm
			  FROM T_THEMATICMAP_BERM
			WHERE MEMBER_ID = #searchMemberId#
			    AND ITEM = #searchItem#
			    AND BERM_6 = 'Y'
	</select>	
	
	<statement id="saveBermSettingInfo" parameterClass="thematicMapVO">
		MERGE INTO T_THEMATICMAP_BERM
		  USING DUAL
		  ON (MEMBER_ID = #memberId# AND ITEM = #item#)
		  WHEN MATCHED THEN
			UPDATE SET BERM_1 = #berm1#
					 , BERM_1_SET = #berm1Set#
					 , BERM_2 = #berm2#
					 , BERM_2_SET = #berm2Set#
					 , BERM_3 = #berm3#
					 , BERM_3_SET = #berm3Set#
					 , BERM_4 = #berm4#
					 , BERM_4_SET = #berm4Set#
					 , BERM_5 = #berm5#
					 , BERM_5_SET = #berm5Set#
					 , BERM_6 = #berm6#
					 , BERM_6_SET = #berm6Set#
					 , ITEM_R = #itemR#
					 , ITEM_H = #itemH#
					 , ITEM_T = #itemT#
					 , ITEM_WS = #itemWs#
					 , ITEM_WD = #itemWd#
					 , MOD_ID = #memberId#
					 , MOD_DATE = sysdate
		  WHEN NOT MATCHED THEN
			INSERT( BERM_ID
				  , MEMBER_ID
				  , ITEM
				  , BERM_1
				  , BERM_1_SET
				  , BERM_2
				  , BERM_2_SET
				  , BERM_3
				  , BERM_3_SET
				  , BERM_4
				  , BERM_4_SET
				  , BERM_5
				  , BERM_5_SET
				  , BERM_6
				  , BERM_6_SET
				  , ITEM_R
				  , ITEM_H
				  , ITEM_T
				  , ITEM_WS
				  , ITEM_WD
				  , REG_ID
				  , REG_DATE
				  )
		  VALUES(
					#bermId#
				  , #memberId#
				  , #item#
				  , #berm1#
				  , #berm1Set#
				  , #berm2#
				  , #berm2Set#
				  , #berm3#
				  , #berm3Set#
				  , #berm4#
				  , #berm4Set#
				  , #berm5#
				  , #berm5Set#
				  , #berm6#
				  , #berm6Set#
				  , #itemR#
				  , #itemH#
				  , #itemT#
				  , #itemWs#
				  , #itemWd#
				  , #memberId#
				  , sysdate
				)
	</statement>		
	
	<select id="getThematicMapDetail" parameterClass="thematicMapSearchVO" resultClass="thematicMapVO">
		SELECT STD.BRANCH_NAME_N branchNameN
		          , STD.BRANCH_NO branchNo
		          , STD.FACT_CODE factCode
			      , STD.TUR_N turN
			      , STD.TUR_C turC
			      , STD.DOW_N dowN
			      , STD.DOW_C dowC
			      , STD.TMP_N tmpN
			      , STD.TMP_C tmpC
			      , STD.PHY_N phyN
			      , STD.PHY_C phyC
			      , STD.CON_N conN
			      , STD.CON_C conC
			      , STD.TOF_N tofN
			      , STD.TOF_C tofC
			      , STD.LATITUDE latitude
      			  , STD.LONGITUDE longitude
      			  , WT.RAIN_FALL rainFall
			      , WT.HUMIDITY humidity
			      , WT.TEMP temp
			      , WT.WIND_SPEED windSpeed
			      , WT.WIND_DIR windDir
		FROM
		(SELECT NOW.BRANCH_NAME_N
		          , NOW.BRANCH_NO
		          , NOW.FACT_CODE
			      , NOW.TUR_N
			      , COM.TUR_C
			      , NOW.DOW_N
			      , COM.DOW_C
			      , NOW.TMP_N
			      , COM.TMP_C
			      , NOW.PHY_N
			      , COM.PHY_C
			      , NOW.CON_N
			      , COM.CON_C
			      , NOW.TOF_N
			      , COM.TOF_C
			      , NOW.LATITUDE
      			  , NOW.LONGITUDE
			FROM(SELECT BB.BRANCH_NAME||'-'||BB.BRANCH_NO BRANCH_NAME_N
			     , BB.BRANCH_NO
			     , BB.FACT_CODE
			     , AA.TUR TUR_N
			     , AA.DOW DOW_N
			     , AA.TMP TMP_N
			     , AA.PHY PHY_N
			     , AA.CON CON_N
			     , AA.TOF TOF_N
			     , BB.LATITUDE
     			 , BB.LONGITUDE
			FROM(SELECT A.BRANCH_NAME
			     , A.BRANCH_NO
			     , A.FACT_CODE
			     , TO_CHAR(AVG(DECODE(TRUNC(TUR,2), '999999', NULL, TUR)), 'FM999,990.00') AS TUR 
		         , TO_CHAR(AVG(DECODE(TRUNC(DOW,2), '999999', NULL, DOW)), 'FM999,990.00') AS DOW
		         , TO_CHAR(AVG(DECODE(TRUNC(TMP,2), '999999', NULL, TMP)), 'FM999,990.00') AS TMP
		         , TO_CHAR(AVG(DECODE(TRUNC(PHY,2), '999999', NULL, PHY)), 'FM999,990.00') AS PHY
		         , TO_CHAR(AVG(DECODE(TRUNC(CON,3), '999999', NULL, CON)), 'FM999,990.000') AS CON
		         , TO_CHAR(AVG(DECODE(TRUNC(TOF,2), '999999', NULL, TOF)), 'FM999,990.00') AS TOF
			FROM(
			 SELECT DISTINCT A.ITEM_CODE AS ITEM_CODE ,
			        B.ITEM_NAME                 AS ITEM_NAME ,
			        A.FACT_CODE                 AS FACT_CODE ,
			        A.BRANCH_NO                 AS BRANCH_NO ,
			        D.BRANCH_NAME,
			        DECODE(A.ITEM_CODE, 'TUR00', MIN_VL)                       AS TUR ,
			        DECODE(A.ITEM_CODE, 'TUR00', MIN_OR)                       AS TUR_OR ,
			        DECODE(A.ITEM_CODE, 'TUR00', MIN_ST)                       AS TUR_ST ,
			        DECODE(A.ITEM_CODE, 'DOW00', MIN_VL)                       AS DOW ,
			        DECODE(A.ITEM_CODE, 'DOW00', MIN_OR)                       AS DOW_OR ,
			        DECODE(A.ITEM_CODE, 'DOW00', MIN_ST)                       AS DOW_ST ,
			        DECODE(A.ITEM_CODE, 'DOW01', MIN_VL)                       AS DOW2 ,
			        DECODE(A.ITEM_CODE, 'DOW01', MIN_OR)                       AS DOW2_OR ,
			        DECODE(A.ITEM_CODE, 'DOW01', MIN_ST)                       AS DOW2_ST ,
			        DECODE(A.ITEM_CODE, 'TMP00', MIN_VL)                       AS TMP ,
			        DECODE(A.ITEM_CODE, 'TMP00', MIN_OR)                       AS TMP_OR ,
			        DECODE(A.ITEM_CODE, 'TMP00', MIN_ST)                       AS TMP_ST ,
			        DECODE(A.ITEM_CODE, 'TMP01', MIN_VL)                       AS TMP2 ,
			        DECODE(A.ITEM_CODE, 'TMP01', MIN_OR)                       AS TMP2_OR ,
			        DECODE(A.ITEM_CODE, 'TMP01', MIN_ST)                       AS TMP2_ST ,
			        DECODE(A.ITEM_CODE, 'PHY00', MIN_VL)                       AS PHY ,
			        DECODE(A.ITEM_CODE, 'PHY00', MIN_OR)                       AS PHY_OR ,
			        DECODE(A.ITEM_CODE, 'PHY00', MIN_ST)                       AS PHY_ST ,
			        DECODE(A.ITEM_CODE, 'PHY01', MIN_VL)                       AS PHY2 ,
			        DECODE(A.ITEM_CODE, 'PHY01', MIN_OR)                       AS PHY2_OR ,
			        DECODE(A.ITEM_CODE, 'PHY01', MIN_ST)                       AS PHY2_ST ,
			        DECODE(A.ITEM_CODE, 'CON00', MIN_VL)                       AS CON ,
			        DECODE(A.ITEM_CODE, 'CON00', MIN_OR)                       AS CON_OR ,
			        DECODE(A.ITEM_CODE, 'CON00', MIN_ST)                       AS CON_ST ,
			        DECODE(A.ITEM_CODE, 'CON01', MIN_VL)                       AS CON2 ,
			        DECODE(A.ITEM_CODE, 'CON01', MIN_OR)                       AS CON2_OR ,
			        DECODE(A.ITEM_CODE, 'CON01', MIN_ST)                       AS CON2_ST ,
			        DECODE(A.ITEM_CODE, 'TOF00', MIN_VL)                       AS TOF ,
			        DECODE(A.ITEM_CODE, 'TOF00', MIN_OR)                       AS TOF_OR ,
			        DECODE(A.ITEM_CODE, 'TOF00', MIN_ST)                       AS TOF_ST 
			      	<isEqual property="searchData" compareValue="B">
			    		FROM T_MIN_DATA A ,
					</isEqual>
					<isEqual property="searchData" compareValue="A">
			    		FROM T_MIN_DATA_DEFINITE A ,
					</isEqual>
			        T_ITEM_INFO B ,
			        T_FACT_INFO C ,
			        T_FACT_BRANCH_INFO D 
			     WHERE A.ITEM_CODE       = B.ITEM_CODE
			      AND A.FACT_CODE       = C.FACT_CODE
			      AND C.FACT_CODE       = D.FACT_CODE
			      AND A.BRANCH_NO       = D.BRANCH_NO
			      AND D.BRANCH_USE_FLAG = 'Y'
			      AND C.FACT_USE_FLAG   = 'Y'
			      AND C.RIVER_DIV       = #searchSugye#
			      AND A.FACT_CODE     = #searchFactCode#
			      AND C.SYS_KIND        = 'U'
			      AND A.MIN_TIME BETWEEN #searchNsDays# AND #searchNeDays#
			) A
			GROUP BY BRANCH_NO ,
			      BRANCH_NAME,
			      FACT_CODE 
			)AA, T_FACT_BRANCH_INFO BB
			<isNotEqual property="roleCode" compareValue="ROLE_ADMIN">
				, T_MEMBER_AUTHORINFO CC
			</isNotEqual>
			WHERE BB.FACT_CODE = #searchFactCode#
			  AND BB.BRANCH_USE_FLAG='Y'
			  AND AA.BRANCH_NO(+) = BB.BRANCH_NO
			  <isNotEqual property="roleCode" compareValue="ROLE_ADMIN">
				AND CC.MEMBER_ID = #searchMemberId#
			    AND BB.FACT_CODE = CC.FACT_CODE
			    AND BB.BRANCH_NO = CC.BRANCH_NO
			  </isNotEqual>
			) NOW
			LEFT OUTER JOIN 
			(SELECT BB.BRANCH_NAME||'-'||BB.BRANCH_NO BRANCH_NAME_C
			     , AA.TUR TUR_C
			     , AA.DOW DOW_C
			     , AA.TMP TMP_C
			     , AA.PHY PHY_C
			     , AA.CON CON_C
			     , AA.TOF TOF_C
			FROM(SELECT A.BRANCH_NAME
			     , A.BRANCH_NO
			     , TO_CHAR(AVG(DECODE(TRUNC(TUR,2), '999999', NULL, TUR)), 'FM999,990.00') AS TUR 
		         , TO_CHAR(AVG(DECODE(TRUNC(DOW,2), '999999', NULL, DOW)), 'FM999,990.00') AS DOW
		         , TO_CHAR(AVG(DECODE(TRUNC(TMP,2), '999999', NULL, TMP)), 'FM999,990.00') AS TMP
		         , TO_CHAR(AVG(DECODE(TRUNC(PHY,2), '999999', NULL, PHY)), 'FM999,990.00') AS PHY
		         , TO_CHAR(AVG(DECODE(TRUNC(CON,3), '999999', NULL, CON)), 'FM999,990.000') AS CON
		         , TO_CHAR(AVG(DECODE(TRUNC(TOF,2), '999999', NULL, TOF)), 'FM999,990.00') AS TOF
			FROM(
			 SELECT DISTINCT A.ITEM_CODE AS ITEM_CODE ,
			        B.ITEM_NAME                 AS ITEM_NAME ,
			        A.FACT_CODE                 AS FACT_CODE ,
			        A.BRANCH_NO                 AS BRANCH_NO ,
			        D.BRANCH_NAME,
			        DECODE(A.ITEM_CODE, 'TUR00', MIN_VL)                       AS TUR ,
			        DECODE(A.ITEM_CODE, 'TUR00', MIN_OR)                       AS TUR_OR ,
			        DECODE(A.ITEM_CODE, 'TUR00', MIN_ST)                       AS TUR_ST ,
			        DECODE(A.ITEM_CODE, 'DOW00', MIN_VL)                       AS DOW ,
			        DECODE(A.ITEM_CODE, 'DOW00', MIN_OR)                       AS DOW_OR ,
			        DECODE(A.ITEM_CODE, 'DOW00', MIN_ST)                       AS DOW_ST ,
			        DECODE(A.ITEM_CODE, 'DOW01', MIN_VL)                       AS DOW2 ,
			        DECODE(A.ITEM_CODE, 'DOW01', MIN_OR)                       AS DOW2_OR ,
			        DECODE(A.ITEM_CODE, 'DOW01', MIN_ST)                       AS DOW2_ST ,
			        DECODE(A.ITEM_CODE, 'TMP00', MIN_VL)                       AS TMP ,
			        DECODE(A.ITEM_CODE, 'TMP00', MIN_OR)                       AS TMP_OR ,
			        DECODE(A.ITEM_CODE, 'TMP00', MIN_ST)                       AS TMP_ST ,
			        DECODE(A.ITEM_CODE, 'TMP01', MIN_VL)                       AS TMP2 ,
			        DECODE(A.ITEM_CODE, 'TMP01', MIN_OR)                       AS TMP2_OR ,
			        DECODE(A.ITEM_CODE, 'TMP01', MIN_ST)                       AS TMP2_ST ,
			        DECODE(A.ITEM_CODE, 'PHY00', MIN_VL)                       AS PHY ,
			        DECODE(A.ITEM_CODE, 'PHY00', MIN_OR)                       AS PHY_OR ,
			        DECODE(A.ITEM_CODE, 'PHY00', MIN_ST)                       AS PHY_ST ,
			        DECODE(A.ITEM_CODE, 'PHY01', MIN_VL)                       AS PHY2 ,
			        DECODE(A.ITEM_CODE, 'PHY01', MIN_OR)                       AS PHY2_OR ,
			        DECODE(A.ITEM_CODE, 'PHY01', MIN_ST)                       AS PHY2_ST ,
			        DECODE(A.ITEM_CODE, 'CON00', MIN_VL)                       AS CON ,
			        DECODE(A.ITEM_CODE, 'CON00', MIN_OR)                       AS CON_OR ,
			        DECODE(A.ITEM_CODE, 'CON00', MIN_ST)                       AS CON_ST ,
			        DECODE(A.ITEM_CODE, 'CON01', MIN_VL)                       AS CON2 ,
			        DECODE(A.ITEM_CODE, 'CON01', MIN_OR)                       AS CON2_OR ,
			        DECODE(A.ITEM_CODE, 'CON01', MIN_ST)                       AS CON2_ST ,
			        DECODE(A.ITEM_CODE, 'TOF00', MIN_VL)                       AS TOF ,
			        DECODE(A.ITEM_CODE, 'TOF00', MIN_OR)                       AS TOF_OR ,
			        DECODE(A.ITEM_CODE, 'TOF00', MIN_ST)                       AS TOF_ST 
			      	<isEqual property="searchData" compareValue="B">
			    		FROM T_MIN_DATA A ,
					</isEqual>
					<isEqual property="searchData" compareValue="A">
			    		FROM T_MIN_DATA_DEFINITE A ,
					</isEqual>
			        T_ITEM_INFO B ,
			        T_FACT_INFO C ,
			        T_FACT_BRANCH_INFO D 
			     WHERE A.ITEM_CODE       = B.ITEM_CODE
			      AND A.FACT_CODE       = C.FACT_CODE
			      AND C.FACT_CODE       = D.FACT_CODE
			      AND A.BRANCH_NO       = D.BRANCH_NO
			      AND D.BRANCH_USE_FLAG = 'Y'
			      AND C.FACT_USE_FLAG   = 'Y'
			      AND C.RIVER_DIV       = #searchSugye#
			      AND A.FACT_CODE       = #searchFactCode#
			      AND C.SYS_KIND        = 'U'
			      AND A.MIN_TIME BETWEEN #searchCsDays# AND #searchCeDays#
			) A
			GROUP BY BRANCH_NO ,
			      BRANCH_NAME 
			)AA, T_FACT_BRANCH_INFO BB
			<isNotEqual property="roleCode" compareValue="ROLE_ADMIN">
				, T_MEMBER_AUTHORINFO CC
			</isNotEqual>
			WHERE BB.FACT_CODE = #searchFactCode#
			  AND BB.BRANCH_USE_FLAG='Y'
			  AND AA.BRANCH_NO(+) = BB.BRANCH_NO
			  <isNotEqual property="roleCode" compareValue="ROLE_ADMIN">
				AND CC.MEMBER_ID = #searchMemberId#
			    AND BB.FACT_CODE = CC.FACT_CODE
			    AND BB.BRANCH_NO = CC.BRANCH_NO
			  </isNotEqual>
			) COM
			ON(NOW.BRANCH_NAME_N = COM.BRANCH_NAME_C)
			) STD LEFT OUTER JOIN T_WEATHER_INFO WT
  			ON(WT.ANNOUNCE_TIME = #searchNsDays# AND WT.FCAST_FLAG = 'N' AND STD.FACT_CODE = WT.FACT_CODE AND STD.BRANCH_NO = WT.BRANCH_NO)
			ORDER BY STD.BRANCH_NO 
	</select>	
	
	<select id="getFactCodeValue" resultClass="String">
		SELECT F01.FACT_CODE      AS VALUE
		  FROM T_FACT_INFO F01
		WHERE F01.FACT_USE_FLAG = 'Y'
			AND F01.SYS_KIND        = 'U'
		    AND F01.RIVER_DIV       = #searchSugye#
	</select>	
</sqlMap>