<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="alertStepDAO">

	<typeAlias alias="alertStepVO" type="daewooInfo.alert.bean.AlertStepVO"/>
	<typeAlias alias="alertStepLastVO" type="daewooInfo.alert.bean.AlertStepLastVO"/>
	<typeAlias  alias="FileVO" type="daewooInfo.cmmn.bean.FileVO"/>
	<typeAlias alias="alertSendDataVO" type="daewooInfo.alert.bean.AlertSendDataVO"/>
	
	<!-- insert Alert Step -->
	<insert id="alertStepDAO.insertAlertStep" parameterClass="alertStepVO">
		INSERT INTO T_IW_HIS
			( IW_NO
			, RIVER_DIV
			, FACT_CODE
			, BRANCH_NO
			, ITEM_CODE
			, MIN_TIME
			, MIN_OR
			, MIN_VL
			, ACCT_ACT_STEP
			, ACCT_ACT_TEST
			, ACCT_ACT_TIME 
			, EXECES_ITEM_CODE
			, EXECES_MIN_VL
			, EXECES_ITEM_CODE2
			, EXECES_MIN_VL2
			, MEMBER_ID
			, MEMBER_TEL
			, MEMBER_NAME
			, MEMBER_CATEGORY
			, RECEIPT_TYPE
			, ITEM_TYPE
			, ADDR
			, ADDR_DET
			, MAP_X
			, MAP_Y
			, ACCT_ACT_CONTENT
			, ACCT_ACT_ETC
			, ATCH_FILE_ID
			<isNotNull prepend="," property="alertKind" >
				ACCT_KIND
			</isNotNull> 
			)
		VALUES
			( #asId#
			, #riverId#
			, #factCode#
			, #branchNo#
			, #itemCode#
			, #minTime#
			, #minOr#
			, #minVl#
			, #alertStep# 
			, #alertTest#
			, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI')
			, #excessItemCode#
			, #excessMinVl#
			, #excessItemCode_2#
			, #excessMinVl_2#
			, #memberId#
			, #memberTel#
			, #memberName# 
			, #memberCategory# 
			, #receiptType#
			, #itemType#
			, #address#
			, #addr_det#
			, #mapx#
			, #mapy#
			, #alertContents#
			, #alertEtc#
			, #atchFileId#
			<isNotNull prepend="," property="alertKind" >
				#alertKind#
			</isNotNull>
			)
	</insert>
	
	<!-- insert Alert Step Sub -->
	<insert id="alertStepDAO.insertAlertStepSub" parameterClass="alertStepVO">
		INSERT INTO T_IW_HIS_DET
			( IW_NO
			, ACCT_ACT_STEP
			, ACCT_ACT_TIME
			, ACCT_ACT_TEXT
			)
		VALUES
			( #asId#
			, #alertStep#
			, #alertTime#
			, #alertStepText#
			)
	</insert>

	<insert id="alertStepDAO.updateAlertTime" parameterClass="alertStepVO">
		UPDATE 
			T_IW_HIS_DET
		SET
			ACCT_ACT_TIME = #alertTime#
		WHERE
			IW_NO = #asId#
			AND ACCT_ACT_STEP = #alertStep#
	</insert>
	
	<!-- update Alert Step -->
	<insert id="alertStepDAO.updateAlertStep" parameterClass="alertStepVO">
		UPDATE T_IW_HIS
		SET ACCT_ACT_STEP = #alertStep#
		WHERE IW_NO = #asId#
	</insert>
	
	
	<!-- get Max asId -->
	<select id="alertStepDAO.getMaxAsId" parameterClass="alertStepVO" resultClass="String">
		SELECT SEQ_ALERT_STEP.NEXTVAL FROM DUAL
	</select>
	
	<sql id="getAlertStep-where">
		FROM	T_IW_HIS TAS
				,T_FACT_INFO TFI
				,T_ITEM_INFO TI 
				,(
					SELECT 
						A.IW_NO, A.ACCT_ACT_STEP, A.ACCT_ACT_TIME
					FROM
						T_IW_HIS_DET A
					WHERE A.DEL_YN = 'N'
				) B
		WHERE TAS.FACT_CODE = TFI.FACT_CODE(+)
			AND TAS.ITEM_CODE = TI.ITEM_CODE 
			AND B.IW_NO = TAS.IW_NO 
			AND TAS.DEL_YN = 'N'
		<isNotEqual property="riverId" compareValue="All">
			AND TAS.RIVER_DIV = #riverId#
		</isNotEqual>
		<isNotEqual property="receiptType" compareValue="All">
			AND TAS.RECEIPT_TYPE = #receiptType#
		</isNotEqual>
		<isNotEqual property="system" compareValue="All">
			AND TFI.SYS_KIND = #system#
		</isNotEqual>
		<isEqual property="itemType" compareValue="All">
			AND (TAS.ITEM_TYPE IS NULL OR TAS.ITEM_TYPE IN ('TYPE1','TYPE2'))
		</isEqual>
		<isNotEqual property="itemType" compareValue="All">
			<isEqual property="itemType" compareValue="AUTO">
			AND TAS.ITEM_TYPE IS NULL
			</isEqual>
			<isNotEqual property="itemType" compareValue="AUTO">
			 AND TAS.ITEM_TYPE = #itemType#
			</isNotEqual>
		</isNotEqual>
		AND TAS.MIN_TIME BETWEEN SUBSTR(#toDate#, 0,8) || '0000' AND SUBSTR(#fromDate#, 0,8) || '2359'
		GROUP BY TAS.IW_NO , TAS.RIVER_DIV, TAS.FACT_CODE
			, TFI.FACT_NAME
			, TAS.BRANCH_NO
			, TAS.ITEM_CODE
			, TAS.EXECES_ITEM_CODE
			, TAS.EXECES_ITEM_CODE2
			, TI.ITEM_NAME
			,TAS.MIN_TIME
			,TAS.ACCT_ACT_TIME
			, TAS.MIN_VL
			, TAS.EXECES_MIN_VL
			, TAS.EXECES_MIN_VL2
			, TAS.ACCT_ACT_STEP
			, ACCT_ACT_TEST
			, ITEM_TYPE
			, ADDR
			, ADDR_DET
			, TFI.SYS_KIND
			, TAS.MIN_OR
	</sql> 
	
	
	<sql id="getAlertStep-where-complete">
		FROM	T_IW_HIS TAS
				,T_FACT_INFO TFI
				,T_ITEM_INFO TI 
				,(
					SELECT
						A.IW_NO, A.ACCT_ACT_STEP, A.ACCT_ACT_TIME
					FROM
						T_IW_HIS_DET A
					WHERE A.DEL_YN = 'N'
				) B
		WHERE TAS.FACT_CODE = TFI.FACT_CODE(+)
			AND TAS.ITEM_CODE = TI.ITEM_CODE
			AND B.IW_NO = TAS.IW_NO 
			AND TAS.DEL_YN = 'N'
		<!-- 
		AND (
			TAS.ACCT_ACT_STEP = '6'
			OR TAS.ACCT_ACT_STEP = '7'
			OR TAS.ACCT_ACT_STEP = '8'
			OR TAS.ACCT_aCT_STEP = '10'
		)
		-->
			AND TAS.ACCT_ACT_TEST = '0'
			AND TAS.MIN_TIME BETWEEN #startDate# || '0000' AND #endDate# || '9999'
		<isNotEmpty property="system">
			AND TFI.SYS_KIND = #system#
		</isNotEmpty>
		<isNotEqual property="minOr" compareValue="0">
			AND TAS.MIN_OR = #minOr#
		</isNotEqual>
		GROUP BY TAS.IW_NO , TAS.RIVER_DIV, TAS.FACT_CODE
			, TFI.FACT_NAME
			, TAS.BRANCH_NO
			, TAS.ITEM_CODE
			, TAS.EXECES_ITEM_CODE
			, TAS.EXECES_ITEM_CODE2
			, TI.ITEM_NAME
			,TAS.MIN_TIME
			,TAS.ACCT_ACT_TIME
			, TAS.MIN_VL
			, TAS.EXECES_MIN_VL
			, TAS.EXECES_MIN_VL2
			, TAS.ACCT_ACT_STEP
			, ACCT_ACT_TEST
			, ITEM_TYPE
			, ADDR
			, ADDR_DET
			, TFI.SYS_KIND
			, TAS.MIN_OR
	</sql> 
	 
	<select id="alertStepDAO.getAlertStepListCount" parameterClass="alertStepVO" resultClass="java.lang.Integer">
	SELECT COUNT(*) FROM (
		SELECT
			  TAS.IW_NO			as asId
			, DECODE(TAS.RIVER_DIV, 'R01', '한강', 'R02','낙동강','R03','금강','R04','영산강')   as riverId
			, TAS.FACT_CODE		as factCode
			, TFI.FACT_NAME		as factName
			,(
				SELECT BRANCH_NAME FROM T_FACT_BRANCH_INFO WHERE FACT_CODE = TAS.FACT_CODE AND BRANCH_NO = TAS.BRANCH_NO
			) branchName
			, TAS.BRANCH_NO		as branchNo
			, TAS.ITEM_CODE		as itemCode
			, TI.ITEM_NAME		as itemName
			, TO_CHAR (TO_DATE(TAS.MIN_TIME,'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') as minTime
			, TO_CHAR (TO_DATE(TAS.ACCT_ACT_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') AS alertTime
			, (SELECT COMMON_CODE_NAME FROM T_COMMON_CODE WHERE COMMON_CODE_CATEGORY ='19' AND USE_FLAG = 'Y' AND COMMON_CODE = TAS.MIN_OR) as minOr
			, TAS.MIN_VL		as minVl
			, TAS.ACCT_ACT_STEP	as alertStep
			, ACCT_ACT_TEST		as alertTest
			, DECODE(ITEM_TYPE,'TYPE2','현장측정','TYPE1','육안관찰','자동측정')	as itemType
			, DECODE(ADDR,'','',SUBSTR(ADDR,0,2)) AS address
			, ADDR AS addr_det
			, DECODE(TFI.SYS_KIND, 'T','탁수 모니터링', 'U','이동형측정기기','A','국가수질자동측정망') system
			, TO_CHAR (TO_DATE(TAS.ACCT_ACT_TIME, 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP1
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '2', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP2
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '3', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP3
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '4', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP4
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '5', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP5
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '6', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP6
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '7', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP7
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '8', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP8
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '9', TAS.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP9
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '10', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP10
			<isNull property="isComplete">
				<include refid="getAlertStep-where"/>
			</isNull>
			<isNotNull property="isComplete">
				<include refid="getAlertStep-where-complete"/>
			</isNotNull>
	)
	</select>
	
	<!-- get Alert Step List -->
	<select id="alertStepDAO.getAlertStepList" parameterClass="alertStepVO" resultClass="alertStepVO">
	SELECT * FROM ( SELECT rownum rn, TB.* FROM (
		 SELECT 
			 TAS.IW_NO			as asId
			, DECODE(TAS.RIVER_DIV, 'R01', '한강', 'R02','낙동강','R03','금강','R04','영산강') as riverId
			, TAS.FACT_CODE		as factCode
			, TFI.FACT_NAME		as factName
			 ,(
				SELECT BRANCH_NAME FROM T_FACT_BRANCH_INFO WHERE FACT_CODE = TAS.FACT_CODE AND BRANCH_NO = TAS.BRANCH_NO
			) branchName
			, TAS.BRANCH_NO		as branchNo
			, TI.ITEM_NAME		as itemName
			, ( SELECT ITEM_NAME FROM T_ITEM_INFO TTI WHERE TTI.ITEM_CODE = TAS.EXECES_ITEM_CODE ) itemName2
			, ( SELECT ITEM_NAME FROM T_ITEM_INFO TTI WHERE TTI.ITEM_CODE = TAS.EXECES_ITEM_CODE2 ) itemName3
			, TAS.ITEM_CODE		as itemCode
			, TAS.EXECES_ITEM_CODE itemCode2
			, TAS.EXECES_ITEM_CODE2 itemCode3
			, TO_CHAR (TO_DATE(TAS.MIN_TIME,'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') as minTime
			, TO_CHAR (TO_DATE(TAS.ACCT_ACT_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') AS alertTime
			, (SELECT COMMON_CODE_NAME FROM T_COMMON_CODE WHERE COMMON_CODE_CATEGORY ='19' AND USE_FLAG = 'Y' AND COMMON_CODE = TAS.MIN_OR) as minOr
			, TO_CHAR(TAS.MIN_VL, 'FM999999990.00') as minVl
			, TO_CHAR(TAS.EXECES_MIN_VL, 'FM999999990.00') as minVl2
			, TO_CHAR(TAS.EXECES_MIN_VL2, 'FM999999990.00') as minVl3
			, TAS.ACCT_ACT_STEP	as alertStep
			, ACCT_ACT_TEST		as alertTest
			, DECODE(ITEM_TYPE,'TYPE2','현장측정','TYPE1','육안관찰','자동측정')	as itemType
			, ITEM_TYPE as itemTypeCode
			, DECODE(ADDR,'','',SUBSTR(ADDR,0,2)) AS address
			, ADDR_DET AS addr_det
			, DECODE(TFI.SYS_KIND, 'T','탁수 모니터링', 'U','이동형측정기기','A','국가수질자동측정망') system
			, TO_CHAR (TO_DATE(TAS.ACCT_ACT_TIME, 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP1
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '2', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP2
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '3', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP3
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '4', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP4
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '5', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP5
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '6', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP6
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '7', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP7
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '8', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP8
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '9', TAS.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP9
			, TO_CHAR(TO_DATE(MAX(DECODE(B.ACCT_ACT_STEP, '10', B.ACCT_ACT_TIME)), 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') AS STEP10
		  <isNull property="isComplete">
				<include refid="getAlertStep-where"/>
			</isNull>
			<isNotNull property="isComplete">
				<include refid="getAlertStep-where-complete"/>
			</isNotNull>
		ORDER BY TAS.ACCT_ACT_TIME DESC
		) TB ) WHERE rn BETWEEN #firstIndex# + 1 AND #firstIndex# + #recordCountPerPage# 
	</select>
	
	
	
	<!-- get Alert Step -->
	<select id="alertStepDAO.getAlertStep" parameterClass="alertStepVO" resultClass="alertStepVO">
		SELECT 
			TAS.IW_NO			as asId
			,DECODE(TAS.RIVER_DIV, 'R01', '한강', 'R02','낙동강','R03','금강','R04','영산강') as riverId
			,TAS.RIVER_DIV as riverDiv
			, TAS.FACT_CODE		as factCode
			, TFI.FACT_NAME		as factName
			,(
				SELECT BRANCH_NAME FROM T_FACT_BRANCH_INFO WHERE FACT_CODE = TAS.FACT_CODE AND BRANCH_NO = TAS.BRANCH_NO
			) branchName
			, DECODE(TAS.ACCT_KIND,'A',TAS.ADDR,'B',TAS.BRANCH_NO || '측정소','C',TAS.BRANCH_NO || '측정소' ) as alertKind
			, TAS.BRANCH_NO		as branchNo
			, TI.ITEM_NAME		as itemName
			, ( SELECT ITEM_NAME FROM T_ITEM_INFO TTI WHERE TTI.ITEM_CODE = TAS.EXECES_ITEM_CODE ) itemName2
			, ( SELECT ITEM_NAME FROM T_ITEM_INFO TTI WHERE TTI.ITEM_CODE = TAS.EXECES_ITEM_CODE2 ) itemName3
			, TAS.ITEM_CODE		as itemCode
			, TAS.EXECES_ITEM_CODE itemCode2
			, TAS.EXECES_ITEM_CODE2 itemCode3
			, TO_CHAR (TO_DATE(TAS.MIN_TIME,'YYYYMMDDHH24MI')-(3/24), 'YYYY/MM/DD HH24:MI') AS minTime
			, TO_CHAR (TO_DATE(TAS.MIN_TIME,'YYYYMMDDHH24MI')-(3/24), 'YYYYMMDDHH24MI') AS minTimeStr
			, TO_CHAR (TO_DATE(TAS.MIN_TIME,'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') AS oMinTime
			, TO_CHAR (TO_DATE(TAS.ACCT_ACT_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') AS alertTime
			, TO_CHAR(TAS.MIN_VL, 'FM999999990.00') as minVl
			, TO_CHAR(TAS.EXECES_MIN_VL, 'FM999999990.00') as minVl2
			, TO_CHAR(TAS.EXECES_MIN_VL2, 'FM999999990.00') as minVl3
			, DECODE(TAS.MIN_OR, '0','정상','1','관심','2', '주의', '3', '경계', '4', '심각') as minOr
			, TAS.MIN_OR minOrNum
			, TAS.ACCT_ACT_STEP as alertStep
			, ITEM_TYPE as itemType
			, DECODE(ITEM_TYPE,'TYPE2','현장측정','TYPE1','육안관찰','자동측정') as itemTypeName
			, TAS.ITEM_TYPE as itemType
			, (SELECT COMMON_CODE_NAME FROM T_COMMON_CODE WHERE COMMON_CODE_CATEGORY = '35' AND COMMON_CODE=TAS.RECEIPT_TYPE AND ROWNUM =1 ) as receiptType
			, (SELECT COMMON_CODE_NAME FROM T_COMMON_CODE WHERE COMMON_CODE_CATEGORY = '41' AND COMMON_CODE=TAS.MEMBER_CATEGORY AND ROWNUM =1 ) as memberCategory
			, TAS.ATCH_FILE_ID  as atchFileId
			, ACCT_CNT as alertCount
			, TFI.FACT_ADDR as factAddr
			, TFI.SYS_KIND system
			, ADDR AS address
			, ADDR_DET AS addr_det
			,
			decode(TFI.SYS_KIND, 'U',
				(select reg_name from t_weather_area where fact_code = TAS.fact_code and branch_no = TAS.branch_no),
				(select reg_name from t_weather_area where fact_code = TAS.fact_code)
			) regName
		FROM	T_IW_HIS TAS
				,T_FACT_INFO TFI
				,T_ITEM_INFO TI 
				,T_WEATHER_AREA WA
		WHERE	TAS.FACT_CODE = TFI.FACT_CODE(+)
		AND	 TAS.ITEM_CODE = TI.ITEM_CODE  
		AND TAS.DEl_YN = 'N'
		AND	 TAS.IW_NO = #asId#
		AND TAS.FACT_CODE = WA.FACT_CODE(+)
		AND TAS.BRANCH_NO = WA.BRANCH_NO(+)
	</select>
		
	<!-- get Alert Step Sub List-->
	<select id="alertStepDAO.getAlertStepSubList" parameterClass="alertStepVO" resultClass="alertStepVO">
	<![CDATA[
		SELECT	 
			(SELECT COMMON_CODE_DESC FROM T_COMMON_CODE WHERE COMMON_CODE_CATEGORY = '25' AND USE_FLAG = 'Y' AND COMMON_CODE = ASS.ACCT_ACT_STEP)		as alertStep
			, ASS.ACCT_ACT_STEP alertStepNum
			, TO_CHAR (TO_DATE(ASS.ACCT_ACT_TIME,'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI')	as alertStepTime
			, ASS.ACCT_ACT_TIME as alertStepTimeStr
			, REPLACE(ASS.ACCT_ACT_TEXT, chr(13)||chr(10), '<br>')							as alertStepText
	]]>
		FROM T_IW_HIS_DET ASS
		WHERE IW_NO = #asId#
			AND ASS.DEL_YN = 'N'
		<isNotEqual property="alertStep" compareValue="all">
			AND ACCT_ACT_STEP = #alertStep#
		</isNotEqual>
		ORDER BY TO_NUMBER(ACCT_ACT_STEP)
	</select>
	
	<!-- get LastTime Alert Step -->
	<select id="alertStepDAO.getLastAlert" parameterClass="alertStepVO" resultClass="alertStepLastVO">
		SELECT	 
			IW_NO			as asId
			, ACCT_ACT_STEP	as alertStep
			, MIN_OR		as minOr
			, ACCT_CNT		as alertCount
			, ACCT_ACT_TIME	as alertTime
			, ((TO_DATE(#minTime#,'YYYYMMDDHH24MI') - TO_DATE(ACCT_ACT_TIME,'YYYYMMDDHH24MI')) * 24*60) as timeDiff
		FROM 
		(
			SELECT 
				ROW_NUMBER() OVER (ORDER BY TO_NUMBER(IW_NO) DESC) AS RNO
				, IW_NO
				, ACCT_ACT_STEP
				, MIN_OR
				, ACCT_CNT
				, ACCT_ACT_TIME
			FROM	T_IW_HIS
			WHERE	FACT_CODE = #factCode#
			AND DEl_YN = 'N'
			AND	 BRANCH_NO = #branchNo#
			AND	 ITEM_CODE = #itemCode#
			<isNotNull property="excessItemCode">
				<isNotEmpty prepend="AND" property="excessItemCode" >
					EXECES_ITEM_CODE = #excessItemCode#
				</isNotEmpty>
			</isNotNull>
			<isNotNull property="excessItemCode_2">
				<isNotEmpty prepend="AND" property="excessItemCode_2" >
					EXECES_ITEM_CODE2 = #excessItemCode_2#
				</isNotEmpty> 
			</isNotNull>
	<![CDATA[
			AND ACCT_ACT_TEST = '0'
			AND (ACCT_ACT_STEP = '1' OR ACCT_ACT_STEP = '9')
		)
		WHERE RNO = 1
	]]>
	</select>
	
	<!-- update set Alert_Count and Alert_Time to Alert Step -->
	<insert id="alertStepDAO.updateLastAlertStep" parameterClass="alertStepVO">
		UPDATE T_IW_HIS
		SET MIN_OR = #minOr#
			, ACCT_CNT = ACCT_CNT + 1
			, ACCT_ACT_TIME = TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI')
		WHERE IW_NO = #asId#
	</insert>
	
	<insert id="insertAlertFile" parameterClass="FileVO" >
		<![CDATA[
			INSERT INTO T_IW_HIS_FILE
			( ATCH_FILE_ID, FILE_SEQ_NO, FILE_SAVE_PATH, SAVE_FILE_NAME,
			  ORIGNL_FILE_NAME, FILE_EXTSN, FILE_SIZE)
			VALUES
			( #atchFileId#, #fileSn#, #fileStreCours#, #streFileNm#,
			  #orignlFileNm#, #fileExtsn#, #fileMg#)
		]]>
	</insert>
	
	<resultMap id="fileDetail" class="daewooInfo.cmmn.bean.FileVO">
		<result property="atchFileId" column="ATCH_FILE_ID" columnIndex="1"/>
		<result property="fileExtsn" column="FILE_EXTSN" columnIndex="5"/>
		<result property="fileSn" column="FILE_SEQ_NO" columnIndex="2"/>
		<result property="fileStreCours" column="FILE_SAVE_PATH" columnIndex="3"/>
		<result property="orignlFileNm" column="ORIGNL_FILE_NAME" columnIndex="6"/>
		<result property="streFileNm" column="SAVE_FILE_NAME" columnIndex="4"/>
	</resultMap>
	
	<select id="selectAlertFileInf" parameterClass="FileVO" resultMap="fileDetail" >
 		<![CDATA[
			SELECT 
				ATCH_FILE_ID, FILE_SEQ_NO, FILE_SAVE_PATH, SAVE_FILE_NAME,
				FILE_EXTSN, ORIGNL_FILE_NAME 
			FROM
				T_IW_HIS_FILE
			WHERE
				ATCH_FILE_ID = #atchFileId#
 		]]>
 	</select>
		
		
	<statement id="getSendWarningMsg" parameterClass="alertStepVO" resultClass="alertSendDataVO">
		SELECT
			TO_CHAR(TO_DATE(A.REG_DATE, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') as regDate,
			A.DEPT_INFO as part,
			A.RECV_NAME as receiveName,
			A.RECV_TEL_NO as receiveTel,
			DECODE(A.WARNING_KIND, 'S', 'SMS', 'A', 'ARS') as msgKind,
			A.MSG||' '||A.WARNING_MSG||' '||F.FACT_NAME||'-'||A.BRANCH_NO as msg
		FROM 
			T_WARNING_SEND_DATA A,
			T_FACT_INFO F
		WHERE
			A.WARNING_TYPE = 'WARNN'
			AND A.FACT_CODE = F.FACT_CODE
			AND A.FACT_CODE = #factCode#
			AND A.BRANCH_NO = #branchNo#
			AND A.ITEM_CODE = #itemCode#
			AND TO_DATE(A.REG_DATE,'YYYYMMDDHH24MI') BETWEEN TO_DATE(#alertStepTime#,'YYYY/MM/DD HH24:MI') AND TO_DATE(#alertStepTime#, 'YYYY/MM/DD HH24:MI')+(15/24/60)
	</statement>
	
	
	<statement id="getRecentAlertReg" resultClass="alertStepVO">
	SELECT
			IW_NO			 as asId
			, ADDR	as address
			,TO_CHAR(TO_DATE(ACCT_ACT_TIME, 'YYYYMMDDHH24MI'), 'YYYY.MM.DD HH24:MI')  as alertTime
			,ACCT_ACT_CONTENT alertContents
			,DECODE(ITEM_TYPE, 'TYPE1', '육안관찰' ,'현장측정') AS itemTypeName
			,(SELECT COMMON_CODE_NAME  FROM T_COMMON_CODE WHERE COMMON_CODE_CATEGORY = '35' AND COMMON_CODE=RECEIPT_TYPE AND ROWNUM =1 ) AS receiptType
		FROM 
		(
			SELECT
					ROW_NUMBER() OVER (ORDER BY TO_NUMBER(HIS.IW_NO) DESC) AS RNO
					, HIS.IW_NO
					, DECODE(HIS.FACT_CODE, '50A0001' , HIS.ADDR || ' ' || HIS.ADDR_DET,
								FI.FACT_NAME || '-' || FBI.BRANCH_NAME
					)AS ADDR
					, HIS.ACCT_ACT_TIME
					, HIS.ACCT_ACT_CONTENT
					, HIS.ITEM_TYPE
					, RECEIPT_TYPE
			FROM	T_IW_HIS HIS,
						T_FACT_INFO FI,
						T_FACT_BRANCH_INFO FBI
			WHERE
					HIS.ACCT_ACT_TIME BETWEEN TO_CHAR(SYSDATE-1/24/60, 'YYYYMMDDHH24MI') AND TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI')
					AND HIS.ITEM_TYPE IN ('TYPE1' , 'TYPE2')
					AND HIS.FACT_CODE= FI.FACT_CODE(+)
					AND HIS.FACT_CODE= FBI.FACT_CODE(+)
					AND HIS.BRANCH_NO = FBI.BRANCH_NO(+)
		   ORDER BY ACCT_ACT_TIME DESC
		)
		WHERE RNO = 1
	</statement>
	
	<statement id="getNewWarring" resultClass="alertStepVO" parameterClass="alertStepVO">
	    SELECT *
		  FROM
		       (SELECT ROW_NUMBER() OVER(PARTITION BY A.WP_CODE ORDER BY DECODE(WPS_STEP,'END',4,'ING',3,'STA',1,2) DESC) RNUM,
		              A.WP_CODE wpCode,
		              A.WP_CODE ,
		              B.WPS_STEP,
		              TO_CHAR(TO_DATE(B.WPS_STEP_DATE,'YYYYMMDD') ,'YYYY-MM-DD') alertTime,
		              DECODE(A.WP_KIND,'PA','유류유출','PB','물고기폐사','PC','화학물질','PD','기타') receiptType,
		              DECODE(a.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') riverDiv
		         FROM T_WATER_POLLUTION A,
		              T_WATER_POLLUTION_STEP B,
              		  T_WATER_POLLUTION_SMS C
		        WHERE A.WP_CODE = B.WP_CODE
		        	  AND A.WP_CODE = C.WP_CODE
		              AND A.DEL_YN = 'N'
		              AND B.DEL_YN = 'N'
		              AND C.RECV_ID = #memberId#
		       ) A
		 WHERE RNUM = 1
		       AND WPS_STEP IN ('RCV')
		       AND NOT EXISTS
		       (SELECT *
		         FROM T_WATER_POLLUTION_ALRIM_CHECK B
		        WHERE A.WP_CODE = B.WP_CODE
		          AND B.MEMBER_ID = #memberId#
		       ) 
		       AND ROWNUM = 1
	</statement>
	
	<update id="alertStepDAO.deleteAlertStep" parameterClass="alertStepVO">
		UPDATE T_IW_HIS_DET
			SET DEL_YN = 'Y' 
		WHERE IW_NO = #asId#
		  AND ACCT_ACT_STEP = #alertStep#
	</update>
	
	<select id="alertStepDAO.firstAlertStepSeq" parameterClass="alertStepVO" resultClass="java.lang.String">
		SELECT MAX(ACCT_ACT_STEP) ACCT_ACT_STEP 
		  FROM T_IW_HIS_DET A 
		 WHERE IW_NO =  #asId# 
		       AND DEL_YN = 'N'
			   AND ACCT_ACT_STEP IN (1,9)
	</select>    
</sqlMap>