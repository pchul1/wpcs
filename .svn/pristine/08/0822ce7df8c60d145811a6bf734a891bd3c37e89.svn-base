<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">
  
<sqlMap namespace="MemberManageDAO">

	<typeAlias  alias="egovMap"			type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="memberVO"		type="daewooInfo.common.login.bean.MemberVO"/>
	<typeAlias  alias="memberSearchVO"	type="daewooInfo.admin.member.bean.MemberSearchVO"/>
	<typeAlias  alias="userMenuAuthVO"	type="daewooInfo.admin.member.bean.UserMenuAuthVO"/>

	<select id="selectMemberList" parameterClass="memberSearchVO" resultClass="egovMap">
		<![CDATA[
				SELECT  * 
				FROM  (
					SELECT ROWNUM RNUM, ALL_LIST.*
						 FROM  (
								SELECT MEMBER_ID AS memberId,
								MEMBER_NAME AS memberName,
								ZIP AS zip,
								ADDR AS address,
								DET_ADDR AS detailAddress,
								MOBILE_NO AS mobileNo,
								GROUP_CODE AS groupId,
								(
								SELECT GROUP_NAME FROM T_GROUP_INFO WHERE GROUP_CODE=A.GROUP_CODE
								) AS groupName,
								FAX_NO AS faxNum,
								EMAIL AS email,
								TO_CHAR(REG_DATE, 'YYYY-MM-DD') AS regDate,
								MEMBER_STATE AS memberStatus,
								UNIQ_ID AS uniq_id,
								OFFICE_NO AS officeNo,
								OFFICE_NAME AS officeName,
								DEPT_NAME AS deptName,
								GRADE_NAME AS gradeName,
								DEPT_CODE AS deptNo,
								/* (
								CASE 
									WHEN LENGTH((SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE=(SELECT UPPER_DEPT_CODE FROM T_DEPT_INFO WHERE DEPT_CODE=A.DEPT_CODE AND ROWNUM=1))) > 0 THEN
										(SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE=(SELECT UPPER_DEPT_CODE FROM T_DEPT_INFO WHERE DEPT_CODE=A.DEPT_CODE AND ROWNUM=1))||' > '||(SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE=A.DEPT_CODE)
									ELSE
										(SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE=A.DEPT_CODE)
								END
								) AS deptNoName, */
								FN_GET_DEPT_NAME(DEPT_CODE) AS deptNoName,
								DO_CODE AS doCode,
								(
								SELECT DO_NAME FROM T_AREA B WHERE B.DO_CODE = A.DO_CODE AND ROWNUM=1
								) AS doCodeName,
								CTY_CODE AS ctyCode,
								(
								SELECT CTY_NAME FROM T_AREA B WHERE B.CTY_CODE = A.CTY_CODE AND ROWNUM=1
								) AS ctyCodeName,
								FACT_CODE AS factCode,
								(
								SELECT  FACT_FNAME FROM T_FACT_INFO B WHERE SYS_KIND='T' AND B.FACT_CODE = A.FACT_CODE AND ROWNUM=1
								) AS factCodeName,
								RIVER_ID AS riverId,
								(
								SELECT COMMON_CODE_NAME FROM T_COMMON_CODE B WHERE COMMON_CODE_CATEGORY='01' AND B.COMMON_CODE = A.RIVER_ID AND ROWNUM=1
								) AS riverIdName,
								PRIVACY_AGREE AS privacyAgree,
								DECODE(PRIVACY_AGREE, 'N', '비동의', '동의') AS privacyAgreeNm,
								TO_CHAR(PRIVACY_Dt, 'YYYY-MM-DD') AS privacyDt,
								SIGNATURE_FILE,
								MEMBER_MG_ID AS memberMgId,
								APPROVAL_FLAG AS approvalFlag,
      							DECODE(APPROVAL_FLAG,'S','승인요청','N','승인거부','승인') approvalFlagNm,
      							TO_CHAR(APPROVAL_DT, 'YYYY-MM-DD') AS approvalDt 
						  FROM T_MEMBER A
						  WHERE UNIQ_ID IS NOT NULL
							]]>
								<isEqual prepend="AND" property="searchCondition" compareValue="id">
									<![CDATA[ A.MEMBER_ID LIKE '%' || #searchKeyword# || '%']]>
								</isEqual>
								<isEqual prepend="AND" property="searchCondition" compareValue="name">
									<![CDATA[ A.MEMBER_NAME LIKE '%' || #searchKeyword# || '%']]>
								</isEqual>
								<isNotEqual property="searchAppFlag" compareValue="All">
									AND A.APPROVAL_FLAG = #searchAppFlag#
								 </isNotEqual>	
							<![CDATA[
							) ALL_LIST
							)
							WHERE  RNUM  > #firstIndex#
							AND  RNUM <= #firstIndex# + #recordCountPerPage#
							]]>
	</select>

	<select id="selectMemberListTotCnt" parameterClass="memberSearchVO" resultClass="int">
		<![CDATA[
			SELECT  COUNT(*) totcnt 
				FROM  T_MEMBER
			WHERE  UNIQ_ID IS NOT NULL
		]]>
			<isEqual prepend="AND" property="searchCondition" compareValue="id">
				<![CDATA[ MEMBER_ID LIKE '%' || #searchKeyword# || '%']]>
			</isEqual>
			<isEqual prepend="AND" property="searchCondition" compareValue="name">
				<![CDATA[ MEMBER_NAME LIKE '%' || #searchKeyword# || '%']]>
			</isEqual>
			<isNotEqual property="searchAppFlag" compareValue="All">
				AND APPROVAL_FLAG = #searchAppFlag#
			 </isNotEqual>	
	</select>

	<select id="selectMemberDetail" parameterClass="memberVO" resultClass="memberVO">
		<![CDATA[
			SELECT MEMBER_ID AS memberId,
					MEMBER_NAME AS memberName,
					ZIP AS zip,
					ADDR AS address,
					DET_ADDR AS detailAddress,
					MOBILE_NO AS mobileNo,
					GROUP_CODE AS groupId,
					( select GROUP_NAME from T_GROUP_INFO where GROUP_CODE=a.GROUP_CODE ) AS groupName,
       				(SELECT S.AUTHOR_CODE FROM   T_EMPLYRSCRTYESTBS S WHERE S.SCRTY_ESTBSTRGET_ID = UNIQ_ID) AS AUTHOR_CODE, 
					FAX_NO AS faxNum,
					EMAIL AS email,
					REG_DATE AS regDate,
					MEMBER_STATE AS memberStatus,
					UNIQ_ID AS uniq_id,
					OFFICE_NO AS officeNo,
					OFFICE_NAME AS officeName,
					GRADE_NAME AS gradeName,
					DEPT_CODE AS deptNo,
					(CASE 
						WHEN LENGTH((SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE=(SELECT UPPER_DEPT_CODE FROM T_DEPT_INFO WHERE DEPT_CODE=A.DEPT_CODE AND ROWNUM=1))) > 0 THEN
							(SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE=(SELECT UPPER_DEPT_CODE FROM T_DEPT_INFO WHERE DEPT_CODE=A.DEPT_CODE AND ROWNUM=1))||' > '||(SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE=A.DEPT_CODE)
						ELSE
							(SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE=A.DEPT_CODE)
					END) AS deptNoName,
					(select DECODE(UPPER_DEPT_CODE,0,DEPT_CODE,UPPER_DEPT_CODE) from T_DEPT_INFO where DEPT_CODE=a.DEPT_CODE) AS deptNoTmp,
					DO_CODE AS doCode,
					CTY_CODE AS ctyCode,
					FACT_CODE AS factCode,
					river_id AS riverId,
					PRIVACY_AGREE AS privacyAgree,
					PASSWORD_DT AS passwordDt,
					SIGNATURE_FILE,
					APPROVAL_FLAG AS approvalFlag,
					APPROVAL_DT AS approvalDt,
					TMS_YN AS tmsYn,
					TMS_DO_CODE AS tmsDoCode,
					TMS_CTY_CODE AS tmsCtyCode,
					BIGO
			FROM T_MEMBER a
			WHERE MEMBER_ID = #memberId#
	
		]]>
	</select>

	<select id="selectMemberPrivacy" parameterClass="memberVO" resultClass="memberVO">
			SELECT 
					PASSWORD AS password
					, PRIVACY_AGREE AS privacyAgree
					, PASSWORD_DT AS passwordDt
					, NVL(to_date(to_char(sysdate,'YYYYMMDD'),'YYYYMMDD') - ADD_MONTHS(to_date(to_char(PASSWORD_DT,'YYYYMMDD'),'YYYYMMDD'),3), 0) AS passwordChangeCnt
					, PWD_HISTORY1 AS pwdHistory1
					, PWD_HISTORY2 AS pwdHistory2
			FROM T_MEMBER
			WHERE MEMBER_ID = #memberId#
	
	</select>
	
	
	
	<insert id="insertMember" parameterClass="memberVO">
		INSERT INTO T_MEMBER (
			MEMBER_ID, 
			PASSWORD, 
			PASSWORD_HINT, 
			PASSWORD_REPLY, 
			MEMBER_NAME, 
			ZIP, 
			ADDR, 
			DET_ADDR, 
			MOBILE_NO, 
			GROUP_CODE, 
			FAX_NO, 
			EMAIL, 
			REG_DATE, 
			MEMBER_STATE, 
			UNIQ_ID, 
			OFFICE_NO, 
			OFFICE_NAME, 
			GRADE_NAME,
		  /* 
			RIVER_NAME, 
			SPOT_NAME, 
			AREA_NAME, 
		  */
			CONNECT_IP, 
			CONNECT_DATE, 
			DEPT_CODE, 
			DO_CODE, 
			CTY_CODE, 
			FACT_CODE ,
			RIVER_ID,
			PASSWORD_DT
			<isNotEmpty property="signature_file">
						,SIGNATURE_FILE
			</isNotEmpty>
			, APPROVAL_FLAG
			, APPROVAL_DT
			, TMS_YN
			, TMS_DO_CODE
			, TMS_CTY_CODE
			) 
		VALUES ( #memberId#,
		 #password#,
		 null,
		 null,
		 #memberName#,
		 null,
		 null,
		 null,
		 #mobileNo#,
		 null,
		 #faxNum#,
		 #email#,
		 sysdate,
		 null,
		 #uniqId#,
		 #officeNo#,
		 null,
		 #gradeName#,
		/*
		 null,
		 null,
		 null,
		*/
		 #connectIp#,
		 sysdate,
		 #deptNo#,
		 ( select do_code from t_area where cty_code=#ctyCode# and rownum=1 ),
		 #ctyCode#,
		 #factCode#,
		 #riverId# ,
		 SYSDATE
		<isNotEmpty property="signature_file">
					,#signature_file#
		</isNotEmpty>
		,#approvalFlag#
		,SYSDATE
		, #tmsYn#
		, #tmsDoCode#
		, #tmsCtyCode#
		 )
	</insert>

	<update id="changePassword" parameterClass="memberVO">
		UPDATE T_MEMBER
			SET	PASSWORD		= #password#,
			PASSWORD_DT			= sysdate
			WHERE  MEMBER_ID	  = #memberId#	
	</update>

	<update id="updateMember" parameterClass="memberVO">
		<![CDATA[
			UPDATE T_MEMBER
			SET	MEMBER_NAME	= #memberName#,
					ZIP			= #zip#,
					ADDR		= #address#,
					DET_ADDR	= #detailAddress#,
					MOBILE_NO	= #mobileNo#,
					GROUP_CODE	= #groupId#,
					FAX_NO		= #faxNum#,
					EMAIL		= #email#,
					MEMBER_STATE  = #memberStatus#,
					OFFICE_NO	= #officeNo#,
					OFFICE_NAME	= #officeName#,
					GRADE_NAME	= #gradeName#,
					DEPT_CODE	= #deptNo#,
					DO_CODE		= ( select DO_CODE from T_AREA where CTY_CODE =#ctyCode# and rownum=1 ),
					CTY_CODE	= #ctyCode#,
					FACT_CODE	= #factCode#,
					RIVER_ID	= #riverId#,
					TMS_YN = #tmsYn#,
					TMS_DO_CODE = #tmsDoCode#,
					TMS_CTY_CODE = #tmsCtyCode#
		]]>
		<isNotEmpty property="signature_file">
					,SIGNATURE_FILE = #signature_file#
		</isNotEmpty>
		<![CDATA[
			WHERE  MEMBER_ID	= #memberId# 
		]]>
	</update>

	<update id="updateInfo" parameterClass="memberVO">
		<![CDATA[
			UPDATE T_MEMBER
			SET  MOBILE_NO		= #mobileNo#,
					FAX_NO		= #faxNum#,
					OFFICE_NO	= #officeNo#,
					EMAIL		= #email#
		]]>
		<isNotEmpty property="signature_file">
					,SIGNATURE_FILE		= #signature_file#
		</isNotEmpty>
		<![CDATA[
			WHERE  MEMBER_ID	= #memberId# 
		]]>
	</update>
		
	<update id="updatePrivacy" parameterClass="memberVO">
		<![CDATA[
			UPDATE T_MEMBER
			SET  PRIVACY_AGREE	= 'Y',
					PRIVACY_DT	= sysdate
			WHERE  MEMBER_ID	= #memberId# 
		]]>
	</update>
		
	<delete id="deleteMember">
		<![CDATA[
			UPDATE  T_MEMBER 
			SET  MEMBER_STATE  = 'X',
					PASSWORD = 'DELETED', 
					PASSWORD_HINT = NULL, 
					PASSWORD_REPLY = NULL, 
					ZIP = NULL, 
					ADDR = NULL, 
					DET_ADDR = NULL, 
					MOBILE_NO = NULL, 
					FAX_NO = NULL, 
					EMAIL = NULL,
					OFFICE_NO = NULL, 
					OFFICE_NAME = NULL, 
					DEPT_NAME = NULL, 
					GRADE_NAME = NULL, 
					RIVER_NAME = NULL, 
					SPOT_NAME = NULL, 
					AREA_NAME = NULL, 
					CONNECT_IP = NULL, 
					BIGO = NULL, 
					PWD_HISTORY1 = NULL, 
					PWD_HISTORY2 = NULL 
			WHERE  MEMBER_ID = #memberId# 
		]]>
	</delete>

	<insert id="insertMemberHistory" parameterClass="memberVO">
		INSERT INTO T_MEMBER_HISTORY (
		   HSEQ,
		   HTYPE,
		   HDATE,
		   MEMBER_ID, 
		   PASSWORD, 
		   PASSWORD_HINT, 
		   PASSWORD_REPLY, 
		   MEMBER_NAME, 
		   ZIP, 
		   ADDR, 
		   DET_ADDR, 
		   MOBILE_NO, 
		   GROUP_CODE, 
		   FAX_NO, 
		   EMAIL, 
		   REG_DATE, 
		   MEMBER_STATE, 
		   UNIQ_ID, 
		   OFFICE_NO, 
		   OFFICE_NAME, 
		   GRADE_NAME,
		   
		   RIVER_NAME, 
		   SPOT_NAME, 
           AREA_NAME, 
           
		   CONNECT_IP, 
		   CONNECT_DATE, 
		   DEPT_CODE, 
		   DO_CODE, 
		   CTY_CODE, 
		   FACT_CODE,
		   RIVER_ID
		   ) 
		VALUES ( 
		 SEQ_MEMBER_HISTORY.NEXTVAL,
		 #htype#,
		 sysdate,
		 
		 #memberId#,
		 <isEqual property="htype" compareValue="W">
			#password#,	
		 </isEqual>
		 <isNotEqual property="htype" compareValue="W">
			(SELECT PASSWORD FROM T_MEMBER WHERE MEMBER_ID = #memberId#),	
		 </isNotEqual>		 
		 #passwordHint#,
		 #passwordReply#,
		 #memberName#,
		 #zip#,
		 #address#,
		 #detailAddress#,
		 #mobileNo#,
		 #groupId#,
		 replace(#faxNum#,'--',''),
		 #email#,
		 #regDate#,
		 #memberStatus#,
		 #uniqId#,
		 #officeNo#,
		 #officeName#,
		 #gradeName#,
		 
		 #riverName#,
		 #spotName#,
		 #areaName#,
		 
		 #connectIp#,
		 #connectDate#,
		 #deptNo#,
		 #doCode#,
		 #ctyCode#,
		 #factCode#,
		 #riverId#
		 )
	</insert>
	
	<select id="getDuplicateIdCheck" parameterClass="String" resultClass="int">
			SELECT COUNT(*)
			FROM T_MEMBER
			WHERE MEMBER_ID = #memberId#
	</select>
	
	<insert id="insertMemberApply" parameterClass="memberVO">
		INSERT INTO T_MEMBER (
			MEMBER_ID, 
			PASSWORD, 
			PASSWORD_HINT, 
			PASSWORD_REPLY, 
			MEMBER_NAME, 
			ZIP, 
			ADDR, 
			DET_ADDR, 
			MOBILE_NO, 
			GROUP_CODE, 
			FAX_NO, 
			EMAIL, 
			REG_DATE, 
			MEMBER_STATE, 
			UNIQ_ID, 
			OFFICE_NO, 
			OFFICE_NAME, 
			GRADE_NAME,
		  	CONNECT_IP, 
			CONNECT_DATE, 
			DEPT_CODE, 
			DO_CODE, 
			CTY_CODE, 
			FACT_CODE ,
			RIVER_ID,
			PASSWORD_DT,
			PRIVACY_AGREE,
			MEMBER_MG_ID,
			APPROVAL_FLAG,
			PRIVACY_DT,
			BIGO
			) 
		VALUES ( #memberId#,
		 #password#,
		 null,
		 null,
		 #memberName#,
		 null,
		 null,
		 null,
		 #mobileNo#,
		 null,
		 #faxNum#,
		 #email#,
		 sysdate,
		 null,
		 #uniqId#,
		 #officeNo#,
		 null,
		 #gradeName#,
		 #connectIp#,
		 sysdate,
		 #deptNo#,
		 ( select do_code from t_area where cty_code=#ctyCode# and rownum=1 ),
		 #ctyCode#,
		 #factCode#,
		 #riverId# ,
		 SYSDATE,
		 #privacyAgree#,
		 #memberMgId#,
		 #approvalFlag#,
		 SYSDATE,
		 #bigo#
		 )
	</insert>
	
	<update id="updateMemberMgId" parameterClass="String">
		<![CDATA[
			Merge INTO T_Member A USING
				(
				  SELECT
				    Member_Id ,
				    Member_Name ,
				    Eng_Abbr||Dept_Code||'_'||Rnum Member_Mg_Id
				  FROM
				    (
				      SELECT
				        M.Member_Id ,
				        M.Member_Name ,
				        M.Eng_Abbr ,
				        M.DEPT_CODE ,
				        (SELECT MAX(TO_NUMBER(SUBSTR(Member_Mg_Id, INSTR(Member_Mg_Id,'_')+1, LENGTH(Member_Mg_Id)))) FROM T_MEMBER WHERE DEPT_CODE=M.DEPT_CODE)+1 RNUM
				      FROM
				        (
				          SELECT
				            D1.Member_Id ,
				            D1.Member_Name ,
				            CASE
				              WHEN D1.Upper_Dept_Code = 7000
				              THEN TO_NUMBER(D1.Dept_Code
				                ||SUBSTR(D1.Cty_Code,3,3))
				              ELSE D1.DEPT_CODE
				            END DEPT_CODE ,
				            D1.Dept_Name ,
				            D1.Upper_Dept_Code ,
				            D1.Upper_Dept_Name ,
				            D2.Eng_Abbr ,
				            D1.CTY_CODE
				          FROM
				            (
				              SELECT
				                A.Member_Id ,
				                A.Member_Name ,
				                A.Dept_Code ,
				                B.Dept_Name ,
				                CASE
				                  WHEN B.Upper_Dept_Code =0
				                  THEN B.Dept_Code
				                  ELSE B.Upper_Dept_Code
				                END Upper_Dept_Code ,
				                CASE
				                  WHEN B.Upper_Dept_Code =0
				                  THEN B.Dept_Name
				                  ELSE C.Dept_Name
				                END Upper_Dept_Name ,
				                A.Do_Code ,
				                A.CTY_CODE
				              FROM
				                T_Member A
				              JOIN T_Dept_Info B
				              ON
				                (
				                  A.Dept_Code = B.Dept_Code
				                )
				              LEFT OUTER JOIN T_Dept_Info C
				              ON
				                (
				                  B.Upper_Dept_Code = C.Dept_Code
				                )
				              WHERE MEMBER_ID = #memberId#
				            )
				            D1
				          JOIN T_Upper_Dept_Info D2
				          ON
				            (
				              D1.Upper_Dept_Code = D2.Dept_Code
				            )
				        )
				        M
				    )
				)
				B ON
				(
				  A.Member_Id = B.Member_Id
				)
				WHEN Matched THEN
				  UPDATE
				  SET
				    MEMBER_MG_ID = B.MEMBER_MG_ID 
		]]>
	</update>
	
	<select id="selectMemberInfo" parameterClass="String" resultClass="memberVO">
		<![CDATA[
		  SELECT MEMBER_ID AS memberId,
		  			 MEMBER_NAME AS memberName,
					( select GROUP_NAME from T_GROUP_INFO where GROUP_CODE=a.GROUP_CODE ) AS groupName,
					FN_GET_DEPT_NAME(DEPT_CODE) AS deptNoName,
					FAX_NO AS faxNum,
		            OFFICE_NO AS officeNo,
		            MOBILE_NO AS mobileNo,
					EMAIL AS email,
					OFFICE_NAME AS officeName,
					GRADE_NAME AS gradeName,
					BIGO
			FROM T_MEMBER a
			WHERE MEMBER_ID = #memberId#
		]]>
	</select>
	
	<update id="updateMemberApp" parameterClass="memberVO">
		UPDATE T_MEMBER
			 SET	APPROVAL_FLAG = #approvalFlag#,
			        APPROVAL_DT	   = sysdate
	  	 WHERE  MEMBER_ID	       = #memberId#	
	</update>
	
	<update id="insertAuthorGroup" parameterClass="memberVO">
		MERGE INTO T_EMPLYRSCRTYESTBS
		USING DUAL
		ON ( SCRTY_ESTBSTRGET_ID  = #uniq_id# )
		WHEN MATCHED THEN
			UPDATE SET AUTHOR_CODE = 'ROLE_EXPERT'
		WHEN NOT MATCHED THEN
			INSERT (
					   SCRTY_ESTBSTRGET_ID 
					 , AUTHOR_CODE
					)
			VALUES (
					   #uniq_id#
					 , 'ROLE_EXPERT'
					)
	</update>
	
	
	<select id="getAccountFindId" parameterClass="memberVO" resultClass="String">
			SELECT MEMBER_ID as memberId
			FROM T_MEMBER
			WHERE DEPT_CODE = #deptNo#
			    AND MEMBER_NAME = #memberName#
			    AND EMAIL = #email#
	</select>
	
	<statement id="getTmsCityList" parameterClass="HashMap" resultClass="HashMap">
		SELECT RTRIM(CTY_NAME) AS CAPTION, CTY_CODE AS VALUE
		  FROM(SELECT AREA.CTY_CODE, CTY_NAME
					FROM WTMSC_FACT@TMS FACT,
					  WTMSC_AREA@TMS AREA
					WHERE FACT_USED   = 'Y'
					AND AREA.CTY_CODE = FACT.CTY_CODE
					AND AREA.DO_CODE = #tmsDoCode#
		)
		GROUP BY CTY_NAME, CTY_CODE
		ORDER BY CTY_NAME
	</statement>
	
	<statement id="getMemberAuthorFactList" parameterClass="HashMap" resultClass="HashMap" remapResults="true">
	    SELECT FACT_CODE_1, 
		       FACT_NAME_1, 
		       FACT_CODE_2, 
		       FACT_NAME_2, 
		       FACT_CODE_3, 
		       FACT_NAME_3 
		  FROM 
		       (SELECT LEVEL RNUM 
		         FROM DUAL CONNECT BY LEVEL &lt;= 
		              (SELECT MAX(CNT) 
		                FROM 
		                     (SELECT ROW_NUMBER() OVER(PARTITION BY sys_kind ORDER BY sys_kind) CNT 
		                       FROM T_MEMBER_AUTHORINFO A 
		                      WHERE A.MEMBER_ID = #member_id#
		                     ) 
		              )
		       ) A 
		   FULL OUTER JOIN 
		       (SELECT ROWNUM RNUM , 
		              A.FACT_CODE || '-' || A.BRANCH_NO FACT_CODE_1, 
		              (SELECT B.BRANCH_NAME || '-' || B.BRANCH_NO 
		                FROM T_FACT_BRANCH_INFO B 
		               WHERE B.FACT_CODE = A.FACT_CODE 
		                     AND B.BRANCH_NO = A.BRANCH_NO 
		              ) FACT_NAME_1 
		         FROM T_MEMBER_AUTHORINFO A 
		        WHERE A.SYS_KIND ='U' 
		              AND A.MEMBER_ID = #member_id#
		       ) B 
		       ON A.RNUM = B.RNUM 
		   FULL OUTER JOIN 
		       (SELECT ROWNUM RNUM, 
		              A.FACT_CODE || '-' || A.BRANCH_NO FACT_CODE_2, 
		              (SELECT MAX(B.BRANCH_NAME) 
		                FROM T_FACT_BRANCH_INFO B 
		               WHERE B.FACT_CODE = A.FACT_CODE 
		              ) FACT_NAME_2 
		         FROM T_MEMBER_AUTHORINFO A 
		        WHERE A.SYS_KIND ='A' 
		              AND A.MEMBER_ID = #member_id#
		       )C 
		       ON A.RNUM = C.RNUM 
		   FULL OUTER JOIN 
		       (SELECT ROWNUM RNUM, 
		              A.FACT_CODE || '-' || A.BRANCH_NO FACT_CODE_3 , 
		              (SELECT B.FACT_NAME 
		                FROM WTMSC_FACT@TMS B 
		               WHERE B.FACT_CODE = A.FACT_CODE 
		              ) FACT_NAME_3 
		         FROM T_MEMBER_AUTHORINFO A 
		        WHERE A.SYS_KIND ='W' 
		              AND A.MEMBER_ID = #member_id#
		       ) D 
		       ON A.RNUM = D.RNUM
		 ORDER BY A.RNUM
	</statement>
	
	<statement id="getAuthorFactList" parameterClass="HashMap" resultClass="HashMap" remapResults="true">
	    <isEqual property="auth_syskind" compareValue="W">
			SELECT FACT_CODE VALUE, 
			       FACT_NAME CAPTION 
			  FROM WTMSC_FACT@TMS FACT, 
			       WTMSC_AREA@TMS AREA 
			 WHERE FACT_USED = 'Y' 
			       AND AREA.CTY_CODE = FACT.CTY_CODE 
			       AND AREA.DO_CODE = #auth_riverdiv#
			ORDER BY VALUE
		</isEqual>
		<isNotEqual property="auth_syskind" compareValue="W">
		    SELECT CASE 
					 WHEN A.SYS_KIND = 'U' THEN B.BRANCH_NAME || '-' || B.BRANCH_NO
			         WHEN A.SYS_KIND = 'A' THEN B.BRANCH_NAME
			       END CAPTION,
			       CASE 
			         WHEN A.SYS_KIND = 'U' THEN B.FACT_CODE || '-' || B.BRANCH_NO
			         WHEN A.SYS_KIND = 'A' THEN B.FACT_CODE || '-' || B.BRANCH_NO
			       END VALUE  
			  FROM T_FACT_INFO A , 
			       T_FACT_BRANCH_INFO B 
			 WHERE A.FACT_CODE = B.FACT_CODE 
			       AND A.FACT_USE_FLAG = 'Y' 
			       AND B.BRANCH_USE_FLAG = 'Y' 
			       AND A.RIVER_DIV = #auth_riverdiv#
			       AND A.SYS_KIND = #auth_syskind#  
			ORDER BY 
			       CASE 
			         WHEN A.SYS_KIND = 'U' THEN A.FACT_CODE || B.BRANCH_NO
			         WHEN A.SYS_KIND = 'A' THEN B.BRANCH_NAME
			       END
		</isNotEqual>
	</statement>
	
	<update id="InsertMyAuthorFact" parameterClass="HashMap">
		MERGE INTO T_MEMBER_AUTHORINFO A USING 
		    (SELECT #member_id# MEMBER_ID,
                    #fact_code# FACT_CODE,
                    NVL(#branch_no#,1) BRANCH_NO,
                    CASE WHEN #sys_kind# = 'W' THEN (SELECT CTY_CODE FROM WTMSC_FACT@TMS WHERE FACT_CODE = #fact_code#)  END CTY_CODE,
                    CASE WHEN #sys_kind# != 'W' THEN (SELECT RIVER_DIV FROM T_FACT_INFO WHERE FACT_CODE = #fact_code#)  END RIVER_DIV,
                    #sys_kind# SYS_KIND
		      FROM DUAL 
		    ) B ON 
		    ( A.FACT_CODE = B.FACT_CODE 
		    AND A.BRANCH_NO = B.BRANCH_NO 
		    AND A.SYS_KIND = B.SYS_KIND
		    AND A.MEMBER_ID = B.MEMBER_ID) 
		WHEN NOT MATCHED THEN 
		   INSERT 
		          (
		              A.MEMBER_ID,
		              A.FACT_CODE,
		              A.BRANCH_NO,
		              A.RIVER_DIV,
		              A.CTY_CODE ,
		              A.SYS_KIND ,
		              A.REG_DT
		          ) 
		          VALUES 
		          ( 
		              B.MEMBER_ID,
		              B.FACT_CODE,
		              B.BRANCH_NO,
		              B.RIVER_DIV,
		              B.CTY_CODE ,
		              B.SYS_KIND ,
		              SYSDATE
		          )
	</update>
	
	<delete id="DeleteMyAuthorFact" parameterClass="HashMap">
		DELETE 
		  FROM T_MEMBER_AUTHORINFO A 
		 WHERE MEMBER_ID = #member_id#  
		       AND A.FACT_CODE = #fact_code# 
		 <isNotEmpty property="branch_no">
		       AND A.BRANCH_NO = #branch_no#
		 </isNotEmpty>
	</delete>
	
	
	
	<statement id="getUserMenuAuthList" parameterClass="memberVO" resultClass="userMenuAuthVO">
	SELECT 
	a.menu_id as menuId,
	a.menu_group1 as menuGroup1,
	a.menu_group2 as menuGroup2,
	a.menu_group3 as menuGroup3,
	a.menu_name as menuName,
    a.AUTH_C_USE AS authCUse,
    a.AUTH_U_USE AS authUUse,
    a.AUTH_D_USE AS authDUse,
	b.user_id as userId,
	b.auth_c as authC,
	b.auth_u as authU,
	b.auth_d as authD,
	b.etc as etc
	FROM T_USER_MENU a
	LEFT OUTER JOIN
	(SELECT user_id ,
	auth_c,
	auth_u,
	auth_d,
	etc ,
	menu_id
	FROM T_USER_MENU_AUTH
	WHERE user_id = #member_id#
	) b
	ON a.MENU_ID = b.MENU_ID
	ORDER BY a.MENU_ID,
	b.menu_id desc
	</statement>
	<select id="getUserMenuAuthCnt"  parameterClass="UserMenuAuthVO"  resultClass="int">
	SELECT COUNT(*)
	FROM T_USER_MENU_AUTH
    WHERE user_id =#userId#
    and menu_Id=#menuId#
     <isNotEmpty property="authC">
     	and auth_C = #authC#
     </isNotEmpty>
     <isNotEmpty property="authU">
     	and auth_U = #authU#
     </isNotEmpty>
     <isNotEmpty property="authD">
     	and auth_D = #authD#
     </isNotEmpty>
	</select>
	 <insert id="userMenuAuthSavei" parameterClass="UserMenuAuthVO">
	 	INSERT 
  		INTO T_USER_MENU_AUTH 
       ( 
           USER_ID,
           MENU_ID,
           AUTH_C,
           AUTH_U,
           AUTH_D,
           CREATE_DATE
       ) 
       VALUES 
       ( 
			#userId#, 
			#menuId#, 
			#authC#, 
			#authU#, 
			#authD#, 
			sysdate 
       ) 
	 </insert>
	 <update id="userMenuAuthSaveu" parameterClass="UserMenuAuthVO">
		 UPDATE T_USER_MENU_AUTH 
	       SET 
	       AUTH_C = #authC#, 
	       AUTH_U = #authU#, 
	       AUTH_D = #authD#, 
	       UPDATE_DATE = sysdate 
 		WHERE 1=1
 			AND USER_ID = #userId# 
	       	AND MENU_ID = #menuId#  
	 </update>
	 
	<update id="unlockDormancy" parameterClass="memberVO">
		UPDATE T_MEMBER 
			SET 
			CONNECT_DATE = SYSDATE 
		WHERE MEMBER_ID = #memberId#
	</update>
	
	<update id="unlockPassword" parameterClass="memberVO">
		UPDATE T_MEMBER 
			SET 
			WRONG_COUNT = 0 
		WHERE MEMBER_ID = #memberId#
	</update>
	
</sqlMap>