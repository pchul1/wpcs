package daewooInfo.common.login.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import daewooInfo.cmmn.bean.CmmnDetailCode;
import daewooInfo.cmmn.bean.DeptVO;
import daewooInfo.common.login.bean.LoginVO;
import daewooInfo.common.login.bean.MemberVO;
import daewooInfo.common.login.dao.LoginDAO;
import daewooInfo.common.login.service.LoginService;
import daewooInfo.common.util.fcc.NumberUtil;
import daewooInfo.common.util.fcc.StringUtil;
import daewooInfo.common.util.sim.FileScrty;
import egovframework.rte.fdl.cmmn.AbstractServiceImpl;
import egovframework.rte.fdl.idgnr.EgovIdGnrService;

//import egovframework.com.ems.service.EgovSndngMailRegistService;
//import egovframework.com.ems.service.SndngMailVO;

@Service("loginService")
public class LoginServiceImpl extends AbstractServiceImpl implements
        LoginService {

    @Resource(name="loginDAO")
    private LoginDAO loginDAO;
    
    @Resource(name = "memberIdGnrService")
    private EgovIdGnrService idgenService;
    
    
    /** EgovSndngMailRegistService */
	/*
    @Resource(name = "sndngMailRegistService")
    private EgovSndngMailRegistService sndngMailRegistService;
    */
    
    /**
     * 패스워드 일괄 적용을 위한 메소드
     */
    public void batchPasswordMd5() throws Exception {
		
    	List<LoginVO> list = loginDAO.batchPasswordMd5();
    	
    	log.debug("가져온 사이즈 : " + list.size());
    	
    	for (int i=0; i < list.size(); i++) {
    		LoginVO bean = list.get(i);
    		log.debug(bean.getId()+" : "+bean.getPasswordCnsr());
    		
    		// 암호화
    		String enpassword = FileScrty.encryptPassword(bean.getPasswordCnsr());
    		bean.setPassword(enpassword);
    		loginDAO.batchPasswordMd5Update(bean);
    		
    	}
		
	}
    
    /**
	 * 일반 로그인을 처리한다
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public LoginVO actionLogin(LoginVO vo) throws Exception {
    	
    	// 1. 입력한 비밀번호를 암호화한다.
    	String enpassword = FileScrty.encryptPassword(vo.getPassword());
    	vo.setPassword(enpassword);
    	
    	// 2. 아이디와 암호화된 비밀번호가 DB와 일치하는지 확인한다.
    	LoginVO loginVO = loginDAO.actionLogin(vo);
    	
    	// 3. 결과를 리턴한다.
    	if (loginVO != null && !loginVO.getId().equals("") && !loginVO.getPassword().equals("")) {
    		
    		// 접속한 아이피와 날짜(sysdate)를 업데이트 한다.
    		loginDAO.updateConnectInfo(vo);
    		
    		return loginVO;
    	} else {
    		loginVO = new LoginVO();
    	}
    	
    	return loginVO;
    }

    /**
	 * 인증서 정보를 저장한다.
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public void updateDn(LoginVO vo) throws Exception {
    	
    	// 1. 입력한 비밀번호를 암호화한다.
    	String enpassword = FileScrty.encryptPassword(vo.getPassword());
    	vo.setPassword(enpassword);
    	
    	// 2. 아이디와 암호화된 비밀번호로 인증서 정보를 업데이트 한다.
    	loginDAO.updateDn(vo);
    }
    
    /**
	 * 인증서 로그인을 처리한다
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public LoginVO actionCrtfctLogin(LoginVO vo) throws Exception {
    	
    	// 1. DN값으로 ID, PW를 조회한다.
    	LoginVO loginVO = loginDAO.actionCrtfctLogin(vo);
    	
    	// 3. 결과를 리턴한다.
    	if (loginVO != null && !loginVO.getId().equals("") && !loginVO.getPassword().equals("")) {
    		return loginVO;
    	} else {
    		loginVO = new LoginVO();
    	}
    	
    	return loginVO;
    }
    
    /**
	 * 아이디를 찾는다.
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public LoginVO searchId(LoginVO vo) throws Exception {

    	// 1. 이름, 이메일주소가 DB와 일치하는 사용자 ID를 조회한다.
    	LoginVO loginVO = loginDAO.searchId(vo);
    	
    	// 2. 결과를 리턴한다.
    	if (loginVO != null && !loginVO.getId().equals("")) {
    		return loginVO;
    	} else {
    		loginVO = new LoginVO();
    	}
    	
    	return loginVO;
    }
    
    /**
	 * 비밀번호를 찾는다.
	 * @param vo LoginVO
	 * @return boolean
	 * @exception Exception
	 */
    public boolean searchPassword(LoginVO vo) throws Exception {
    	
    	boolean result = false;
    	
    	// 1. 아이디, 이름, 이메일주소, 비밀번호 힌트, 비밀번호 정답이 DB와 일치하는 사용자 Password를 조회한다.
    	LoginVO loginVO = loginDAO.searchPassword(vo);
    	if (loginVO == null || loginVO.getPassword() == null || loginVO.getPassword().equals("")) {
    		return false;
    	}
    	
    	// 2. 임시 비밀번호를 생성한다.(영+영+숫+영+영+숫=6자리)
    	String newpassword = "";
    	for (int i = 1; i <= 6; i++) {
    		// 영자
    		if (i % 3 != 0) {
    			newpassword += StringUtil.getRandomStr('a', 'z');
    		// 숫자
    		} else {
    			newpassword += NumberUtil.getRandomNum(0, 9);
    		}
    	}
    	
    	// 3. 임시 비밀번호를 암호화하여 DB에 저장한다.
    	LoginVO pwVO = new LoginVO();
    	String enpassword = FileScrty.encryptPassword(newpassword);
    	pwVO.setId(vo.getId());
    	pwVO.setPassword(enpassword);
    	loginDAO.updatePassword(pwVO);
    	
    	// 4. 임시 비밀번호를 이메일 발송한다.(메일연동솔루션 활용)
    	/*
    	SndngMailVO sndngMailVO = new SndngMailVO();
    	sndngMailVO.setDsptchPerson("webmaster");
    	sndngMailVO.setRecptnPerson(vo.getEmail());
    	sndngMailVO.setSj("[MOPAS] 임시 비밀번호를 발송했습니다.");
    	sndngMailVO.setEmailCn("고객님의 임시 비밀번호는 " + newpassword + " 입니다.");
    	sndngMailVO.setAtchFileId("");
    	
    	result = sndngMailRegistService.insertSndngMail(sndngMailVO);
    	*/
    	return result;
    }
    
    /**
     * 시/군 정보를 가져온다.
     */
	public List<CmmnDetailCode> getAreaCtyCode(String doCode) throws Exception {
		return loginDAO.getAreaCtyCode(doCode);
	}
	
	public List<CmmnDetailCode> getAreaCtyCodeWhereDeptNo(String deptCode) throws Exception {
		return loginDAO.getAreaCtyCodeWhereDeptNo(deptCode);
	}

	public List<CmmnDetailCode> getGroupCode() throws Exception {
		return loginDAO.getGroupCode();
	}
	
    /**
     * 시/군 정보를 가져온다. (전체)
     */
	public List<CmmnDetailCode> getAreaCtyCodeAll() throws Exception {
		return loginDAO.getAreaCtyCodeAll();
	}

	/**
	 * 시/도 정보를 가져온다.
	 */
	public List<CmmnDetailCode> getAreaDoCode() throws Exception {
		return loginDAO.getAreaDoCode();
	}
	
	/**
	 * 수계정보를 가져온다.
	 */
	public List<CmmnDetailCode> getRiverIdCode() throws Exception {
		return loginDAO.getRiverIdCode();
	}
	
	/**
	 * 수계,공구 정보를 가져온다.
	 */
	public List<CmmnDetailCode> getFactInfoCode() throws Exception {
		return loginDAO.getFactInfoCode();
	}
	
	/**
	 * 관련 기관 정보를 가져온다.
	 */
	public List<CmmnDetailCode> getOrganCode() throws Exception {
		return loginDAO.getOrganCode();
	}
	
	/**
	 * 부서 정보를 가져온다.
	 */
	public List<DeptVO> getDeptCode(String upperDeptNo) throws Exception {
		return loginDAO.getDeptCode(upperDeptNo);
	}

	public MemberVO actionRegister(MemberVO bean) throws Exception {
		// uniq_id 부여
		String uniqId = idgenService.getNextStringId();
		bean.setUniqId(uniqId);
		
		// 패스워드 암호화
		String enpassword = FileScrty.encryptPassword(bean.getPassword());
		bean.setPassword(enpassword);
		
		loginDAO.actionRegister(bean);
		
		return bean;
	}

	/**
	 * 아이디 중복체크
	 */
	public int checkID(String checkID) throws Exception {
		return loginDAO.checkID(checkID);
	}

	
	
}
