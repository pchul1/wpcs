package daewooInfo.common.login.dao;

import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Repository;

import egovframework.rte.psl.dataaccess.EgovAbstractDAO;
import daewooInfo.cmmn.bean.CmmnDetailCode;
import daewooInfo.cmmn.bean.DeptVO;
import daewooInfo.common.login.bean.LoginVO;
import daewooInfo.common.login.bean.MemberVO;

/**
 * 일반 로그인, 인증서 로그인을 처리하는 DAO 클래스
 * @author 공통서비스 개발팀 박지욱
 * @since 2009.03.06
 * @version 1.0
 * @see
 *  
 * <pre>
 * << 개정이력(Modification Information) >>
 * 
 *   수정일      수정자          수정내용
 *  -------    --------    ---------------------------
 *  2009.03.06  박지욱          최초 생성 
 *  
 *  </pre>
 */
@Repository("loginDAO")
public class LoginDAO extends EgovAbstractDAO {
	
	/** log */
    protected static final Log log = LogFactory.getLog(LoginDAO.class);
    
    public List<LoginVO> batchPasswordMd5() throws Exception {
    	return list("loginDAO.batch_password_md5", null);
    }
    
    public void batchPasswordMd5Update(LoginVO bean) throws Exception {
    	update("loginDAO.batch_password_md5_update", bean);
    }
    
	/**
	 * 일반 로그인을 처리한다
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public LoginVO actionLogin(LoginVO vo) throws Exception {
    	return (LoginVO)selectByPk("loginDAO.actionLogin", vo);
    }
    
    public void updateConnectInfo(LoginVO vo) throws Exception {
    	update("loginDAO.updateConnectInfo", vo);
    }

    /**
	 * 인증서 정보를 저장한다.
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public void updateDn(LoginVO vo) throws Exception {
    	update("loginDAO.updateDn", vo);
    }
    
    /**
	 * 인증서 로그인을 처리한다
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public LoginVO actionCrtfctLogin(LoginVO vo) throws Exception {
    	return (LoginVO)selectByPk("loginDAO.actionCrtfctLogin", vo);
    }
    
    /**
	 * 아이디를 찾는다.
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public LoginVO searchId(LoginVO vo) throws Exception {
    	
    	return (LoginVO)selectByPk("loginDAO.searchId", vo);
    }
    
    /**
	 * 비밀번호를 찾는다.
	 * @param vo LoginVO
	 * @return LoginVO
	 * @exception Exception
	 */
    public LoginVO searchPassword(LoginVO vo) throws Exception {
    	
    	return (LoginVO)selectByPk("loginDAO.searchPassword", vo);
    }
    
    /**
	 * 변경된 비밀번호를 저장한다.
	 * @param vo LoginVO
	 * @exception Exception
	 */
    public void updatePassword(LoginVO vo) throws Exception {
    	update("loginDAO.updatePassword", vo);
    }
    
    /**
     * 시/도 정보를 가져온다.
     * @return
     * @throws Exception
     */
    public List<CmmnDetailCode> getAreaDoCode() throws Exception {
    	return list("loginDAO.getAreaDoCode", null);
    }
    
    /**
     * 시/군 정보를 가져온다.
     * @return
     * @throws Exception
     */
    public List<CmmnDetailCode> getAreaCtyCode(String doCode) throws Exception {
    	return list("loginDAO.getAreaCtyCode", doCode);
    }
    
    /**
     * 시/군 정보를 가져온다. (where dept_no) 
     * @param deptCode
     * @return
     * @throws Exception
     */
    public List<CmmnDetailCode> getAreaCtyCodeWhereDeptNo(String deptCode) throws Exception {
    	return list("loginDAO.getAreaCtyCodeWhereDeptNo", deptCode);
    }
    
    public List<CmmnDetailCode> getGroupCode() throws Exception {
    	return list("loginDAO.getGroupCode", null);
    }
    
    /**
     * 시/군 정보를 가져온다.
     * @return
     * @throws Exception
     */
    public List<CmmnDetailCode> getAreaCtyCodeAll() throws Exception {
    	return list("loginDAO.getAreaCtyCodeAll", null);
    }
    
    /**
     * 수계정보를 가져온다.
     * @return
     * @throws Exception
     */
    public List<CmmnDetailCode> getRiverIdCode() throws Exception {
    	return list("loginDAO.getRiverIdCode", null);
    }
    
    /**
     * 수계, 공구 정보를 가져온다.
     * @return
     * @throws Exception
     */
    public List<CmmnDetailCode> getFactInfoCode() throws Exception {
    	return list("loginDAO.getFactInfoCode", null);
    }
    
    /**
     * 관련 기관 코드를 가져온다.
     * @return
     * @throws Exception
     */
    public List<CmmnDetailCode> getOrganCode() throws Exception {
    	return list("loginDAO.getOrganCode", null);
    }
    
    /**
     * 부서정보를 가져온다.
     * @param upperDeptNo
     * @return
     * @throws Exception
     */
    public List<DeptVO> getDeptCode(String upperDeptNo) throws Exception {
    	return list("loginDAO.getDeptCode", upperDeptNo);
    }
    
    /**
     * ID 중복체크
     * @param checkID
     * @return
     * @throws Exception
     */
    public int checkID(String checkID) throws Exception {
    	return (Integer)selectByPk("loginDAO.checkID", checkID);
    }
    
    /**
     * 회원가입을 처리한다.
     * @param bean
     * @throws Exception
     */
    public void actionRegister(MemberVO bean) throws Exception {
    	insert("loginDAO.insertMember", bean);
    }
}
