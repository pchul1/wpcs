<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
	PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">
		
<sqlMap namespace="situationctlDAO">

	<typeAlias alias="taksuMainVO" type="daewooInfo.waterpolmnt.situationctl.bean.TaksuMainVO"/>
	<typeAlias alias="searchTaksuMainVO" type="daewooInfo.waterpolmnt.situationctl.bean.SearchTaksuMainVO"/>
	<typeAlias alias="taksuPopupVO" type="daewooInfo.waterpolmnt.situationctl.bean.TaksuPopupVO"/>
	<typeAlias alias="totalMntMainTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntMainTSVO"/>
	<typeAlias alias="searchTaksuPopupVO" type="daewooInfo.waterpolmnt.situationctl.bean.SearchTaksuPopupVO"/>
	<typeAlias alias="totalMntMainSearchTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntMainSearchTSVO"/>
	<typeAlias alias="taksuSumDataVO" type="daewooInfo.waterpolmnt.situationctl.bean.TaksuSumDataVO"/>
	<typeAlias alias="totalMntMainTopTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntMainTopTSVO"/>
	<typeAlias alias="searchTaksuSumDataVO" type="daewooInfo.waterpolmnt.situationctl.bean.SearchTaksuSumDataVO"/>
	<typeAlias alias="mainChartVO" type="daewooInfo.waterpolmnt.situationctl.bean.MainChartVO"/>
	<typeAlias alias="resultChartVO" type="daewooInfo.waterpolmnt.situationctl.bean.ResultChartVO"/>	
	<typeAlias alias="alertTLVO" type="daewooInfo.waterpolmnt.situationctl.bean.AlertTargetVO"/>
	<typeAlias alias="totalMntSummaryVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntSummaryVO"/>
	<typeAlias alias="totalMntMainDetailTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntMainDetailTSVO"/>
	<typeAlias alias="totalMntMainDetailSearchTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntMainDetailSearchTSVO"/>
	<typeAlias alias="totalMntNorecvTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntNorecvTSVO"/>
	<typeAlias alias="totalMntNorecvSearchTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntNorecvSearchTSVO"/>
	<typeAlias alias="watersysMntMainDetailTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.WatersysMntMainDetailTSVO"/>
	<typeAlias alias="watersysMntMainDetailSearchTSVO" type="daewooInfo.waterpolmnt.situationctl.bean.WatersysMntMainDetailSearchTSVO"/>
	<typeAlias alias="totalMntMainVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntMainVO"/>
	<typeAlias alias="totalMntMainSearchVO" type="daewooInfo.waterpolmnt.situationctl.bean.TotalMntMainSearchVO"/>
	<typeAlias alias="factLawVO" type="daewooInfo.waterpolmnt.situationctl.bean.FactLawVO"/>
	<typeAlias alias="algaCastDataVO" type="daewooInfo.waterpolmnt.waterinfo.bean.AlgaCastDataVO"/>
	<typeAlias alias="airVO" type="daewooInfo.waterpolmnt.waterinfo.bean.AirMntDataVO"/>
	<typeAlias alias="watersysMntCoordVO" type="daewooInfo.waterpolmnt.situationctl.bean.WatersysMntCoordVO"/>
	<typeAlias alias="factLocationVO" type="daewooInfo.waterpolmnt.situationctl.bean.FactLocationVO"/>
	<typeAlias alias="autoDataVO" type="daewooInfo.waterpolmnt.situationctl.bean.AutoDataVO"/>
	<typeAlias alias="seqInfoVO" type="daewooInfo.waterpolmnt.situationctl.bean.SeqInfoVO"/>
	<typeAlias alias="detailViewVO" type="daewooInfo.waterpolmnt.waterinfo.bean.DetailViewVO"/>	
	<typeAlias alias="boSearchVO" type="daewooInfo.waterpolmnt.waterinfo.bean.BoSearchVO"/>
	<typeAlias alias="damViewVO" type="daewooInfo.waterpolmnt.waterinfo.bean.DamViewVO"/>
	<typeAlias  alias="wareHouseSearchVO"			type="daewooInfo.warehouse.bean.WareHouseSearchVO"/>
	
	<statement id="getTotalMntMainTopTS" resultClass="totalMntMainTopTSVO">
	<![CDATA[
		SELECT RIVER_DIV,
				SYS_KIND,
				TO_CHAR(TO_DATE(MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
				SUM(NORMAL) NORMAL,
				SUM(INTEREST) INTEREST,
				SUM(CAUTION) CAUTION,
				SUM(ALERT) ALERT,
				SUM(OVER) OVER,
				SUM(NORECV) NORECV
		FROM (SELECT F1.FACT_CODE, D1.FACT_CODE,
						B1.BRANCH_NO,
						(SELECT CASE
								 WHEN SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3,
													 'YYYYMMDDHH24MI'),
											 12,
											 1) < 5 THEN
								SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3,
												 'YYYYMMDDHH24MI'),
										 1,
										 11) || '0'
								 ELSE
								SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3,
												 'YYYYMMDDHH24MI'),
										 1,
										 11) || '5'
								END NOW
						FROM DUAL) MIN_TIME,
						DECODE(D1.MIN_OR, '0', 1, 0) NORMAL,
						DECODE(D1.MIN_OR, '1', 1, 0) INTEREST,
						DECODE(D1.MIN_OR, '2', 1, 0) CAUTION,
						DECODE(D1.MIN_OR, '3', 1, 0) ALERT,
						DECODE(D1.MIN_OR, '4', 1, 0) OVER,
						DECODE(D1.FACT_CODE, NULL, 1, 0) NORECV,
						F1.RIVER_DIV,
						F1.SYS_KIND
				FROM T_FACT_INFO F1,
						T_FACT_BRANCH_INFO B1,
						(
						 SELECT FACT_CODE, BRANCH_NO,
								MAX(CASE
									WHEN START_ALARM_DATE IS NULL THEN
									MIN_OR
									WHEN ALARM_TYPE IN ('51', '52') THEN
									'1'
									WHEN ALARM_TYPE IN ('61', '62') THEN
									'2'
									WHEN ALARM_TYPE IN ('71', '72') THEN
									'3'
								 END) MIN_OR 
						FROM
							(SELECT FACT_CODE,
									 BRANCH_NO,
									 ITEM_CODE,
									 MAX(MIN_TIME) MIN_TIME,
									 SUBSTR(MAX(LPAD(MIN_TIME,12,0)||MIN_OR),13) MIN_OR
								FROM T_MIN_DATA D
								WHERE D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60*3, 'YYYYMMDDHH24MI')
								 AND EXISTS (SELECT '1'
												FROM T_FACT_MEASU_ITEM I
											 WHERE I.ITEM_USE_FLAG = 'Y'
												AND I.FACT_CODE = D.FACT_CODE
												AND I.BRANCH_NO = D.BRANCH_NO
												AND I.ITEM_CODE = D.ITEM_CODE)
								GROUP BY FACT_CODE, BRANCH_NO, ITEM_CODE) A, 
							ALARMHIST_TB B
						WHERE A.FACT_CODE = B.SITE_ID(+)
						AND A.MIN_TIME = SUBSTR(B.START_ALARM_DATE(+), 0, 12)
						AND A.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
						GROUP BY FACT_CODE, BRANCH_NO
						) D1
				 WHERE B1.FACT_CODE = D1.FACT_CODE(+)
					AND B1.FACT_CODE = F1.FACT_CODE
					AND B1.BRANCH_NO = D1.BRANCH_NO(+)
					AND B1.BRANCH_USE_FLAG = 'Y'
					AND F1.FACT_USE_FLAG = 'Y'
					AND F1.SYS_KIND IN ('U', 'A')) 
		 GROUP BY RIVER_DIV, SYS_KIND, MIN_TIME
		 union 
SELECT 'R' ||decode(area_gbn,'02','03','03','02',area_gbn) as RIVER_DIV, 'T' as SYS_KIND,
TO_CHAR(TO_DATE(min(MINTIME), 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
  SUM(DECODE(VALUE,'0',1,0)) AS NORMAL, 
                           SUM(DECODE(VALUE,'1',1,0)) INTEREST, 
		       SUM(DECODE(VALUE,'2',1,0)) CAUTION, 
		       SUM(DECODE(VALUE,'3',1,0)) ALERT, 
		       SUM(DECODE(VALUE,'4',1,0)) OVER, 
		       SUM(DECODE(VALUE,'M',1,0)) NORECV
FROM ( 
SELECT FACT_CODE, area_gbn
	   , WAST_NO as BRANCH_NO
	   , MIN_TIME  as MINTIME 
	   , CASE WHEN BLACK > 0 THEN 'M' ELSE CASE WHEN WHITE > 0 THEN '0' ELSE CASE WHEN RED > 0 THEN '3' ELSE CASE WHEN ORANGE > 0 THEN '2' ELSE CASE WHEN YELLOW > 0 THEN '1' ELSE CASE WHEN BLUE > 0 THEN '0' ELSE '0' END END END END END END VALUE       
	FROM (
	     SELECT FACT_CODE	           
	          , WAST_NO
                    , area_gbn
	          , MAX(MIN_TIME) AS MIN_TIME
	          , NVL(SUM(DECODE(MIN_OR, NULL, 1)), 0) AS BLACK
	          , NVL(SUM(CASE WHEN MIN_ST IN ('05', '15', '06', '16' ) THEN 1 END), 0) AS WHITE
	          , NVL(SUM(DECODE(MIN_OR, '3', 1)), 0) AS RED
	          , NVL(SUM(DECODE(MIN_OR, '2', 1)), 0) AS ORANGE
	          , NVL(SUM(DECODE(MIN_OR, '1', 1)), 0) AS YELLOW
	          , NVL(SUM(DECODE(MIN_OR, '0', 1)), 0) AS BLUE
	       FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO
	                 , MA.ITEM_CODE
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , MB.MIN_TIME
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , CASE WHEN MB.MIN_OR > '0' THEN  CASE WHEN MIN_ST IN ('00', '02' ) THEN MIN_OR ELSE '0' END ELSE MIN_OR END AS MIN_OR
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'PHY', MIN_VL) PHY
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'BOD', MIN_VL) BOD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'COD', MIN_VL) COD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'SUS', MIN_VL) SUS
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TOP', MIN_VL) TOP
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TON', MIN_VL) TON
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'FLW', MIN_VL) FLW
	                 , ma.area_gbn
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA 
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+)
	          )
	      GROUP BY FACT_CODE, fact_name, WAST_NO, STAND_TIME, area_gbn
	   )) group by area_gbn
	]]>	
	</statement>


	<statement id="getTotalMntMain" parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO">
	SELECT *
	FROM (
			SELECT D1.FACT_CODE,
					SUBSTR(D1.FACT_NAME, 3, 2) FACT_NAME,
					D3.BRANCH_NO,
					<isEqual property="sys" compareValue="A">
					D3.BRANCH_NAME BRANCH_NAME,
					</isEqual>
					<isNotEqual property="sys" compareValue="A">
					D3.BRANCH_NAME||'-'||D3.BRANCH_NO BRANCH_NAME,
					</isNotEqual>
					D1.RIVER_DIV,
					DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
					D1.SYS_KIND,
					(
					SELECT SYS_KIND_NAME 
						FROM T_SYS_KIND 
					 WHERE SYS_KIND = D1.SYS_KIND
					) SYS_KIND_NAME,
					D2.ITEM_CODE,
				 (SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = D2.ITEM_CODE) ITEM_NAME,
				 (SELECT /*+ INDEX_DESC(B IX_MIN_DATA_03) */ TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24:MI') MIN_TIME
					FROM T_MIN_DATA B
					WHERE B.FACT_CODE = D2.FACT_CODE
					 AND B.BRANCH_NO = D2.BRANCH_NO
					 AND B.ITEM_CODE = D2.ITEM_CODE
					 AND B.MIN_DCD = '0'
					 AND ROWNUM = 1 ) MIN_DATE,
				 (SELECT /*+ INDEX_DESC(B IX_MIN_DATA_03) */ TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'HH24:MI') MIN_TIME
					FROM T_MIN_DATA B
					WHERE B.FACT_CODE = D2.FACT_CODE
					 AND B.BRANCH_NO = D2.BRANCH_NO
					 AND B.ITEM_CODE = D2.ITEM_CODE
					 AND B.MIN_DCD = '0'
					 AND ROWNUM = 1 ) MIN_TIME,
				 (SELECT /*+ INDEX_DESC(B IX_MIN_DATA_03) */ MIN_TIME
					FROM T_MIN_DATA B
					WHERE B.FACT_CODE = D2.FACT_CODE
					 AND B.BRANCH_NO = D2.BRANCH_NO
					 AND B.ITEM_CODE = D2.ITEM_CODE
					 AND B.MIN_DCD = '0'
					 AND ROWNUM = 1 ) TIME,
				 (SELECT /*+ INDEX_DESC(B IX_MIN_DATA_03) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					FROM T_MIN_DATA B
					WHERE B.FACT_CODE = D2.FACT_CODE
					 AND B.BRANCH_NO = D2.BRANCH_NO
					 AND B.ITEM_CODE = D2.ITEM_CODE
					 AND B.MIN_DCD = '0'
					 AND ROWNUM = 1 ) MIN_VL,
				 (SELECT /*+ INDEX_DESC(B IX_MIN_DATA_03) */ NVL(MIN_OR, '0') MIN_OR
					FROM T_MIN_DATA B
					WHERE B.FACT_CODE = D2.FACT_CODE
					 AND B.BRANCH_NO = D2.BRANCH_NO
					 AND B.ITEM_CODE = D2.ITEM_CODE
					 AND B.MIN_DCD = '0'
					 AND ROWNUM = 1 ) MIN_OR,
					D3.LONGITUDE,
					D3.LATITUDE	
			FROM T_FACT_INFO D1,
					T_FACT_MEASU_ITEM D2,
					T_FACT_BRANCH_INFO D3
			 WHERE D1.FACT_USE_FLAG = 'Y'
				 AND D3.BRANCH_USE_FLAG = 'Y'
				 AND D1.FACT_CODE = D3.FACT_CODE
				 AND D2.FACT_CODE = D3.FACT_CODE
				 AND D2.BRANCH_NO = D3.BRANCH_NO
				 <isNotEqual prepend="AND" property="river_div" compareValue="all">
					D1.RIVER_DIV = #river_div#
				 </isNotEqual>
				 <isNotEqual prepend="AND" property="sys" compareValue="all">
					D1.SYS_KIND = #sys#
				 </isNotEqual>
				 <isNotEqual prepend="AND" property="item" compareValue="all">
					D2.ITEM_CODE = #item#||'00'
				 </isNotEqual>
			 ) 
			 WHERE MIN_TIME BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            <!-- OR MIN_TIME2 BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS') -->
			 ORDER BY FACT_NAME, BRANCH_NO
	</statement>
	
	<statement id="getTotalMntMainR01" parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO" remapResults="true">
		SELECT
				FACT_CODE,
				(	
				SELECT DISTINCT REG_NAME FROM T_WEATHER_AREA
				 WHERE FACT_CODE = F1.FACT_CODE
					<isEqual property="sys" compareValue="U">
						AND BRANCH_NO = F1.BRANCH_NO
					</isEqual>
				) AS FACT_NAME,
				BRANCH_NO,
				BRANCH_NAME,
				DECODE(F1.MIN_TIME2, NULL, 
						NVL(decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))),0),
						NVL(decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))),0)
				) AS MIN_DATE,
				DECODE(F1.MIN_TIME2, NULL,
						NVL(TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'MM/DD HH24:MI'),0),
						NVL(TO_CHAR(TO_DATE(MIN_TIME2,'YYYYMMDDHH24MISS'),'MM/DD HH24:MI'),0)
				) AS MIN_TIME,
				ITEM_CODE,
				ITEM_NAME,
				DECODE(F1.MIN_TIME2, NULL,
						MIN_OR,
						MIN_OR2
				) AS MIN_OR,
				<!-- <isNotEqual property="item" compareValue="CON00">
				DECODE(F1.MIN_TIME2, NULL,
						MIN_VL,
						MIN_VL2
				) AS MIN_VL, 
				</isNotEqual>
				<isEqual property="item" compareValue="CON00">
				DECODE(F1.MIN_TIME2, NULL,
						MIN_VL,
						MIN_VL2
				) AS MIN_VL, 
				</isEqual> -->
				DECODE(F1.MIN_TIME2, NULL,
						MIN_VL,
						MIN_VL2
				) AS MIN_VL, 
				RIVER_DIV, SYS_KIND, SYS_KIND_NAME
				<isNotEqual prepend="," property="sys" compareValue="T"> 
				(
				SELECT DISTINCT REG_NAME FROM T_WEATHER_AREA
				 WHERE FACT_CODE = F1.FACT_CODE
					<isEqual property="sys" compareValue="U">
						AND BRANCH_NO = F1.BRANCH_NO
					</isEqual>
				) REG_NAME
				</isNotEqual>
		FROM
			(SELECT A.FACT_CODE, NVL(FACT_NO, '-') FACT_NAME,
					C.BRANCH_NO, 
					<isEqual property="sys" compareValue="A">
					C.BRANCH_NAME BRANCH_NAME,
					</isEqual>
					<isNotEqual property="sys" compareValue="A">
					C.BRANCH_NAME||'-'||C.BRANCH_NO BRANCH_NAME,
					</isNotEqual>
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ MIN_TIME
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_TIME,
					B.ITEM_CODE,
					(SELECT ITEM_NAME FROM T_ITEM_INFO
					WHERE ITEM_CODE = B.ITEM_CODE) ITEM_NAME,
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ NVL(MIN_OR, '0')
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_OR,
					<!-- 
					<isNotEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL
					</isEqual>
					 -->
					
					<isNotEqual property="sys" compareValue="U">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="sys" compareValue="U">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = #item# ), '0')) AS MIN_VL
					</isEqual>
					
					
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_VL,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL, 
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ 
							MIN_TIME
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					<!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1)
					) MIN_TIME2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', '0', 
					
					
					<!-- 
					<isNotEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL
					</isEqual>
					 -->
					<isNotEqual property="sys" compareValue="U">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="sys" compareValue="U">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = #item# ), '0')) AS MIN_VL
					</isEqual>					
					
					
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					<!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1)
					) MIN_VL2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL,
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ MIN_OR
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					<!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1)
					 ) MIN_OR2, 
					A.RIVER_DIV, 
					A.SYS_KIND,
					(SELECT SYS_KIND_NAME FROM T_SYS_KIND WHERE SYS_KIND = A.SYS_KIND) SYS_KIND_NAME
			FROM 
				T_FACT_INFO A,
				T_ITEM_INFO B,
				T_FACT_BRANCH_INFO C
			WHERE 
				A.FACT_USE_FLAG = 'Y'
				AND C.BRANCH_USE_FLAG = 'Y'
				AND A.FACT_CODE = C.FACT_CODE
				AND A.RIVER_DIV = 'R01'
				<isNotEqual prepend="AND" property="sys" compareValue="all">
					A.SYS_KIND = #sys#
				</isNotEqual>
				<isNotEqual prepend="AND" property="item" compareValue="all">
					B.ITEM_CODE = #item#
				</isNotEqual>
			) F1
		WHERE MIN_TIME BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            OR MIN_TIME2 BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		ORDER BY FACT_NAME, BRANCH_NO
	</statement>
	
	<statement id="getTotalMntMainR01TMS" parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO" remapResults="true">
		 <![CDATA[
		 SELECT * FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO AS BRANCH_NO
                           , MA.WAST_NO AS BRANCH_NAME
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD HH24:MI') AS MIN_DATE
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'MM/DD HH24:MI') AS MIN_TIME
	                 , MA.ITEM_CODE
                           , MA.ITEM_NAME                            
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , CASE WHEN MB.MIN_OR > '0' THEN  CASE WHEN MIN_ST IN ('00', '02' ) THEN MIN_OR ELSE '0' END ELSE MIN_OR END AS MIN_OR
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
                           , MA.AREA_GBN	                 
	                 , 'R'||DECODE(ma.area_gbn,'02','03','03','02',MA.AREA_GBN) AS RIVER_DIV
                           , 'T' AS SYS_KIND
                           , '수질TMS' AS SYS_KIND_NAME
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
                           , B.ITEM_NAME
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD	                 
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C	                 
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE	               
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+)) WHERE RIVER_DIV = 'R01' AND ITEM_CODE = #item# 
		 ]]>
	</statement>
	
	<statement id="getTotalMntMainR02TMS" parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO" remapResults="true">
		 <![CDATA[
		 SELECT * FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO AS BRANCH_NO
                           , MA.WAST_NO AS BRANCH_NAME
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD HH24:MI') AS MIN_DATE
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'MM/DD HH24:MI') AS MIN_TIME
	                 , MA.ITEM_CODE
                           , MA.ITEM_NAME                            
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , CASE WHEN MB.MIN_OR > '0' THEN  CASE WHEN MIN_ST IN ('00', '02' ) THEN MIN_OR ELSE '0' END ELSE MIN_OR END AS MIN_OR
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
                           , MA.AREA_GBN	                 
	                 , 'R'||DECODE(ma.area_gbn,'02','03','03','02',MA.AREA_GBN) AS RIVER_DIV
                           , 'T' AS SYS_KIND
                           , '수질TMS' AS SYS_KIND_NAME
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
                           , B.ITEM_NAME
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD	                 
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C	                 
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE	               
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+)) WHERE RIVER_DIV = 'R02' AND ITEM_CODE = #item# 
		 ]]>
	</statement>
	
	<statement id="getTotalMntMainR03TMS" parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO" remapResults="true">
		 <![CDATA[
		 SELECT * FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO AS BRANCH_NO
                           , MA.WAST_NO AS BRANCH_NAME
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD HH24:MI') AS MIN_DATE
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'MM/DD HH24:MI') AS MIN_TIME
	                 , MA.ITEM_CODE
                           , MA.ITEM_NAME                            
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , CASE WHEN MB.MIN_OR > '0' THEN  CASE WHEN MIN_ST IN ('00', '02' ) THEN MIN_OR ELSE '0' END ELSE MIN_OR END AS MIN_OR
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
                           , MA.AREA_GBN	                 
	                 , 'R'||DECODE(ma.area_gbn,'02','03','03','02',MA.AREA_GBN) AS RIVER_DIV
                           , 'T' AS SYS_KIND
                           , '수질TMS' AS SYS_KIND_NAME
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
                           , B.ITEM_NAME
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD	                 
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C	                 
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE	               
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+)) WHERE RIVER_DIV = 'R03' AND ITEM_CODE = #item# 
		 ]]>
	</statement>
	
	<statement id="getTotalMntMainR04TMS" parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO" remapResults="true">
		 <![CDATA[
		 SELECT * FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO AS BRANCH_NO
                           , MA.WAST_NO AS BRANCH_NAME
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD HH24:MI') AS MIN_DATE
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'MM/DD HH24:MI') AS MIN_TIME
	                 , MA.ITEM_CODE
                           , MA.ITEM_NAME                            
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , CASE WHEN MB.MIN_OR > '0' THEN  CASE WHEN MIN_ST IN ('00', '02' ) THEN MIN_OR ELSE '0' END ELSE MIN_OR END AS MIN_OR
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
                           , MA.AREA_GBN	                 
	                 , 'R'||DECODE(ma.area_gbn,'02','03','03','02',MA.AREA_GBN) AS RIVER_DIV
                           , 'T' AS SYS_KIND
                           , '수질TMS' AS SYS_KIND_NAME
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
                           , B.ITEM_NAME
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD	                 
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C	                 
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE	               
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+)) WHERE RIVER_DIV = 'R04' AND ITEM_CODE = #item# 
		 ]]>
	</statement>

	<statement id="getTotalMntMainR03" parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO" remapResults="true">
		SELECT
				FACT_CODE,
				(
				SELECT REG_NAME FROM T_WEATHER_AREA
				 WHERE FACT_CODE = F1.FACT_CODE
					<isEqual property="sys" compareValue="U">
						AND BRANCH_NO = F1.BRANCH_NO
					</isEqual>
				) AS FACT_NAME, 
				BRANCH_NO, 
				BRANCH_NAME,
				DECODE(F1.MIN_TIME2, NULL, 
						NVL(TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24:MI'),0),
						NVL(TO_CHAR(TO_DATE(MIN_TIME2,'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24:MI'),0)
				) AS MIN_DATE,
				DECODE(F1.MIN_TIME2, NULL,
						NVL(TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'MM/DD HH24:MI'),0),
						NVL(TO_CHAR(TO_DATE(MIN_TIME2,'YYYYMMDDHH24MISS'),'MM/DD HH24:MI'),0)
				) AS MIN_TIME,
				ITEM_CODE, 
				ITEM_NAME, 
				DECODE(F1.MIN_TIME2, NULL, 
						MIN_OR,
						MIN_OR2
				) AS MIN_OR,
				<!-- <isNotEqual property="item" compareValue="CON00">
				DECODE(F1.MIN_TIME2, NULL,
						TO_CHAR(MIN_VL, 'FM999,990.00'),
						TO_CHAR(MIN_VL2, 'FM999,990.00')
				) AS MIN_VL, 
				</isNotEqual>
				<isEqual property="item" compareValue="CON00">
				DECODE(F1.MIN_TIME2, NULL,
						TO_CHAR(MIN_VL, 'FM999,990.000'),
						TO_CHAR(MIN_VL2, 'FM999,990.000')
				) AS MIN_VL, 
				</isEqual> -->
				DECODE(F1.MIN_TIME2, NULL,
						MIN_VL,
						MIN_VL2
				) AS MIN_VL,
				RIVER_DIV, SYS_KIND, SYS_KIND_NAME
				<isNotEqual prepend="," property="sys" compareValue="T"> 
				(
				SELECT REG_NAME FROM T_WEATHER_AREA
				 WHERE FACT_CODE = F1.FACT_CODE
					<isEqual property="sys" compareValue="U">
						AND BRANCH_NO = F1.BRANCH_NO
					</isEqual>
				) REG_NAME
				</isNotEqual>
		FROM
			(SELECT A.FACT_CODE, NVL(FACT_NO, '-') FACT_NAME,
					C.BRANCH_NO, 
					<isEqual property="sys" compareValue="A">
					C.BRANCH_NAME BRANCH_NAME,
					</isEqual>
					<isNotEqual property="sys" compareValue="A">
					C.BRANCH_NAME||'-'||C.BRANCH_NO BRANCH_NAME,
					</isNotEqual>
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ MIN_TIME
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_TIME,
					B.ITEM_CODE,
					(SELECT ITEM_NAME FROM T_ITEM_INFO
					WHERE ITEM_CODE = B.ITEM_CODE) ITEM_NAME,
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ NVL(MIN_OR, '0')
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_OR,
					<isNotEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL
					</isEqual>
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_VL,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL, 
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ 
							MIN_TIME
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					<!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1)
					) MIN_TIME2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', '0', 
					<isNotEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL
					</isEqual>
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					<!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1)
					) MIN_VL2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL,	
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ MIN_OR
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					<!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1)
					 ) MIN_OR2, 
					A.RIVER_DIV, 
					A.SYS_KIND,
					(SELECT SYS_KIND_NAME FROM T_SYS_KIND WHERE SYS_KIND = A.SYS_KIND) SYS_KIND_NAME
			FROM 
				T_FACT_INFO A,
				T_ITEM_INFO B,
				T_FACT_BRANCH_INFO C
			WHERE 
				A.FACT_USE_FLAG = 'Y'
				AND C.BRANCH_USE_FLAG = 'Y'
				AND A.FACT_CODE = C.FACT_CODE
				AND A.RIVER_DIV = 'R03'
				<isNotEqual prepend="AND" property="sys" compareValue="all">
					A.SYS_KIND = #sys#
				</isNotEqual>
				<isNotEqual prepend="AND" property="item" compareValue="all">
					B.ITEM_CODE = #item#
				</isNotEqual>
			) F1
		WHERE MIN_TIME BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            OR MIN_TIME2 BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		ORDER BY FACT_NAME, BRANCH_NO
	</statement>

	<statement id="getTotalMntMainR02" parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO" remapResults="true">
		SELECT
				FACT_CODE,
				(
				SELECT REG_NAME FROM T_WEATHER_AREA
				 WHERE FACT_CODE = F1.FACT_CODE
					<isEqual property="sys" compareValue="U">
						AND BRANCH_NO = F1.BRANCH_NO
					</isEqual>
				) AS FACT_NAME, 
				BRANCH_NO, 
				BRANCH_NAME,
				DECODE(F1.MIN_TIME2, NULL, 
						NVL(TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24:MI'),0),
						NVL(TO_CHAR(TO_DATE(MIN_TIME2,'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24:MI'),0)
				) AS MIN_DATE,
				DECODE(F1.MIN_TIME2, NULL,
						NVL(TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'MM/DD HH24:MI'),0),
						NVL(TO_CHAR(TO_DATE(MIN_TIME2,'YYYYMMDDHH24MISS'),'MM/DD HH24:MI'),0)
				) AS MIN_TIME,
				ITEM_CODE, 
				ITEM_NAME, 
				DECODE(F1.MIN_TIME2, NULL, 
						MIN_OR,
						MIN_OR2
				) AS MIN_OR,
				<!-- <isNotEqual property="item" compareValue="CON00">
				DECODE(F1.MIN_TIME2, NULL,
						TO_CHAR(MIN_VL, 'FM999,990.00'),
						TO_CHAR(MIN_VL2, 'FM999,990.00')
				) AS MIN_VL, 
				</isNotEqual>
				<isEqual property="item" compareValue="CON00">
				DECODE(F1.MIN_TIME2, NULL,
						TO_CHAR(MIN_VL, 'FM999,990.000'),
						TO_CHAR(MIN_VL2, 'FM999,990.000')
				) AS MIN_VL, 
				</isEqual> -->
				DECODE(F1.MIN_TIME2, NULL,
						MIN_VL,
						MIN_VL2
				) AS MIN_VL,
				RIVER_DIV, SYS_KIND, SYS_KIND_NAME
				<isNotEqual prepend="," property="sys" compareValue="T"> 
				(
				SELECT REG_NAME FROM T_WEATHER_AREA
				 WHERE FACT_CODE = F1.FACT_CODE
					<isEqual property="sys" compareValue="U">
						AND BRANCH_NO = F1.BRANCH_NO
					</isEqual>
				) REG_NAME
				</isNotEqual>
		FROM	
			(SELECT A.FACT_CODE, NVL(FACT_NO, '-') FACT_NAME,
					C.BRANCH_NO, 
					<isEqual property="sys" compareValue="A">
					C.BRANCH_NAME BRANCH_NAME,
					</isEqual>
					<isNotEqual property="sys" compareValue="A">
					C.BRANCH_NAME||'-'||C.BRANCH_NO BRANCH_NAME,
					</isNotEqual>
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ MIN_TIME
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_TIME,
					B.ITEM_CODE,
					(SELECT ITEM_NAME FROM T_ITEM_INFO
					WHERE ITEM_CODE = B.ITEM_CODE) ITEM_NAME,
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ NVL(MIN_OR, '0')
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_OR,
					<isNotEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL
					</isEqual>
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_VL,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL, 
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ 
							MIN_TIME
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					AND A1.BRANCH_NO = C.BRANCH_NO
					<!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
					AND A1.ITEM_CODE = #item#
					AND A1.MIN_DCD = '0'
					AND ROWNUM = 1)
					) MIN_TIME2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', '0', 
					<isNotEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL
					</isEqual>
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					  AND A1.BRANCH_NO = C.BRANCH_NO
					  <!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
						AND A1.ITEM_CODE = #item#
					  AND A1.MIN_DCD = '0'
					  AND ROWNUM = 1)
					) MIN_VL2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL,
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ MIN_OR
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					  AND A1.BRANCH_NO = C.BRANCH_NO
					  <!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
						AND A1.ITEM_CODE = #item#
					  AND A1.MIN_DCD = '0'
					  AND ROWNUM = 1)
					 ) MIN_OR2, 
					A.RIVER_DIV, 
					A.SYS_KIND,
					(SELECT SYS_KIND_NAME FROM T_SYS_KIND WHERE SYS_KIND = A.SYS_KIND) SYS_KIND_NAME
			FROM 
				  T_FACT_INFO A,
				  T_ITEM_INFO B,
				  T_FACT_BRANCH_INFO C
			WHERE 
				A.FACT_USE_FLAG = 'Y'
				AND C.BRANCH_USE_FLAG = 'Y'
				AND A.FACT_CODE = C.FACT_CODE
				AND A.RIVER_DIV = 'R02'
				<isNotEqual prepend="AND" property="sys" compareValue="all">
					A.SYS_KIND = #sys#
				</isNotEqual>
				<isNotEqual prepend="AND" property="item" compareValue="all">
					B.ITEM_CODE = #item#
				</isNotEqual>
			) F1
		WHERE 
			MIN_TIME BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            OR MIN_TIME2 BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		ORDER BY FACT_NAME, BRANCH_NO
	</statement>

	<statement id="getTotalMntMainR04"  parameterClass="totalMntMainSearchVO" resultClass="totalMntMainVO" remapResults="true">
		SELECT  
				FACT_CODE,
				(
				SELECT REG_NAME FROM T_WEATHER_AREA
				 WHERE FACT_CODE = F1.FACT_CODE
					<isEqual property="sys" compareValue="U">
						AND BRANCH_NO = F1.BRANCH_NO
					</isEqual>
				) AS FACT_NAME,
				BRANCH_NO, 
				BRANCH_NAME,
				DECODE(F1.MIN_TIME2, NULL, 
						NVL(TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24:MI'),0),
						NVL(TO_CHAR(TO_DATE(MIN_TIME2,'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24:MI'),0)
				) AS MIN_DATE,
				DECODE(F1.MIN_TIME2, NULL,
						NVL(TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'MM/DD HH24:MI'),0),
						NVL(TO_CHAR(TO_DATE(MIN_TIME2,'YYYYMMDDHH24MISS'),'MM/DD HH24:MI'),0)
				) AS MIN_TIME,
				ITEM_CODE, 
				ITEM_NAME, 
				DECODE(F1.MIN_TIME2, NULL,
						MIN_OR,
						MIN_OR2
				) AS MIN_OR,
				<!-- <isNotEqual property="item" compareValue="CON00">
				DECODE(F1.MIN_TIME2, NULL,
						TO_CHAR(MIN_VL, 'FM999,990.00'),
						TO_CHAR(MIN_VL2, 'FM999,990.00')
				) AS MIN_VL, 
				</isNotEqual>
				<isEqual property="item" compareValue="CON00">
				DECODE(F1.MIN_TIME2, NULL,
						TO_CHAR(MIN_VL, 'FM999,990.000'),
						TO_CHAR(MIN_VL2, 'FM999,990.000')
				) AS MIN_VL, 
				</isEqual> -->
				DECODE(F1.MIN_TIME2, NULL,
						MIN_VL,
						MIN_VL2
				) AS MIN_VL,
				RIVER_DIV, SYS_KIND, SYS_KIND_NAME
				<isNotEqual prepend="," property="sys" compareValue="T"> 
				(
				SELECT REG_NAME FROM T_WEATHER_AREA
				 WHERE FACT_CODE = F1.FACT_CODE
					<isEqual property="sys" compareValue="U">
						AND BRANCH_NO = F1.BRANCH_NO
					</isEqual>
				) REG_NAME
				</isNotEqual>
		FROM	
			(SELECT A.FACT_CODE, NVL(FACT_NO, '-') FACT_NAME,
					C.BRANCH_NO, 
					<isEqual property="sys" compareValue="A">
					C.BRANCH_NAME BRANCH_NAME,
					</isEqual>
					<isNotEqual property="sys" compareValue="A">
					C.BRANCH_NAME||'-'||C.BRANCH_NO BRANCH_NAME,
					</isNotEqual>
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ MIN_TIME
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					  AND A1.BRANCH_NO = C.BRANCH_NO
					  AND A1.ITEM_CODE = #item#
					  AND A1.MIN_DCD = '0'
					  AND ROWNUM = 1) MIN_TIME,
					B.ITEM_CODE,
					(SELECT ITEM_NAME FROM T_ITEM_INFO
					WHERE ITEM_CODE = B.ITEM_CODE) ITEM_NAME,
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ NVL(MIN_OR, '0')
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					  AND A1.BRANCH_NO = C.BRANCH_NO
					  AND A1.ITEM_CODE = #item#
					  AND A1.MIN_DCD = '0'
					  AND ROWNUM = 1) MIN_OR,
					<isNotEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL
					</isEqual>
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					  AND A1.BRANCH_NO = C.BRANCH_NO
					  AND A1.ITEM_CODE = #item#
					  AND A1.MIN_DCD = '0'
					  AND ROWNUM = 1) MIN_VL,
					  DECODE(SUBSTR(#item#,0,3), 'VOC', NULL, 
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ 
							MIN_TIME
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					  AND A1.BRANCH_NO = C.BRANCH_NO
					  <!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
						AND A1.ITEM_CODE = #item#
					  AND A1.MIN_DCD = '0'
					  AND ROWNUM = 1)
					) MIN_TIME2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', '0', 
					<isNotEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */  TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL
					</isNotEqual>
					<isEqual property="item" compareValue="CON00">
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */  TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL
					</isEqual>
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					  AND A1.BRANCH_NO = C.BRANCH_NO
					  <!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
						AND A1.ITEM_CODE = #item#
					  AND A1.MIN_DCD = '0'
					  AND ROWNUM = 1)
					) MIN_VL2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL,
					(SELECT /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ MIN_OR
					FROM T_MIN_DATA A1
					WHERE A1.FACT_CODE = A.FACT_CODE
					  AND A1.BRANCH_NO = C.BRANCH_NO
					  <!-- AND A1.ITEM_CODE = SUBSTR(#item#,0,3) || '01' -->
						AND A1.ITEM_CODE = #item#
					  AND A1.MIN_DCD = '0'
					  AND ROWNUM = 1)
					 ) MIN_OR2, 
					A.RIVER_DIV, 
					A.SYS_KIND,
					(SELECT SYS_KIND_NAME FROM T_SYS_KIND WHERE SYS_KIND = A.SYS_KIND) SYS_KIND_NAME
			FROM 
				  T_FACT_INFO A,
				  T_ITEM_INFO B,
				  T_FACT_BRANCH_INFO C
			WHERE 
				A.FACT_USE_FLAG = 'Y'
				AND C.BRANCH_USE_FLAG = 'Y'
				AND A.FACT_CODE = C.FACT_CODE
				AND A.RIVER_DIV = 'R04'
				<isNotEqual prepend="AND" property="sys" compareValue="all">
					A.SYS_KIND = #sys#
				</isNotEqual>
				<isNotEqual prepend="AND" property="item" compareValue="all">
					B.ITEM_CODE = #item#
				</isNotEqual>
			) F1
		WHERE MIN_TIME BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
            OR MIN_TIME2 BETWEEN TO_CHAR((SYSDATE - 60/24/60 * 3),'YYYYMMDDHH24MISS') AND  TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
		ORDER BY FACT_NAME, BRANCH_NO
	</statement>
	
	<statement id="getTotalMntSummary"  parameterClass="totalMntMainSearchTSVO" resultClass="totalMntSummaryVO">
		SELECT
				F11.FACT_CODE,
				F11.FACT_NAME,
				F11.BRANCH_NO,
				F11.BRANCH_NAME,
				F11.RIVER_DIV,
				F11.RIVER_NAME,
				F11.SYS_KIND,
				F11.SYS_KIND_NAME,
				DECODE(D11.FACT_CODE, NULL, 'N', 'Y') IS_RECV,
				D11.MIN_TIME,
				D11.NOD,
				D11.CON,
				D11.TUR,
				D11.DOW,
				D11.TMP,
				D11.PHY,
				D11.CON_OR,
				D11.TUR_OR,
				D11.DOW_OR,
				D11.TMP_OR,
				D11.PHY_OR,
				D11.IMP,
				D11.RIM,
				D11.LIM,
				D11.LTX,
				D11.RTX,
				D11.TOX,
				D11.EVN,
				D11.TOF,
				D11.VOC1,
				D11.VOC2,
				D11.VOC3,
				D11.VOC4,
				D11.VOC5,
				D11.VOC6,
				D11.VOC7,
				D11.VOC8,
				D11.VOC9,
				D11.VOC10,
				D11.VOC11,
				D11.VOC12,
				D11.VOC13,
				D11.VOC14,
				D11.VOC15,
				D11.CAD,
				D11.PLU,
				D11.COP,
				D11.ZIN,
				D11.PHE,
				D11.PHL,
				D11.TOC,
				D11.TON,
				D11.TOP,
				D11.NH4,
				D11.NO3,
				D11.PO4,
				D11.RIN,
				D11.IMP_OR,
				D11.RIM_OR,
				D11.LIM_OR,
				D11.LTX_OR,
				D11.RTX_OR,
				D11.TOX_OR,
				D11.EVN_OR,
				D11.TOF_OR,
				D11.VOC1_OR,
				D11.VOC2_OR,
				D11.VOC3_OR,
				D11.VOC4_OR,
				D11.VOC5_OR,
				D11.VOC6_OR,
				D11.VOC7_OR,
				D11.VOC8_OR,
				D11.VOC9_OR,
				D11.VOC10_OR,
				D11.VOC11_OR,
				D11.VOC12_OR,
				D11.VOC13_OR,
				D11.VOC14_OR,
				D11.VOC15_OR,
				D11.CAD_OR,
				D11.PLU_OR,
				D11.COP_OR,
				D11.ZIN_OR,
				D11.PHE_OR,
				D11.PHL_OR,
				D11.TOC_OR,
				D11.TON_OR,
				D11.TOP_OR,
				D11.NH4_OR,
				D11.NO3_OR,
				D11.PO4_OR,
				D11.RIN_OR,
				D11.MIN_OR
		FROM
		(
			SELECT F1.FACT_CODE,
						<isEqual property="sys" compareValue="T">
						NVL(F1.FACT_NO,'-') AS FACT_NAME,
						</isEqual>
						<isNotEqual property="sys" compareValue="T">
						AREA.REG_NAME AS FACT_NAME,
						</isNotEqual>
						D1.BRANCH_NO,
						<isEqual property="sys" compareValue="A">
						D1.BRANCH_NAME BRANCH_NAME,
						</isEqual>
						<isNotEqual property="sys" compareValue="A">
						D1.BRANCH_NAME||'-'||D1.BRANCH_NO BRANCH_NAME,
						</isNotEqual>
						F1.RIVER_DIV,
						(
								SELECT
									COMMON_CODE_NAME
							FROM
								T_COMMON_CODE
							WHERE 
								F1.RIVER_DIV = COMMON_CODE
								AND COMMON_CODE_CATEGORY = '01'
						) RIVER_NAME,
						F1.SYS_KIND,
						(
								SELECT
									SYS_KIND_NAME
							FROM
								T_SYS_KIND
							WHERE
								SYS_KIND = F1.SYS_KIND
						) SYS_KIND_NAME
				FROM
					T_FACT_INFO F1,
					T_FACT_BRANCH_INFO D1,
					T_WEATHER_AREA AREA
				WHERE
					F1.FACT_CODE = D1.FACT_CODE
					AND D1.FACT_CODE = AREA.FACT_CODE(+)
					<isEqual property="sys" compareValue="U">
					AND D1.BRANCH_NO = AREA.BRANCH_NO(+)
					</isEqual>
					AND D1.BRANCH_USE_FLAG = 'Y'
					AND F1.FACT_USE_FLAG = 'Y'
					AND F1.SYS_KIND = #sys#
					AND F1.RIVER_DIV = #river#
			) F11,
			(
							SELECT FACT_CODE,
									BRANCH_NO,
									MAX(MIN_TIME) as MIN_TIME,
									NOD, /* 일반 항목 */
									TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
									TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
									TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
									TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
									TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
									SUM(TUR_OR) TUR_OR,
									SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
									SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
									SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
									SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR,
									TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
									SUM(IMP_OR) IMP_OR, /* 생물독성(물벼룩1) */
									TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
									TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
									SUM(LIM_OR) LIM_OR,
									SUM(RIM_OR) RIM_OR, /* 생물독성(물벼룩2) */
									TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
									TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
									SUM(LTX_OR) LTX_OR,
									SUM(RTX_OR) RTX_OR, /* 생물독성(미생물) */
									TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
									SUM(TOX_OR) TOX_OR, /* 생물독성(조류) */
									TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
									SUM(EVN_OR) EVN_OR, /* 클로로필-a */
									TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
									SUM(TOF_OR) TOF_OR, /* 휘발성 유기화합물 */
									TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
									TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
									TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
									TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
									TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
									TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
									TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
									TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
									TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
									TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
									TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
									TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
									TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
									TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
									TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
									SUM(VOC1_OR) VOC1_OR,
									SUM(VOC2_OR) VOC2_OR,
									SUM(VOC3_OR) VOC3_OR,
									SUM(VOC4_OR) VOC4_OR,
									SUM(VOC5_OR) VOC5_OR,
									SUM(VOC6_OR) VOC6_OR,
									SUM(VOC7_OR) VOC7_OR,
									SUM(VOC8_OR) VOC8_OR,
									SUM(VOC9_OR) VOC9_OR,
									SUM(VOC10_OR) VOC10_OR,
									SUM(VOC11_OR) VOC11_OR,
									SUM(VOC12_OR) VOC12_OR,
									SUM(VOC13_OR) VOC13_OR,
									SUM(VOC14_OR) VOC14_OR,
									SUM(VOC15_OR) VOC15_OR, /* 중금속 */
									TO_CHAR(SUM(COP), 'FM999,990.00') COP,
									TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
									TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
									TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
									SUM(COP_OR) COP_OR,
									SUM(PLU_OR) PLU_OR,
									SUM(ZIN_OR) ZIN_OR,
									SUM(CAD_OR) CAD_OR, /* 페놀 */
									TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
									TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
									SUM(PHE_OR) PHE_OR,
									SUM(PHL_OR) PHL_OR, /* 유기물질 */
									TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
									SUM(TOC_OR) TOC_OR, /* 영양염류 */
									TO_CHAR(SUM(TON), 'FM999,990.00') TON,
									TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
									TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
									TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
									TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
									SUM(TON_OR) TON_OR,
									SUM(TOP_OR) TOP_OR,
									SUM(NH4_OR) NH4_OR,
									SUM(NO3_OR) NO3_OR,
									SUM(PO4_OR) PO4_OR, /* 강수량계 */
									TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
									SUM(RIN_OR) RIN_OR,
									MAX(MIN_OR) MIN_OR
							FROM
							(
									SELECT DISTINCT F1.FACT_CODE,
										F1.BRANCH_NO,
										decode(F1.MIN_TIME,null,' ',(substr(F1.MIN_TIME,0,4)||'/'|| substr(F1.MIN_TIME,5,2)||'/'|| substr(F1.MIN_TIME,7,2)||' '||substr(F1.MIN_TIME,9,2)||':'|| substr(F1.MIN_TIME,11,2))) as MIN_TIME,
										F1.ITEM_CODE,
										F1.ITEM_NAME, /*일반항목 내부 */
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
										DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
										DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR) TMP_OR,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR, /* 일반 항목 외부 */
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP, /* 생물 독성 (물고기)*/
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR, /* 생물 독성 (물벼룩1) */
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR, /* 생물 독성 (물벼룩2) */
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR, /* 생물 독성 (미생물) */
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR, /* 생물 독성 (조류) */
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR, /* 클로로필-a */
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR, /* 휘발성 유기화합물 */
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR, /* 중금속 */
										DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
										DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR, /* 페놀 */
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR, /* 유기물질 */
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR, /* 영양염류 */
										DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
										DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR, /* 강수량계 */
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
										SUBSTR(F1.FACT_CODE, 6, 2) AS NOD,
										F1.MIN_OR
									FROM
										(
											SELECT A.BRANCH_NO,
												A.MIN_TIME,
												A.ITEM_CODE,
												A.FACT_CODE,
												(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = A.ITEM_CODE) ITEM_NAME,
												A.MIN_VL,
												CASE
													WHEN START_ALARM_DATE IS NULL THEN
													A.MIN_OR
													WHEN ALARM_TYPE IN ('51', '52') THEN
													'1'
													WHEN ALARM_TYPE IN ('61', '62') THEN
													'2'
													WHEN ALARM_TYPE IN ('71', '72') THEN
													'3'
												END MIN_OR,
												B.START_ALARM_DATE
											FROM
											(
													SELECT FACT_CODE, BRANCH_NO, ITEM_CODE ,
													(
															SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_TIME
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
														AND D.BRANCH_NO = I.BRANCH_NO
														AND D.ITEM_CODE = I.ITEM_CODE
														AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
														AND ROWNUM = 1
													) MIN_TIME,
													(
															SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_VL
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
														AND D.BRANCH_NO = I.BRANCH_NO
														AND D.ITEM_CODE = I.ITEM_CODE
														AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
														AND ROWNUM = 1
													) MIN_VL,
													(
														SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_OR
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
															AND D.BRANCH_NO = I.BRANCH_NO
															AND D.ITEM_CODE = I.ITEM_CODE
															AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
															AND ROWNUM = 1
													) MIN_OR
															FROM T_FACT_MEASU_ITEM I
															WHERE I.ITEM_USE_FLAG = 'Y'
											) A,
											ALARMHIST_TB B
											WHERE A.FACT_CODE = B.SITE_ID(+)
											AND A.MIN_TIME = SUBSTR(B.START_ALARM_DATE(+), 0, 12)
									) F1
							)
							GROUP BY FACT_CODE, BRANCH_NO, NOD) D11
		WHERE F11.FACT_CODE = D11.FACT_CODE(+)
			AND F11.BRANCH_NO = D11.BRANCH_NO(+)
			AND SYS_KIND = #sys#
			AND RIVER_DIV = #river#
		<isNotEqual property="step" compareValue="all">
			AND MIN_OR = #step#
		</isNotEqual>
		ORDER BY FACT_NAME, BRANCH_NO
	</statement>
	
	<statement id="getTotalMntSummaryTMS"  parameterClass="totalMntMainSearchTSVO" resultClass="totalMntSummaryVO">
	 <![CDATA[
		SELECT * FROM (
SELECT FACT_CODE
	   ,fact_name
	   , WAST_NO as BRANCH_NO
	   , WAST_NO as BRANCH_NAME
	   , TO_CHAR(TO_DATE(MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') AS MIN_TIME 
	   , TO_CHAR(TO_DATE(MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD') AS STRDATE
	   , TO_CHAR(TO_DATE(MIN_TIME, 'YYYYMMDDHH24MI'), 'HH24:MI') AS STRTIME
	   , MIN_RTIME  as MINRTIME
	   , CASE WHEN BLACK > 0 THEN 'M' ELSE CASE WHEN WHITE > 0 THEN 'L' ELSE CASE WHEN RED > 0 THEN '3' ELSE CASE WHEN ORANGE > 0 THEN '2' ELSE CASE WHEN YELLOW > 0 THEN '1' ELSE CASE WHEN BLUE > 0 THEN '0' ELSE 'L' END END END END END END VALUE
	   , PHY
	   , PHY_OR             
	   , BOD
	   , BOD_OR             
	   , COD
	   , COD_OR             
	   , SUS
	   , SUS_OR             
	   , TOP
	   , TOP_OR             
	   , TON
	   , TON_OR             
	   , FLW
	   , FLW_OR
	   , PHYLAW
	   , BODLAW
	   , CODLAW
	   , SUSLAW
	   , TOPLAW
	   , TONLAW
	   , FLWLAW
	   , RIVER_DIV
	   , RIVER_NAME
	   , 'T' AS SYS_KIND
	   , '수질TMS' AS SYS_KIND_NAME
             , DECODE(CASE WHEN BLACK > 0 THEN 'M' ELSE CASE WHEN WHITE > 0 THEN 'L' ELSE CASE WHEN RED > 0 THEN '3' ELSE CASE WHEN ORANGE > 0 THEN '2' ELSE CASE WHEN YELLOW > 0 THEN '1' ELSE CASE WHEN BLUE > 0 THEN '0' ELSE 'L' END END END END END END,'M','N','Y') AS IS_RECV
	FROM (
	     SELECT FACT_CODE
	           ,FACT_NAME
	          , WAST_NO
	          , STAND_TIME
	          , MAX(MIN_TIME) AS MIN_TIME
	          , MAX(MIN_RTIME) AS MIN_RTIME
	          , NVL(SUM(DECODE(MIN_OR, NULL, 1)), 0) AS BLACK
	          , NVL(SUM(CASE WHEN MIN_ST IN ('05', '15', '06', '16' ) THEN 1 END), 0) AS WHITE
	          , NVL(SUM(DECODE(MIN_OR, '3', 1)), 0) AS RED
	          , NVL(SUM(DECODE(MIN_OR, '2', 1)), 0) AS ORANGE
	          , NVL(SUM(DECODE(MIN_OR, '1', 1)), 0) AS YELLOW
	          , NVL(SUM(DECODE(MIN_OR, '0', 1)), 0) AS BLUE
	          , TO_CHAR(SUM(PHY), 'FM999,990.00') PHY
                    , TO_CHAR(MAX(PHY_OR)) PHY_OR
	          , TO_CHAR(SUM(BOD), 'FM999,990.00') BOD
                    , TO_CHAR(MAX(BOD_OR)) BOD_OR                    
	          , TO_CHAR(SUM(COD), 'FM999,990.00') COD
                    , TO_CHAR(MAX(COD_OR)) COD_OR                    
	          , TO_CHAR(SUM(SUS), 'FM999,990.00') SUS
                    , TO_CHAR(MAX(SUS_OR)) SUS_OR                    
	          , TO_CHAR(SUM(TOP), 'FM999,990.00') TOP
                    , TO_CHAR(MAX(TOP_OR)) TOP_OR                      
	          , TO_CHAR(SUM(TON), 'FM999,990.00') TON
                    , TO_CHAR(MAX(TON_OR)) TON_OR                    
	          , TO_CHAR(SUM(FLW), 'FM999,990') FLW
                    , TO_CHAR(MAX(FLW_OR)) FLW_OR                          
	          , TO_CHAR(MAX(PHYLAW)) PHYLAW
	          , TO_CHAR(MAX(BODLAW)) BODLAW
	          , TO_CHAR(MAX(CODLAW)) CODLAW
	          , TO_CHAR(MAX(SUSLAW)) SUSLAW
	          , TO_CHAR(MAX(TOPLAW)) TOPLAW
	          , TO_CHAR(MAX(TONLAW)) TONLAW
	          , TO_CHAR(MAX(FLWLAW)) FLWLAW
	          , 'R'||DECODE(MAX(AREA_GBN ),'02','03','03','02',MAX(AREA_GBN )) AS RIVER_DIV
	          , DECODE(MAX(AREA_GBN), '01', '수도권', '02', '충청/강원', '03', '영남', '04', '호남') AS RIVER_NAME
	       FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO
	                 , MA.ITEM_CODE
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , MB.MIN_TIME
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , CASE WHEN MB.MIN_OR > '0' THEN  CASE WHEN MIN_ST IN ('00', '02' ) THEN MIN_OR ELSE '0' END ELSE MIN_OR END AS MIN_OR
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'PHY', MIN_VL) PHY
                           , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'PHY', MIN_OR) PHY_OR
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'BOD', MIN_VL) BOD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'BOD', MIN_OR) BOD_OR                           
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'COD', MIN_VL) COD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'COD', MIN_OR) COD_OR
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'SUS', MIN_VL) SUS
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'SUS', MIN_OR) SUS_OR                           
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TOP', MIN_VL) TOP
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TOP', MIN_OR) TOP_OR                           
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TON', MIN_VL) TON
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TON', MIN_OR) TON_OR                           
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'FLW', MIN_VL) FLW
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'FLW', MIN_OR) FLW_OR                           
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'PHY', '(' || TO_CHAR(LAW_LVAL,'FM999,990.00') || '~' || TO_CHAR(LAW_HVAL,'FM999,990.00') ||')') PHYLAW
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'BOD', '(' || TO_CHAR(LAW_LVAL,'FM999,990.00') || '~' || TO_CHAR(LAW_HVAL,'FM999,990.00') ||')') BODLAW
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'COD', '(' || TO_CHAR(LAW_LVAL,'FM999,990.00') || '~' || TO_CHAR(LAW_HVAL,'FM999,990.00') ||')') CODLAW
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'SUS', '(' || TO_CHAR(LAW_LVAL,'FM999,990.00') || '~' || TO_CHAR(LAW_HVAL,'FM999,990.00') ||')') SUSLAW
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TOP', '(' || TO_CHAR(LAW_LVAL,'FM999,990.00') || '~' || TO_CHAR(LAW_HVAL,'FM999,990.00') ||')') TOPLAW
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TON', '(' || TO_CHAR(LAW_LVAL,'FM999,990.00') || '~' || TO_CHAR(LAW_HVAL,'FM999,990.00') ||')') TONLAW
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'FLW', '(' || TO_CHAR(LAW_LVAL,'FM999,990') || '~' || TO_CHAR(LAW_HVAL,'FM999,990') ||')') FLWLAW
	                 , ma.area_gbn
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , (
	                
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                   
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD
	                 , D.LAW_LVAL
	                 , D.LAW_HVAL
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C
	                 , (SELECT * FROM WTMSC_FACT_LAW@TMS WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN BEGIN_DATE AND END_DATE AND LAW_APPLY = '1') D
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE
	               AND A.FACT_CODE = D.FACT_CODE(+)
	               AND A.WAST_NO = D.WAST_NO(+)
	               AND A.ITEM_CODE = D.ITEM_CODE(+)
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+)
	          )
	      GROUP BY FACT_CODE, fact_name, WAST_NO, STAND_TIME, area_gbn
	   )
	   ORDER BY STRDATE DESC, STRTIME DESC, FACT_NAME ASC, BRANCH_NO ASC) 
	   WHERE RIVER_DIV = #river# AND VALUE = #step#
	   ]]>
	</statement>
	
	<statement id="getTotalMntGraph" parameterClass="totalMntMainSearchTSVO" resultClass="resultChartVO">
		SELECT
			FACT_CODE, FACT_NAME, BRANCH_NO, BRANCH_NAME,
				DECODE(MIN_VL2, NULL, 
					(
						CASE WHEN decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN 
									 NVL(decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))),0) ELSE '0' END
					),
					(
						CASE WHEN decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN 
									 NVL(decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))),0) ELSE '0' END
					)
				) MIN_TIME,
			DECODE(MIN_VL2, NULL,
				( 
					CASE WHEN decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN 
							MIN_VL ELSE 0 END
				 ),
				 (
					CASE WHEN decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN 
							MIN_VL2 ELSE 0 END
				 )
			) MIN_VL,
			DECODE(MIN_VL2, NULL,
				(
					CASE WHEN decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN 
						 MIN_OR END
				),
				(
					CASE WHEN decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN 
						 MIN_OR2 END
				) 
			) MIN_OR,
			LOC_SEQ_NO
		FROM	
			(SELECT F1.FACT_CODE,
					F1.FACT_NAME,
					D1.BRANCH_NO,
					<isEqual property="sys" compareValue="A">
					D1.BRANCH_NAME BRANCH_NAME,
					</isEqual>
					<isNotEqual property="sys" compareValue="A">
					D1.BRANCH_NAME||'-'||D1.BRANCH_NO BRANCH_NAME,
					</isNotEqual>
					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ 
							MIN_TIME
					FROM T_MIN_DATA A
					WHERE A.FACT_CODE = D1.FACT_CODE
					AND A.BRANCH_NO = D1.BRANCH_NO
					AND A.ITEM_CODE = #item#
					AND A.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_TIME,
					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ MIN_VL
					FROM T_MIN_DATA A
					WHERE A.FACT_CODE = D1.FACT_CODE
					AND A.BRANCH_NO = D1.BRANCH_NO
					AND A.ITEM_CODE = #item#
					AND A.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_VL,
					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ MIN_OR
					FROM T_MIN_DATA A
					WHERE A.FACT_CODE = D1.FACT_CODE
					AND A.BRANCH_NO = D1.BRANCH_NO
					AND A.ITEM_CODE = #item#
					AND A.MIN_DCD = '0'
					AND ROWNUM = 1) MIN_OR,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL, 
					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ 
							MIN_TIME
					FROM T_MIN_DATA A
					WHERE A.FACT_CODE = D1.FACT_CODE
					AND A.BRANCH_NO = D1.BRANCH_NO
					AND A.ITEM_CODE = SUBSTR(#item#,0,3) || '01'
					AND A.MIN_DCD = '0'
					AND ROWNUM = 1)
					) MIN_TIME2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', '0', 
					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ MIN_VL
					FROM T_MIN_DATA A
					WHERE A.FACT_CODE = D1.FACT_CODE
					AND A.BRANCH_NO = D1.BRANCH_NO
					AND A.ITEM_CODE = SUBSTR(#item#,0,3) || '01'
					AND A.MIN_DCD = '0'
					AND ROWNUM = 1)
					) MIN_VL2,
					DECODE(SUBSTR(#item#,0,3), 'VOC', NULL,
					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ MIN_OR
					FROM T_MIN_DATA A
					WHERE A.FACT_CODE = D1.FACT_CODE
					AND A.BRANCH_NO = D1.BRANCH_NO
					AND A.ITEM_CODE = SUBSTR(#item#,0,3) || '01'
					AND A.MIN_DCD = '0'
					AND ROWNUM = 1)
					 ) MIN_OR2,
					F1.LOC_SEQ_NO 
			FROM T_FACT_INFO F1,
				 T_FACT_BRANCH_INFO D1
			WHERE RIVER_DIV = #river#
				<isNotEqual property="sys" prepend="AND" compareValue="all">
					SYS_KIND = #sys#
				</isNotEqual>
				<isEqual property="sys" prepend="AND" compareValue="all">
					SYS_KIND != 'W'
				</isEqual>	
			AND F1.FACT_CODE = D1.FACT_CODE
			AND D1.BRANCH_USE_FLAG = 'Y'  )
		 ORDER BY LOC_SEQ_NO, FACT_NAME, BRANCH_NO
	</statement>
	
	<statement id="getTotalMntGraphTMS" parameterClass="totalMntMainSearchTSVO" resultClass="resultChartVO">
	<![CDATA[
	SELECT FACT_CODE, FACT_NAME, BRANCH_NO,FACT_NAME||'-'||BRANCH_NO as BRANCH_NAME, MIN_TIME, nvl(MIN_VL,0) AS MIN_VL , MIN_OR, ROWNUM AS LOC_SEQ_NO FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO AS BRANCH_NO
                           , MA.WAST_NO AS BRANCH_NAME
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD HH24:MI') AS MIN_DATE
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'MM/DD HH24:MI') AS MIN_TIME
	                 , MA.ITEM_CODE
                           , MA.ITEM_NAME                            
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , CASE WHEN MB.MIN_OR > '0' THEN  CASE WHEN MIN_ST IN ('00', '02' ) THEN MIN_OR ELSE '0' END ELSE MIN_OR END AS MIN_OR
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
                           , MA.AREA_GBN	                 
	                 , 'R'||DECODE(ma.area_gbn,'02','03','03','02',MA.AREA_GBN) AS RIVER_DIV
                           , 'T' AS SYS_KIND
                           , '수질TMS' AS SYS_KIND_NAME                           
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
                           , B.ITEM_NAME
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD	                 
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C	                 
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE	               
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+) ORDER BY MA.FACT_CODE) WHERE RIVER_DIV = #river# AND ITEM_CODE = #item#
	              
	           
	]]>
	</statement>
	
	<statement id="getTotalMntGraph2" parameterClass="totalMntMainSearchTSVO" resultClass="resultChartVO">
	SELECT  FACT_CODE, FACT_NAME, BRANCH_NO, BRANCH_NAME, MIN_TIME,
	<isEqual property="item" compareValue="TUR00">
	NVL(TUR,0)  MIN_VL, NVL(TUR_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="DOW00">
	NVL(DOW,0)  MIN_VL, NVL(DOW_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="TMP00">
	NVL(TMP,0)  MIN_VL, NVL(TMP_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="PHY00">
	NVL(PHY,0)  MIN_VL, NVL(PHY_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="CON00">
	NVL(CON,0)  MIN_VL, NVL(CON_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="TOF00">
	NVL(TOF,0)  MIN_VL, NVL(TOF_OR,0) MIN_OR  
	</isEqual>
	 FROM (
SELECT 
            F11.FACT_CODE,
                F11.FACT_NAME,
                F11.BRANCH_NO,
                F11.BRANCH_NAME,
                F11.RIVER_DIV,
                F11.RIVER_NAME,
                F11.SYS_KIND,
                F11.SYS_KIND_NAME,
                DECODE(D11.FACT_CODE, NULL, 'N', 'Y') IS_RECV,
                D11.MIN_TIME,
                D11.NOD,
                D11.CON,
                D11.TUR,
                D11.DOW,
                D11.TMP,
                D11.PHY,
                D11.CON_OR,
                D11.TUR_OR,
                D11.DOW_OR,
                D11.TMP_OR,
                D11.PHY_OR, 
                D11.IMP,
                D11.RIM,
                D11.LIM,
                D11.LTX,
                D11.RTX,
                D11.TOX,
                D11.EVN,
                D11.TOF,
                D11.VOC1,
                D11.VOC2,
                D11.VOC3,
                D11.VOC4,
                D11.VOC5,
                D11.VOC6,
                D11.VOC7,
                D11.VOC8,
                D11.VOC9,
                D11.VOC10,
                D11.VOC11,
                D11.VOC12,
                D11.VOC13,
                D11.VOC14,
                D11.VOC15,
                D11.CAD,
                D11.PLU,
                D11.COP,
                D11.ZIN,
                D11.PHE,
                D11.PHL,
                D11.TOC,
                D11.TON,
                D11.TOP,
                D11.NH4,
                D11.NO3,
                D11.PO4,
                D11.RIN,
                D11.IMP_OR,
                D11.RIM_OR,
                D11.LIM_OR,
                D11.LTX_OR,
                D11.RTX_OR,
                D11.TOX_OR,
                D11.EVN_OR,
                D11.TOF_OR,
                D11.VOC1_OR,
                D11.VOC2_OR,
                D11.VOC3_OR,
                D11.VOC4_OR,
                D11.VOC5_OR,
                D11.VOC6_OR,
                D11.VOC7_OR,
                D11.VOC8_OR,
                D11.VOC9_OR,
                D11.VOC10_OR,
                D11.VOC11_OR,
                D11.VOC12_OR,
                D11.VOC13_OR,
                D11.VOC14_OR,
                D11.VOC15_OR,
                D11.CAD_OR,
                D11.PLU_OR,
                D11.COP_OR,
                D11.ZIN_OR,
                D11.PHE_OR,
                D11.PHL_OR,
                D11.TOC_OR,
                D11.TON_OR,
                D11.TOP_OR,
                D11.NH4_OR,
                D11.NO3_OR,
                D11.PO4_OR,
                D11.RIN_OR
         FROM (
                SELECT 
                        F1.FACT_CODE, 
                        <isEqual property="sys" compareValue="T">
                            NVL(F1.FACT_NO,'-') AS FACT_NAME,
                        </isEqual>
                        <isNotEqual property="sys" compareValue="T">
                            AREA.REG_NAME AS FACT_NAME,
                        </isNotEqual>
                        D1.BRANCH_NO,
                        <isEqual property="sys" compareValue="A">
                        D1.BRANCH_NAME BRANCH_NAME,
                        </isEqual>
                        <isNotEqual property="sys" compareValue="A">
                        D1.BRANCH_NAME||'-'||D1.BRANCH_NO BRANCH_NAME,
                        </isNotEqual>
                    F1.RIVER_DIV, 
                    (SELECT COMMON_CODE_NAME FROM T_COMMON_CODE 
                        WHERE F1.RIVER_DIV = COMMON_CODE
                        AND COMMON_CODE_CATEGORY = '01') RIVER_NAME,
                    F1.SYS_KIND,
                    (
                        SELECT SYS_KIND_NAME 
                        FROM T_SYS_KIND 
                        WHERE SYS_KIND = F1.SYS_KIND
                    ) SYS_KIND_NAME
                 FROM 
                        T_FACT_INFO F1, 
                        T_FACT_BRANCH_INFO D1,
                        T_WEATHER_AREA AREA
                WHERE 
                    F1.FACT_CODE = D1.FACT_CODE
                    AND D1.FACT_CODE = AREA.FACT_CODE(+)
                    <isEqual property="sys" compareValue="U">
                        AND D1.BRANCH_NO = AREA.BRANCH_NO(+)
                    </isEqual>
                AND D1.BRANCH_USE_FLAG = 'Y'
                AND F1.FACT_USE_FLAG = 'Y'
                 <isNotEqual prepend="AND" property="river" compareValue="all">
                    F1.RIVER_DIV = #river#
                 </isNotEqual>
                 <isNotEqual prepend="AND" property="sys" compareValue="all">
                    SYS_KIND = #sys#
                 </isNotEqual>
            ) F11,
            (
                 SELECT FACT_CODE,
                                    BRANCH_NO,
                                    MAX(MIN_TIME) as MIN_TIME,
                                    NOD, /* 일반 항목 */
                                    TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
                                    TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
                                    TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
                                    TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
                                    TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
                                    SUM(TUR_OR) TUR_OR, 
                                    SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
                                    SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
                                    SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
                                    SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
                                    TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
                                    SUM(IMP_OR) IMP_OR, /* 생물독성(물벼룩1) */
                                    TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
                                    TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
                                    SUM(LIM_OR) LIM_OR,
                                    SUM(RIM_OR) RIM_OR, /* 생물독성(물벼룩2) */
                                    TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
                                    TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
                                    SUM(LTX_OR) LTX_OR,
                                    SUM(RTX_OR) RTX_OR, /* 생물독성(미생물) */
                                    TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
                                    SUM(TOX_OR) TOX_OR, /* 생물독성(조류) */
                                    TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
                                    SUM(EVN_OR) EVN_OR, /* 클로로필-a */
                                    TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
                                    SUM(TOF_OR) TOF_OR, /* 휘발성 유기화합물 */
                                    TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
                                    TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
                                    TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
                                    TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
                                    TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
                                    TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
                                    TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
                                    TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
                                    TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
                                    TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
                                    TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
                                    TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
                                    TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
                                    TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
                                    TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
                                    SUM(VOC1_OR) VOC1_OR,
                                    SUM(VOC2_OR) VOC2_OR,
                                    SUM(VOC3_OR) VOC3_OR,
                                    SUM(VOC4_OR) VOC4_OR,
                                    SUM(VOC5_OR) VOC5_OR,
                                    SUM(VOC6_OR) VOC6_OR,
                                    SUM(VOC7_OR) VOC7_OR,
                                    SUM(VOC8_OR) VOC8_OR,
                                    SUM(VOC9_OR) VOC9_OR,
                                    SUM(VOC10_OR) VOC10_OR,
                                    SUM(VOC11_OR) VOC11_OR,
                                    SUM(VOC12_OR) VOC12_OR,
                                    SUM(VOC13_OR) VOC13_OR,
                                    SUM(VOC14_OR) VOC14_OR,
                                    SUM(VOC15_OR) VOC15_OR, /* 중금속 */
                                    TO_CHAR(SUM(COP), 'FM999,990.00') COP,
                                    TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
                                    TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
                                    TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
                                    SUM(COP_OR) COP_OR,
                                    SUM(PLU_OR) PLU_OR,
                                    SUM(ZIN_OR) ZIN_OR,
                                    SUM(CAD_OR) CAD_OR, /* 페놀 */
                                    TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
                                    TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
                                    SUM(PHE_OR) PHE_OR,
                                    SUM(PHL_OR) PHL_OR, /* 유기물질 */
                                    TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
                                    SUM(TOC_OR) TOC_OR, /* 영양염류 */
                                    TO_CHAR(SUM(TON), 'FM999,990.00') TON,
                                    TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
                                    TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
                                    TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
                                    TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
                                    SUM(TON_OR) TON_OR,
                                    SUM(TOP_OR) TOP_OR,
                                    SUM(NH4_OR) NH4_OR,
                                    SUM(NO3_OR) NO3_OR,
                                    SUM(PO4_OR) PO4_OR, /* 강수량계 */
                                    TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
                                    SUM(RIN_OR) RIN_OR  
                FROM (
                 SELECT DISTINCT F1.FACT_CODE,
                        F1.BRANCH_NO, 
                    
                        decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) as MIN_TIME,
                        F1.ITEM_CODE,
                        F1.ITEM_NAME,
                        /* 일반항목 내부  */
                        DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
                        DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
                        DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
                        DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
                        DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
                        DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
                        DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
                        DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
                        /* 일반 항목 외부 */
                        DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
                        DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
                        DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
                        DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
                        DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
                        DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
                        DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
                        DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
                        DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
                        DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
                        /* 생물 독성 (물고기)*/
                        DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
                        DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
                        /* 생물 독성 (물벼룩1) */
                        DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
                        DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
                        DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
                        DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
                        /* 생물 독성 (물벼룩2) */
                        DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
                        DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
                        DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
                        DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
                        /* 생물 독성 (미생물) */
                        DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
                        DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
                        /* 생물 독성 (조류) */
                        DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
                        DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
                        /* 클로로필-a */
                        DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
                        DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
                        /* 휘발성 유기화합물 */
                        DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
                        DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
                        DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
                        DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
                        DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
                        DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
                        DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
                        DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
                        DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
                        DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
                        DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
                        DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
                        DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
                        DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
                        DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
                        DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
                        DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
                        DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
                        DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
                        DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
                        DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
                        DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
                        DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
                        DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
                        DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
                        DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
                        DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
                        DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
                        DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
                        DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
                        /* 중금속 */
                        DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
                        DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
                        DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
                        DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
                        DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
                        DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
                        DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
                        DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
                        /* 페놀 */
                        DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
                        DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
                        DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
                        DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
                        /* 유기물질 */
                        DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
                        DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
                        /* 영양염류 */
                        DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
                        DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
                        DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
                        DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
                        DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
                        DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
                        DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
                        DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
                        DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
                        DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
                        /* 강수량계 */
                        DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
                        DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
                        SUBSTR(F1.FACT_CODE,6,2) AS NOD
                     FROM (SELECT A.BRANCH_NO,
                                                A.MIN_TIME,
                                                A.ITEM_CODE,
                                                A.FACT_CODE,
                                                (SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = A.ITEM_CODE) ITEM_NAME,
                                                A.MIN_VL,
                                                CASE
                                                    WHEN START_ALARM_DATE IS NULL THEN
                                                    A.MIN_OR
                                                    WHEN ALARM_TYPE IN ('51', '52') THEN
                                                    '1'
                                                    WHEN ALARM_TYPE IN ('61', '62') THEN
                                                    '2'
                                                    WHEN ALARM_TYPE IN ('71', '72') THEN
                                                    '3'
                                                 END MIN_OR,
                                                B.START_ALARM_DATE
                                            FROM
                                            (
                                                    SELECT FACT_CODE, BRANCH_NO, ITEM_CODE ,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_TIME
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_TIME,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_VL
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_VL,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_OR
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_OR
                                                            FROM T_FACT_MEASU_ITEM I
                                                            WHERE I.ITEM_USE_FLAG = 'Y'
                                             ) A, 
                                             ALARMHIST_TB B
                                             WHERE A.FACT_CODE = B.SITE_ID(+)
                                             AND A.MIN_TIME =  SUBSTR(B.START_ALARM_DATE(+), 0, 12)
                                    ) F1
                    )
                GROUP BY FACT_CODE, BRANCH_NO, NOD
              ) D11
        WHERE F11.FACT_CODE = D11.FACT_CODE(+)
          AND F11.BRANCH_NO = D11.BRANCH_NO(+)
            <isNotEqual prepend="AND" property="river" compareValue="all">
                RIVER_DIV = #river#
            </isNotEqual>
            <isNotEqual prepend="AND" property="sys" compareValue="all">
                SYS_KIND = #sys#
            </isNotEqual>        
            AND D11.MIN_TIME IS NOT NULL
            )
ORDER BY FACT_NAME, BRANCH_NO
	</statement>
	
	<statement id="getSelectTotalMntGraph2" parameterClass="totalMntMainSearchTSVO" resultClass="resultChartVO">
	SELECT  FACT_CODE, FACT_NAME, BRANCH_NO, BRANCH_NAME, MIN_TIME,
	<isEqual property="item" compareValue="TUR00">
	NVL(TUR,0)  MIN_VL, NVL(TUR_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="DOW00">
	NVL(DOW,0)  MIN_VL, NVL(DOW_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="TMP00">
	NVL(TMP,0)  MIN_VL, NVL(TMP_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="PHY00">
	NVL(PHY,0)  MIN_VL, NVL(PHY_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="CON00">
	NVL(CON,0)  MIN_VL, NVL(CON_OR,0) MIN_OR  
	</isEqual>
	<isEqual property="item" compareValue="TOF00">
	NVL(TOF,0)  MIN_VL, NVL(TOF_OR,0) MIN_OR  
	</isEqual>
	 FROM (
SELECT 
            F11.FACT_CODE,
                F11.FACT_NAME,
                F11.BRANCH_NO,
                F11.BRANCH_NAME,
                F11.RIVER_DIV,
                F11.RIVER_NAME,
                F11.SYS_KIND,
                F11.SYS_KIND_NAME,
                DECODE(D11.FACT_CODE, NULL, 'N', 'Y') IS_RECV,
                D11.MIN_TIME,
                D11.NOD,
                D11.CON,
                D11.TUR,
                D11.DOW,
                D11.TMP,
                D11.PHY,
                D11.CON_OR,
                D11.TUR_OR,
                D11.DOW_OR,
                D11.TMP_OR,
                D11.PHY_OR, 
                D11.IMP,
                D11.RIM,
                D11.LIM,
                D11.LTX,
                D11.RTX,
                D11.TOX,
                D11.EVN,
                D11.TOF,
                D11.VOC1,
                D11.VOC2,
                D11.VOC3,
                D11.VOC4,
                D11.VOC5,
                D11.VOC6,
                D11.VOC7,
                D11.VOC8,
                D11.VOC9,
                D11.VOC10,
                D11.VOC11,
                D11.VOC12,
                D11.VOC13,
                D11.VOC14,
                D11.VOC15,
                D11.CAD,
                D11.PLU,
                D11.COP,
                D11.ZIN,
                D11.PHE,
                D11.PHL,
                D11.TOC,
                D11.TON,
                D11.TOP,
                D11.NH4,
                D11.NO3,
                D11.PO4,
                D11.RIN,
                D11.IMP_OR,
                D11.RIM_OR,
                D11.LIM_OR,
                D11.LTX_OR,
                D11.RTX_OR,
                D11.TOX_OR,
                D11.EVN_OR,
                D11.TOF_OR,
                D11.VOC1_OR,
                D11.VOC2_OR,
                D11.VOC3_OR,
                D11.VOC4_OR,
                D11.VOC5_OR,
                D11.VOC6_OR,
                D11.VOC7_OR,
                D11.VOC8_OR,
                D11.VOC9_OR,
                D11.VOC10_OR,
                D11.VOC11_OR,
                D11.VOC12_OR,
                D11.VOC13_OR,
                D11.VOC14_OR,
                D11.VOC15_OR,
                D11.CAD_OR,
                D11.PLU_OR,
                D11.COP_OR,
                D11.ZIN_OR,
                D11.PHE_OR,
                D11.PHL_OR,
                D11.TOC_OR,
                D11.TON_OR,
                D11.TOP_OR,
                D11.NH4_OR,
                D11.NO3_OR,
                D11.PO4_OR,
                D11.RIN_OR
         FROM (
                SELECT 
                        F1.FACT_CODE, 
                        <isEqual property="sys" compareValue="T">
                            NVL(F1.FACT_NO,'-') AS FACT_NAME,
                        </isEqual>
                        <isNotEqual property="sys" compareValue="T">
                            AREA.REG_NAME AS FACT_NAME,
                        </isNotEqual>
                        D1.BRANCH_NO,
                        <isEqual property="sys" compareValue="A">
                        D1.BRANCH_NAME BRANCH_NAME,
                        </isEqual>
                        <isNotEqual property="sys" compareValue="A">
                        D1.BRANCH_NAME||'-'||D1.BRANCH_NO BRANCH_NAME,
                        </isNotEqual>
                    F1.RIVER_DIV, 
                    (SELECT COMMON_CODE_NAME FROM T_COMMON_CODE 
                        WHERE F1.RIVER_DIV = COMMON_CODE
                        AND COMMON_CODE_CATEGORY = '01') RIVER_NAME,
                    F1.SYS_KIND,
                    (
                        SELECT SYS_KIND_NAME 
                        FROM T_SYS_KIND 
                        WHERE SYS_KIND = F1.SYS_KIND
                    ) SYS_KIND_NAME
                 FROM 
                        T_FACT_INFO F1, 
                        T_FACT_BRANCH_INFO D1,
                        T_WEATHER_AREA AREA
                WHERE 
                    F1.FACT_CODE = D1.FACT_CODE
                    AND D1.FACT_CODE = AREA.FACT_CODE(+)
                    <isEqual property="sys" compareValue="U">
                        AND D1.BRANCH_NO = AREA.BRANCH_NO(+)
                    </isEqual>
                AND D1.BRANCH_USE_FLAG = 'Y'
                AND F1.FACT_USE_FLAG = 'Y'
                AND 
                 <iterate property="listData" open="(" close=")" conjunction="OR">
					(D1.FACT_CODE=#listData[].factCode# AND D1.BRANCH_NO=#listData[].branchNo#)
				</iterate>	                 
            ) F11,
            (
                 SELECT FACT_CODE,
                                    BRANCH_NO,
                                    MAX(MIN_TIME) as MIN_TIME,
                                    NOD, /* 일반 항목 */
                                    TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
                                    TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
                                    TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
                                    TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
                                    TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
                                    SUM(TUR_OR) TUR_OR, 
                                    SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
                                    SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
                                    SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
                                    SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
                                    TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
                                    SUM(IMP_OR) IMP_OR, /* 생물독성(물벼룩1) */
                                    TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
                                    TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
                                    SUM(LIM_OR) LIM_OR,
                                    SUM(RIM_OR) RIM_OR, /* 생물독성(물벼룩2) */
                                    TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
                                    TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
                                    SUM(LTX_OR) LTX_OR,
                                    SUM(RTX_OR) RTX_OR, /* 생물독성(미생물) */
                                    TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
                                    SUM(TOX_OR) TOX_OR, /* 생물독성(조류) */
                                    TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
                                    SUM(EVN_OR) EVN_OR, /* 클로로필-a */
                                    TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
                                    SUM(TOF_OR) TOF_OR, /* 휘발성 유기화합물 */
                                    TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
                                    TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
                                    TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
                                    TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
                                    TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
                                    TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
                                    TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
                                    TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
                                    TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
                                    TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
                                    TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
                                    TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
                                    TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
                                    TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
                                    TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
                                    SUM(VOC1_OR) VOC1_OR,
                                    SUM(VOC2_OR) VOC2_OR,
                                    SUM(VOC3_OR) VOC3_OR,
                                    SUM(VOC4_OR) VOC4_OR,
                                    SUM(VOC5_OR) VOC5_OR,
                                    SUM(VOC6_OR) VOC6_OR,
                                    SUM(VOC7_OR) VOC7_OR,
                                    SUM(VOC8_OR) VOC8_OR,
                                    SUM(VOC9_OR) VOC9_OR,
                                    SUM(VOC10_OR) VOC10_OR,
                                    SUM(VOC11_OR) VOC11_OR,
                                    SUM(VOC12_OR) VOC12_OR,
                                    SUM(VOC13_OR) VOC13_OR,
                                    SUM(VOC14_OR) VOC14_OR,
                                    SUM(VOC15_OR) VOC15_OR, /* 중금속 */
                                    TO_CHAR(SUM(COP), 'FM999,990.00') COP,
                                    TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
                                    TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
                                    TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
                                    SUM(COP_OR) COP_OR,
                                    SUM(PLU_OR) PLU_OR,
                                    SUM(ZIN_OR) ZIN_OR,
                                    SUM(CAD_OR) CAD_OR, /* 페놀 */
                                    TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
                                    TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
                                    SUM(PHE_OR) PHE_OR,
                                    SUM(PHL_OR) PHL_OR, /* 유기물질 */
                                    TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
                                    SUM(TOC_OR) TOC_OR, /* 영양염류 */
                                    TO_CHAR(SUM(TON), 'FM999,990.00') TON,
                                    TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
                                    TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
                                    TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
                                    TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
                                    SUM(TON_OR) TON_OR,
                                    SUM(TOP_OR) TOP_OR,
                                    SUM(NH4_OR) NH4_OR,
                                    SUM(NO3_OR) NO3_OR,
                                    SUM(PO4_OR) PO4_OR, /* 강수량계 */
                                    TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
                                    SUM(RIN_OR) RIN_OR  
                FROM (
                 SELECT DISTINCT F1.FACT_CODE,
                        F1.BRANCH_NO,                     
                        decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) as MIN_TIME,
                        F1.ITEM_CODE,
                        F1.ITEM_NAME,
                        /* 일반항목 내부  */
                        DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
                        DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
                        DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
                        DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
                        DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
                        DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
                        DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
                        DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
                        /* 일반 항목 외부 */
                        DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
                        DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
                        DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
                        DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
                        DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
                        DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
                        DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
                        DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
                        DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
                        DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
                        /* 생물 독성 (물고기)*/
                        DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
                        DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
                        /* 생물 독성 (물벼룩1) */
                        DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
                        DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
                        DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
                        DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
                        /* 생물 독성 (물벼룩2) */
                        DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
                        DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
                        DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
                        DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
                        /* 생물 독성 (미생물) */
                        DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
                        DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
                        /* 생물 독성 (조류) */
                        DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
                        DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
                        /* 클로로필-a */
                        DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
                        DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
                        /* 휘발성 유기화합물 */
                        DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
                        DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
                        DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
                        DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
                        DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
                        DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
                        DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
                        DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
                        DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
                        DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
                        DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
                        DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
                        DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
                        DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
                        DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
                        DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
                        DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
                        DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
                        DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
                        DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
                        DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
                        DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
                        DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
                        DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
                        DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
                        DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
                        DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
                        DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
                        DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
                        DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
                        /* 중금속 */
                        DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
                        DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
                        DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
                        DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
                        DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
                        DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
                        DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
                        DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
                        /* 페놀 */
                        DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
                        DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
                        DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
                        DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
                        /* 유기물질 */
                        DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
                        DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
                        /* 영양염류 */
                        DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
                        DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
                        DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
                        DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
                        DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
                        DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
                        DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
                        DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
                        DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
                        DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
                        /* 강수량계 */
                        DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
                        DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
                        SUBSTR(F1.FACT_CODE,6,2) AS NOD
                     FROM (SELECT A.BRANCH_NO,
                                                A.MIN_TIME,
                                                A.ITEM_CODE,
                                                A.FACT_CODE,
                                                (SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = A.ITEM_CODE) ITEM_NAME,
                                                A.MIN_VL,
                                                CASE
                                                    WHEN START_ALARM_DATE IS NULL THEN
                                                    A.MIN_OR
                                                    WHEN ALARM_TYPE IN ('51', '52') THEN
                                                    '1'
                                                    WHEN ALARM_TYPE IN ('61', '62') THEN
                                                    '2'
                                                    WHEN ALARM_TYPE IN ('71', '72') THEN
                                                    '3'
                                                 END MIN_OR,
                                                B.START_ALARM_DATE
                                            FROM
                                            (
                                                    SELECT FACT_CODE, BRANCH_NO, ITEM_CODE ,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_TIME
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_TIME,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_VL
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_VL,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_OR
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_OR
                                                            FROM T_FACT_MEASU_ITEM I
                                                            WHERE I.ITEM_USE_FLAG = 'Y'
                                             ) A, 
                                             ALARMHIST_TB B
                                             WHERE A.FACT_CODE = B.SITE_ID(+)
                                             AND A.MIN_TIME =  SUBSTR(B.START_ALARM_DATE(+), 0, 12)
                                    ) F1
                    )
                GROUP BY FACT_CODE, BRANCH_NO, NOD
              ) D11
        WHERE F11.FACT_CODE = D11.FACT_CODE(+)
          AND F11.BRANCH_NO = D11.BRANCH_NO(+)                
            AND D11.MIN_TIME IS NOT NULL
            )
ORDER BY FACT_CODE ASC, BRANCH_NO ASC
	</statement>
	
	<statement id="getSelectMultiTotalMntGraph2" parameterClass="totalMntMainSearchTSVO" resultClass="resultChartVO">
	SELECT FACT_CODE, 
		       FACT_NAME, 
		       BRANCH_NO, 
		       BRANCH_NAME, 
		       MIN_TIME,   
		       NVL(TUR,0) TUR_MIN_VL, 
		       NVL(TUR_OR,0) TUR_MIN_OR, 
		       NVL(DOW,0) DOW_MIN_VL, 
		       NVL(DOW_OR,0) DOW_MIN_OR, 
		       NVL(TMP,0) TMP_MIN_VL, 
		       NVL(TMP_OR,0) TMP_MIN_OR, 
		       NVL(PHY,0) PHY_MIN_VL, 
		       NVL(PHY_OR,0) PHY_MIN_OR, 
		       NVL(CON,0) CON_MIN_VL, 
		       NVL(CON_OR,0) CON_MIN_OR, 
		       NVL(TOF,0) TOF_MIN_VL, 
		       NVL(TOF_OR,0) TOF_MIN_OR
	 FROM (
SELECT 
            F11.FACT_CODE,
                F11.FACT_NAME,
                F11.BRANCH_NO,
                F11.BRANCH_NAME,
                F11.RIVER_DIV,
                F11.RIVER_NAME,
                F11.SYS_KIND,
                F11.SYS_KIND_NAME,
                DECODE(D11.FACT_CODE, NULL, 'N', 'Y') IS_RECV,
                D11.MIN_TIME,
                D11.NOD,
                D11.CON,
                D11.TUR,
                D11.DOW,
                D11.TMP,
                D11.PHY,
                D11.CON_OR,
                D11.TUR_OR,
                D11.DOW_OR,
                D11.TMP_OR,
                D11.PHY_OR, 
                D11.IMP,
                D11.RIM,
                D11.LIM,
                D11.LTX,
                D11.RTX,
                D11.TOX,
                D11.EVN,
                D11.TOF,
                D11.VOC1,
                D11.VOC2,
                D11.VOC3,
                D11.VOC4,
                D11.VOC5,
                D11.VOC6,
                D11.VOC7,
                D11.VOC8,
                D11.VOC9,
                D11.VOC10,
                D11.VOC11,
                D11.VOC12,
                D11.VOC13,
                D11.VOC14,
                D11.VOC15,
                D11.CAD,
                D11.PLU,
                D11.COP,
                D11.ZIN,
                D11.PHE,
                D11.PHL,
                D11.TOC,
                D11.TON,
                D11.TOP,
                D11.NH4,
                D11.NO3,
                D11.PO4,
                D11.RIN,
                D11.IMP_OR,
                D11.RIM_OR,
                D11.LIM_OR,
                D11.LTX_OR,
                D11.RTX_OR,
                D11.TOX_OR,
                D11.EVN_OR,
                D11.TOF_OR,
                D11.VOC1_OR,
                D11.VOC2_OR,
                D11.VOC3_OR,
                D11.VOC4_OR,
                D11.VOC5_OR,
                D11.VOC6_OR,
                D11.VOC7_OR,
                D11.VOC8_OR,
                D11.VOC9_OR,
                D11.VOC10_OR,
                D11.VOC11_OR,
                D11.VOC12_OR,
                D11.VOC13_OR,
                D11.VOC14_OR,
                D11.VOC15_OR,
                D11.CAD_OR,
                D11.PLU_OR,
                D11.COP_OR,
                D11.ZIN_OR,
                D11.PHE_OR,
                D11.PHL_OR,
                D11.TOC_OR,
                D11.TON_OR,
                D11.TOP_OR,
                D11.NH4_OR,
                D11.NO3_OR,
                D11.PO4_OR,
                D11.RIN_OR
         FROM (
                SELECT 
                        F1.FACT_CODE, 
                        <isEqual property="sys" compareValue="T">
                            NVL(F1.FACT_NO,'-') AS FACT_NAME,
                        </isEqual>
                        <isNotEqual property="sys" compareValue="T">
                            AREA.REG_NAME AS FACT_NAME,
                        </isNotEqual>
                        D1.BRANCH_NO,
                        <isEqual property="sys" compareValue="A">
                        D1.BRANCH_NAME BRANCH_NAME,
                        </isEqual>
                        <isNotEqual property="sys" compareValue="A">
                        D1.BRANCH_NAME||'-'||D1.BRANCH_NO BRANCH_NAME,
                        </isNotEqual>
                    F1.RIVER_DIV, 
                    (SELECT COMMON_CODE_NAME FROM T_COMMON_CODE 
                        WHERE F1.RIVER_DIV = COMMON_CODE
                        AND COMMON_CODE_CATEGORY = '01') RIVER_NAME,
                    F1.SYS_KIND,
                    (
                        SELECT SYS_KIND_NAME 
                        FROM T_SYS_KIND 
                        WHERE SYS_KIND = F1.SYS_KIND
                    ) SYS_KIND_NAME
                 FROM 
                        T_FACT_INFO F1, 
                        T_FACT_BRANCH_INFO D1,
                        T_WEATHER_AREA AREA
                WHERE 
                    F1.FACT_CODE = D1.FACT_CODE
                    AND D1.FACT_CODE = AREA.FACT_CODE(+)
                    <isEqual property="sys" compareValue="U">
                        AND D1.BRANCH_NO = AREA.BRANCH_NO(+)
                    </isEqual>
                AND D1.BRANCH_USE_FLAG = 'Y'
                AND F1.FACT_USE_FLAG = 'Y'
                AND 
                 <iterate property="listData" open="(" close=")" conjunction="OR">
					(D1.FACT_CODE=#listData[].factCode# AND D1.BRANCH_NO=#listData[].branchNo#)
				</iterate>	                 
            ) F11,
            (
                 SELECT FACT_CODE,
                                    BRANCH_NO,
                                    MAX(MIN_TIME) as MIN_TIME,
                                    NOD, /* 일반 항목 */
                                    TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
                                    TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
                                    TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
                                    TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
                                    TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
                                    SUM(TUR_OR) TUR_OR, 
                                    SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
                                    SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
                                    SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
                                    SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
                                    TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
                                    SUM(IMP_OR) IMP_OR, /* 생물독성(물벼룩1) */
                                    TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
                                    TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
                                    SUM(LIM_OR) LIM_OR,
                                    SUM(RIM_OR) RIM_OR, /* 생물독성(물벼룩2) */
                                    TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
                                    TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
                                    SUM(LTX_OR) LTX_OR,
                                    SUM(RTX_OR) RTX_OR, /* 생물독성(미생물) */
                                    TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
                                    SUM(TOX_OR) TOX_OR, /* 생물독성(조류) */
                                    TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
                                    SUM(EVN_OR) EVN_OR, /* 클로로필-a */
                                    TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
                                    SUM(TOF_OR) TOF_OR, /* 휘발성 유기화합물 */
                                    TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
                                    TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
                                    TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
                                    TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
                                    TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
                                    TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
                                    TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
                                    TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
                                    TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
                                    TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
                                    TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
                                    TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
                                    TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
                                    TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
                                    TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
                                    SUM(VOC1_OR) VOC1_OR,
                                    SUM(VOC2_OR) VOC2_OR,
                                    SUM(VOC3_OR) VOC3_OR,
                                    SUM(VOC4_OR) VOC4_OR,
                                    SUM(VOC5_OR) VOC5_OR,
                                    SUM(VOC6_OR) VOC6_OR,
                                    SUM(VOC7_OR) VOC7_OR,
                                    SUM(VOC8_OR) VOC8_OR,
                                    SUM(VOC9_OR) VOC9_OR,
                                    SUM(VOC10_OR) VOC10_OR,
                                    SUM(VOC11_OR) VOC11_OR,
                                    SUM(VOC12_OR) VOC12_OR,
                                    SUM(VOC13_OR) VOC13_OR,
                                    SUM(VOC14_OR) VOC14_OR,
                                    SUM(VOC15_OR) VOC15_OR, /* 중금속 */
                                    TO_CHAR(SUM(COP), 'FM999,990.00') COP,
                                    TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
                                    TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
                                    TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
                                    SUM(COP_OR) COP_OR,
                                    SUM(PLU_OR) PLU_OR,
                                    SUM(ZIN_OR) ZIN_OR,
                                    SUM(CAD_OR) CAD_OR, /* 페놀 */
                                    TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
                                    TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
                                    SUM(PHE_OR) PHE_OR,
                                    SUM(PHL_OR) PHL_OR, /* 유기물질 */
                                    TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
                                    SUM(TOC_OR) TOC_OR, /* 영양염류 */
                                    TO_CHAR(SUM(TON), 'FM999,990.00') TON,
                                    TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
                                    TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
                                    TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
                                    TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
                                    SUM(TON_OR) TON_OR,
                                    SUM(TOP_OR) TOP_OR,
                                    SUM(NH4_OR) NH4_OR,
                                    SUM(NO3_OR) NO3_OR,
                                    SUM(PO4_OR) PO4_OR, /* 강수량계 */
                                    TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
                                    SUM(RIN_OR) RIN_OR  
                FROM (
                 SELECT DISTINCT F1.FACT_CODE,
                        F1.BRANCH_NO,                     
                        decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) as MIN_TIME,
                        F1.ITEM_CODE,
                        F1.ITEM_NAME,
                        /* 일반항목 내부  */
                        DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
                        DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
                        DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
                        DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
                        DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
                        DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
                        DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
                        DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
                        /* 일반 항목 외부 */
                        DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
                        DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
                        DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
                        DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
                        DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
                        DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
                        DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
                        DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
                        DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
                        DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
                        /* 생물 독성 (물고기)*/
                        DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
                        DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
                        /* 생물 독성 (물벼룩1) */
                        DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
                        DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
                        DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
                        DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
                        /* 생물 독성 (물벼룩2) */
                        DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
                        DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
                        DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
                        DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
                        /* 생물 독성 (미생물) */
                        DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
                        DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
                        /* 생물 독성 (조류) */
                        DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
                        DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
                        /* 클로로필-a */
                        DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
                        DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
                        /* 휘발성 유기화합물 */
                        DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
                        DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
                        DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
                        DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
                        DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
                        DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
                        DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
                        DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
                        DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
                        DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
                        DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
                        DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
                        DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
                        DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
                        DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
                        DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
                        DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
                        DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
                        DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
                        DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
                        DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
                        DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
                        DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
                        DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
                        DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
                        DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
                        DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
                        DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
                        DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
                        DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
                        /* 중금속 */
                        DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
                        DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
                        DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
                        DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
                        DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
                        DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
                        DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
                        DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
                        /* 페놀 */
                        DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
                        DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
                        DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
                        DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
                        /* 유기물질 */
                        DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
                        DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
                        /* 영양염류 */
                        DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
                        DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
                        DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
                        DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
                        DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
                        DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
                        DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
                        DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
                        DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
                        DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
                        /* 강수량계 */
                        DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
                        DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
                        SUBSTR(F1.FACT_CODE,6,2) AS NOD
                     FROM (SELECT A.BRANCH_NO,
                                                A.MIN_TIME,
                                                A.ITEM_CODE,
                                                A.FACT_CODE,
                                                (SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = A.ITEM_CODE) ITEM_NAME,
                                                A.MIN_VL,
                                                CASE
                                                    WHEN START_ALARM_DATE IS NULL THEN
                                                    A.MIN_OR
                                                    WHEN ALARM_TYPE IN ('51', '52') THEN
                                                    '1'
                                                    WHEN ALARM_TYPE IN ('61', '62') THEN
                                                    '2'
                                                    WHEN ALARM_TYPE IN ('71', '72') THEN
                                                    '3'
                                                 END MIN_OR,
                                                B.START_ALARM_DATE
                                            FROM
                                            (
                                                    SELECT FACT_CODE, BRANCH_NO, ITEM_CODE ,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_TIME
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_TIME,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_VL
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_VL,
                                                    (
                                                            SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_OR
                                                        FROM T_MIN_DATA D
                                                        WHERE D.FACT_CODE = I.FACT_CODE
                                                          AND D.BRANCH_NO = I.BRANCH_NO
                                                          AND D.ITEM_CODE = I.ITEM_CODE
                                                          AND D.MIN_DCD = '0'
                                                            AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
                                                          AND ROWNUM = 1
                                                    ) MIN_OR
                                                            FROM T_FACT_MEASU_ITEM I
                                                            WHERE I.ITEM_USE_FLAG = 'Y'
                                             ) A, 
                                             ALARMHIST_TB B
                                             WHERE A.FACT_CODE = B.SITE_ID(+)
                                             AND A.MIN_TIME =  SUBSTR(B.START_ALARM_DATE(+), 0, 12)
                                    ) F1
                    )
                GROUP BY FACT_CODE, BRANCH_NO, NOD
              ) D11
        WHERE F11.FACT_CODE = D11.FACT_CODE(+)
          AND F11.BRANCH_NO = D11.BRANCH_NO(+)                
            AND D11.MIN_TIME IS NOT NULL
            )
ORDER BY FACT_CODE ASC, BRANCH_NO ASC
	</statement>

	<statement id="getTotalMntNorecv" parameterClass="totalMntNorecvSearchTSVO" resultClass="totalMntNorecvTSVO">
		SELECT /**/FACT_CODE_REAL FACT_CODE_REAL,
						A1.FACT_CODE FACT_CODE,
						FACT_NAME FACT_NAME,
						BRANCH_NO BRANCH_NO,
						BRANCH_NAME BRANCH_NAME,
						FACT_MGR AS FACT_MANAGER,
						FACT_TEL_NO AS FACT_TELE,
						FACT_ADDR,
						N1.MIN_TIME MIN_TIME,
						RIVER_NAME,
						SYS_KIND
		FROM ( /* 1시간 동안 수신된게 없는 놈들의 마지막 수신시간... */
				SELECT FACT_CODE,
						TO_CHAR(TO_DATE(MIN_TIME,'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24.MI.SS') MIN_TIME
				FROM
				 (SELECT A.FACT_CODE,
						 (SELECT /*+ INDEX_DESC(B IX_MIN_DATA_02) */ MIN_TIME
						FROM T_MIN_DATA B
						WHERE B.FACT_CODE = A.FACT_CODE
							AND B.MIN_DCD = '0'
							AND ROWNUM = 1 ) MIN_TIME
				FROM T_FACT_INFO A)
				WHERE 
					<![CDATA[
						MIN_TIME < TO_CHAR(SYSDATE - 60 / 24 / 60 * 3, 'YYYYMMDDHH24MI')) N1,
					]]>
				( /* 1 시간 동안 수신된게 없는... */
				SELECT F1.FACT_CODE FACT_CODE_REAL,
						D1.FACT_CODE,
						<isEqual property="sys_kind" compareValue="T">
							NVL(F1.FACT_NO, '-') AS FACT_NAME,
						</isEqual>
						<isNotEqual property="sys_kind" compareValue="T">
							AREA.REG_NAME AS FACT_NAME,
						</isNotEqual>
						D2.BRANCH_NO,
						<isEqual property="sys_kind" compareValue="A">
						D2.BRANCH_NAME BRANCH_NAME,
						</isEqual>
						<isNotEqual property="sys_kind" compareValue="A">
						D2.BRANCH_NAME||'-'||D2.BRANCH_NO BRANCH_NAME,
						</isNotEqual>
						F1.FACT_MGR,
						F1.FACT_TEL_NO,
						F1.FACT_ADDR,
						F1.RIVER_DIV,
						DECODE(SUBSTR(F1.RIVER_DIV, 3, 1),
								'1',
								'한강',
								'2',
								'낙동강',
								'3',
								'금강',
								'4',
								'영산강') AS RIVER_NAME,
						F1.SYS_KIND
				FROM T_FACT_INFO F1,
						T_FACT_BRANCH_INFO D2,
						(
						SELECT FACT_CODE, BRANCH_NO, ITEM_CODE, MIN_TIME
						FROM
							 (SELECT A.FACT_CODE,
									 A.BRANCH_NO,
									 A.ITEM_CODE,
									 (SELECT /*+ INDEX_DESC(B IX_MIN_DATA_03 ) */
											 MIN_TIME
									FROM T_MIN_DATA B
									WHERE B.ITEM_CODE = A.ITEM_CODE
										AND B.FACT_CODE = A.FACT_CODE
										AND B.BRANCH_NO = A.BRANCH_NO
										AND B.MIN_DCD = '0'
										AND MIN_TIME >=
										<![CDATA[
											(SELECT CASE
													WHEN SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3,
																		'YYYYMMDDHH24MI'),
																12,
																1) < 5 THEN
														SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3,
																	'YYYYMMDDHH24MI'),
															1,
															11) || '0'
													ELSE
														SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3,
																	'YYYYMMDDHH24MI'),
															1,
															11) || '5'
													END NOW
												FROM DUAL)
										]]>
										AND ROWNUM = 1) MIN_TIME
							FROM T_FACT_MEASU_ITEM A
							WHERE ITEM_USE_FLAG = 'Y')
						WHERE MIN_TIME IS NOT NULL
						) D1,
						T_WEATHER_AREA AREA
				 WHERE D2.FACT_CODE = D1.FACT_CODE(+)
					AND D2.BRANCH_NO = D1.BRANCH_NO(+)
					AND D2.FACT_CODE = AREA.FACT_CODE(+)
					<isEqual property="sys_kind" compareValue="U">
						AND D2.BRANCH_NO = AREA.BRANCH_NO(+)
					</isEqual>
					AND F1.FACT_CODE = D2.FACT_CODE
					AND D2.BRANCH_USE_FLAG = 'Y'
					AND F1.FACT_USE_FLAG = 'Y'
					AND F1.SYS_KIND = #sys_kind#
					AND F1.RIVER_DIV = #river_div#) A1
		 WHERE A1.FACT_CODE IS NULL
			AND A1.FACT_CODE_REAL = N1.FACT_CODE(+)
		 ORDER BY FACT_NAME, BRANCH_NO
 
	</statement>		
	
	
	<statement id="getTotalMntNorecvTMS" parameterClass="totalMntNorecvSearchTSVO" resultClass="totalMntNorecvTSVO">
	
	<![CDATA[
		SELECT fact_code as FACT_CODE_REAL, FACT_CODE, FACT_NAME, BRANCH_NO, BRANCH_NO AS BRANCH_NAME, MANAGER AS FACT_MANAGER,
TELE AS FACT_TELE, FACT_ADDR, MINTIME AS MIN_TIME, AREA AS RIVER_NAME, 'T' AS SYS_KIND  
FROM (
SELECT DO_NAME,fact_code,fact_name , DECODE(AREA_GBN, '01', '수도권', '02', '충청/강원', '03', '영남', '04', '호남') AS AREA, AREA_GBN
	   , WAST_NO as BRANCH_NO
	   , MIN_TIME  as MINTIME
             , TELE
             , MANAGER
             , FACT_ADDR             
	   , CASE WHEN BLACK > 0 THEN 'M' ELSE CASE WHEN WHITE > 0 THEN '0' ELSE CASE WHEN RED > 0 THEN '3' ELSE CASE WHEN ORANGE > 0 THEN '2' ELSE CASE WHEN YELLOW > 0 THEN '1' ELSE CASE WHEN BLUE > 0 THEN '0' ELSE '0' END END END END END END VALUE       
	FROM (
	     SELECT DO_NAME
                    , FACT_CODE
                    , FACT_NAME
                    , MAX(FACT_ADDR) AS FACT_ADDR
                    , MAX(FACT_TELE) AS TELE
                    , MAX(FACT_MANAGER)	AS MANAGER       
	          , WAST_NO
                    , area_gbn                    
	          , MAX(MIN_TIME) AS MIN_TIME
	          , NVL(SUM(DECODE(MIN_OR, NULL, 1)), 0) AS BLACK
	          , NVL(SUM(CASE WHEN MIN_ST IN ('05', '15', '06', '16' ) THEN 1 END), 0) AS WHITE
	          , CASE WHEN MAX(MIN_ST) IN ('00', '02' ) THEN NVL(SUM(DECODE(MIN_OR, '3', 1)), 0) END AS RED
	          , CASE WHEN MAX(MIN_ST) IN ('00', '02' ) THEN NVL(SUM(DECODE(MIN_OR, '2', 1)), 0) END AS ORANGE
	          , CASE WHEN MAX(MIN_ST) IN ('00', '02' ) THEN NVL(SUM(DECODE(MIN_OR, '1', 1)), 0) END AS YELLOW
	          , NVL(SUM(DECODE(MIN_OR, '0', 1)), 0) AS BLUE
	       FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
                           ,MA.FACT_ADDR
                           ,MA.FACT_MANAGER
                           ,MA.FACT_TELE
	                 , MA.WAST_NO
	                 , MA.ITEM_CODE
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , MB.MIN_TIME
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , MB.MIN_OR
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'PHY', MIN_VL) PHY
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'BOD', MIN_VL) BOD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'COD', MIN_VL) COD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'SUS', MIN_VL) SUS
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TOP', MIN_VL) TOP
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TON', MIN_VL) TON
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'FLW', MIN_VL) FLW
	                 , ma.area_gbn
                           , MA.DO_NAME
	              FROM (
	            SELECT A.FACT_CODE
                      ,C.FACT_DEPT AS FACT_MANAGER
                      ,C.FACT_TELE
                      ,C.FACT_ADDR
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
                           ,AREA.DO_NAME
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA 
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+)
	          )
	      GROUP BY FACT_CODE, fact_name, WAST_NO, STAND_TIME, area_gbn, DO_NAME
	   )) WHERE VALUE = 'M' AND AREA_GBN = #river_div#
 ]]>
	</statement>						 
					 
	<statement id="getTopDataTAKSU" parameterClass="SearchTaksuSumDataVO" resultClass="taksuSumDataVO">
		SELECT RIVER_DIV, 
				SYS_KIND,
				TO_CHAR(TO_DATE(MAX(MIN_TIME),'YYYYMMDDHH24MISS'),'YYYY/MM/DD HH24:MI') MIN_TIME, 
				SUM(NORMAL) NORMAL,
				SUM(INTEREST) INTEREST,
				SUM(CAUTION) CAUTION,
				SUM(ALERT) ALERT,
				SUM(OVER) OVER
		FROM (
					SELECT F1.FACT_CODE, 
							MIN_TIME,
							DECODE(F1.MIN_OR, '0', 1, 0) NORMAL,
							DECODE(F1.MIN_OR, '1', 1, 0) INTEREST,
							DECODE(F1.MIN_OR, '2', 1, 0) CAUTION,
							DECODE(F1.MIN_OR, '3', 1, 0) ALERT,
							DECODE(F1.MIN_OR, '4', 1, 0) OVER,
							D1.RIVER_DIV,
							D1.SYS_KIND
					FROM 
						(SELECT FACT_CODE, MAX(MIN_TIME) MIN_TIME,
								MAX(NVL(MIN_OR,0)) MIN_OR
							FROM T_MIN_DATA B
							WHERE B.MIN_DCD = '0'
							 AND B.MIN_TIME >= TO_CHAR(SYSDATE-60/24/60 * 3, 'YYYYMMDDHH24MI')
							GROUP BY FACT_CODE
						) F1, 
						T_FACT_INFO D1
					 WHERE F1.FACT_CODE = D1.FACT_CODE
						 AND D1.FACT_USE_FLAG = 'Y'
						 AND D1.SYS_KIND IN ( 'U', 'T', 'A')
						<isNotEqual prepend="AND" property="river" compareValue="all">
						AND D1.RIVER_DIV = #river#
					</isNotEqual>
					<isNotEqual prepend="AND" property="sys" compareValue="all">
						AND D1.SYS_KIND = #sys#
					</isNotEqual>
				)
		 GROUP BY RIVER_DIV, SYS_KIND, MIN_TIME
		 ORDER BY RIVER_DIV 
	</statement>

	<statement id="getWaterSysMnt_coord" parameterClass="searchTaksuPopupVO" resultClass="watersysMntCoordVO">
		SELECT
			B.FACT_CODE fact_code,
			B.BRANCH_NO branch_no,
			B.BRANCH_NAME branch_name,
			NVL(B.BRANCH_MAP_X,10) coord_x,
			NVL(B.BRANCH_MAP_Y,10) coord_y,
			F.RIVER_DIV river_div
		FROM
			T_FACT_INFO F,
			T_FACT_BRANCH_INFO B
		WHERE
			F.FACT_CODE = B.FACT_CODE
			AND F.SYS_KIND = #sys#
			AND B.BRANCH_USE_FLAG = 'Y'
	</statement>
	
	<update id="updateWaterSysMnt_coord" parameterClass="watersysMntCoordVO">
		UPDATE 
			T_FACT_BRANCH_INFO
		SET
			BRANCH_MAP_X = #coord_x#,
			BRANCH_MAP_Y = #coord_y#
		WHERE
			FACT_CODE = #fact_code#
			AND BRANCH_NO = #branch_no#
	</update>

	<statement id="getWATERSYSMNT" parameterClass="searchTaksuPopupVO" resultClass="taksuPopupVO">
		SELECT 
			F11.FACT_CODE,
				F11.FACT_NAME,
				F11.BRANCH_NO,
				F11.BRANCH_NAME,
				F11.RIVER_DIV,
				F11.RIVER_NAME,
				F11.SYS_KIND,
				F11.SYS_KIND_NAME,
				DECODE(D11.FACT_CODE, NULL, 'N', 'Y') IS_RECV,
				D11.MIN_TIME,
				D11.NOD,
				D11.CON,
				D11.TUR,
				D11.DOW,
				D11.TMP,
				D11.PHY,
				D11.CON_OR,
				D11.TUR_OR,
				D11.DOW_OR,
				D11.TMP_OR,
				D11.PHY_OR, 
				D11.IMP,
				D11.RIM,
				D11.LIM,
				D11.LTX,
				D11.RTX,
				D11.TOX,
				D11.EVN,
				D11.TOF,
				D11.VOC1,
				D11.VOC2,
				D11.VOC3,
				D11.VOC4,
				D11.VOC5,
				D11.VOC6,
				D11.VOC7,
				D11.VOC8,
				D11.VOC9,
				D11.VOC10,
				D11.VOC11,
				D11.VOC12,
				D11.VOC13,
				D11.VOC14,
				D11.VOC15,
				D11.CAD,
				D11.PLU,
				D11.COP,
				D11.ZIN,
				D11.PHE,
				D11.PHL,
				D11.TOC,
				D11.TON,
				D11.TOP,
				D11.NH4,
				D11.NO3,
				D11.PO4,
				D11.RIN,
				D11.IMP_OR,
				D11.RIM_OR,
				D11.LIM_OR,
				D11.LTX_OR,
				D11.RTX_OR,
				D11.TOX_OR,
				D11.EVN_OR,
				D11.TOF_OR,
				D11.VOC1_OR,
				D11.VOC2_OR,
				D11.VOC3_OR,
				D11.VOC4_OR,
				D11.VOC5_OR,
				D11.VOC6_OR,
				D11.VOC7_OR,
				D11.VOC8_OR,
				D11.VOC9_OR,
				D11.VOC10_OR,
				D11.VOC11_OR,
				D11.VOC12_OR,
				D11.VOC13_OR,
				D11.VOC14_OR,
				D11.VOC15_OR,
				D11.CAD_OR,
				D11.PLU_OR,
				D11.COP_OR,
				D11.ZIN_OR,
				D11.PHE_OR,
				D11.PHL_OR,
				D11.TOC_OR,
				D11.TON_OR,
				D11.TOP_OR,
				D11.NH4_OR,
				D11.NO3_OR,
				D11.PO4_OR,
				D11.RIN_OR
		 FROM (
				SELECT 
						F1.FACT_CODE, 
						<isEqual property="sys" compareValue="T">
							NVL(F1.FACT_NO,'-') AS FACT_NAME,
						</isEqual>
						<isNotEqual property="sys" compareValue="T">
							AREA.REG_NAME AS FACT_NAME,
						</isNotEqual>
						D1.BRANCH_NO,
						<isEqual property="sys" compareValue="A">
						D1.BRANCH_NAME BRANCH_NAME,
						</isEqual>
						<isNotEqual property="sys" compareValue="A">
						D1.BRANCH_NAME||'-'||D1.BRANCH_NO BRANCH_NAME,
						</isNotEqual>
					F1.RIVER_DIV, 
					(SELECT COMMON_CODE_NAME FROM T_COMMON_CODE 
						WHERE F1.RIVER_DIV = COMMON_CODE
						AND COMMON_CODE_CATEGORY = '01') RIVER_NAME,
					F1.SYS_KIND,
					(
						SELECT SYS_KIND_NAME 
						FROM T_SYS_KIND 
						WHERE SYS_KIND = F1.SYS_KIND
					) SYS_KIND_NAME
				 FROM 
						T_FACT_INFO F1, 
						T_FACT_BRANCH_INFO D1,
						T_WEATHER_AREA AREA
				WHERE 
					F1.FACT_CODE = D1.FACT_CODE
					AND D1.FACT_CODE = AREA.FACT_CODE(+)
					<isEqual property="sys" compareValue="U">
						AND D1.BRANCH_NO = AREA.BRANCH_NO(+)
					</isEqual>
				AND D1.BRANCH_USE_FLAG = 'Y'
				AND F1.FACT_USE_FLAG = 'Y'
				 <isNotEqual prepend="AND" property="river" compareValue="all">
					F1.RIVER_DIV = #river#
				 </isNotEqual>
				 <isNotEqual prepend="AND" property="sys" compareValue="all">
					SYS_KIND = #sys#
				 </isNotEqual>
			) F11,
			(
				 SELECT FACT_CODE,
									BRANCH_NO,
									MAX(MIN_TIME) as MIN_TIME,
									NOD, /* 일반 항목 */
									TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
									TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
									TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
									TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
									TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
									SUM(TUR_OR) TUR_OR, 
									SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
									SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
									SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
									SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
									TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
									SUM(IMP_OR) IMP_OR, /* 생물독성(물벼룩1) */
									TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
									TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
									SUM(LIM_OR) LIM_OR,
									SUM(RIM_OR) RIM_OR, /* 생물독성(물벼룩2) */
									TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
									TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
									SUM(LTX_OR) LTX_OR,
									SUM(RTX_OR) RTX_OR, /* 생물독성(미생물) */
									TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
									SUM(TOX_OR) TOX_OR, /* 생물독성(조류) */
									TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
									SUM(EVN_OR) EVN_OR, /* 클로로필-a */
									TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
									SUM(TOF_OR) TOF_OR, /* 휘발성 유기화합물 */
									TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
									TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
									TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
									TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
									TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
									TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
									TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
									TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
									TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
									TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
									TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
									TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
									TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
									TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
									TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
									SUM(VOC1_OR) VOC1_OR,
									SUM(VOC2_OR) VOC2_OR,
									SUM(VOC3_OR) VOC3_OR,
									SUM(VOC4_OR) VOC4_OR,
									SUM(VOC5_OR) VOC5_OR,
									SUM(VOC6_OR) VOC6_OR,
									SUM(VOC7_OR) VOC7_OR,
									SUM(VOC8_OR) VOC8_OR,
									SUM(VOC9_OR) VOC9_OR,
									SUM(VOC10_OR) VOC10_OR,
									SUM(VOC11_OR) VOC11_OR,
									SUM(VOC12_OR) VOC12_OR,
									SUM(VOC13_OR) VOC13_OR,
									SUM(VOC14_OR) VOC14_OR,
									SUM(VOC15_OR) VOC15_OR, /* 중금속 */
									TO_CHAR(SUM(COP), 'FM999,990.00') COP,
									TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
									TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
									TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
									SUM(COP_OR) COP_OR,
									SUM(PLU_OR) PLU_OR,
									SUM(ZIN_OR) ZIN_OR,
									SUM(CAD_OR) CAD_OR, /* 페놀 */
									TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
									TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
									SUM(PHE_OR) PHE_OR,
									SUM(PHL_OR) PHL_OR, /* 유기물질 */
									TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
									SUM(TOC_OR) TOC_OR, /* 영양염류 */
									TO_CHAR(SUM(TON), 'FM999,990.00') TON,
									TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
									TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
									TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
									TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
									SUM(TON_OR) TON_OR,
									SUM(TOP_OR) TOP_OR,
									SUM(NH4_OR) NH4_OR,
									SUM(NO3_OR) NO3_OR,
									SUM(PO4_OR) PO4_OR, /* 강수량계 */
									TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
									SUM(RIN_OR) RIN_OR	
				FROM (
				 SELECT DISTINCT F1.FACT_CODE,
						F1.BRANCH_NO, 
					
						decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) as MIN_TIME,
						F1.ITEM_CODE,
						F1.ITEM_NAME,
						/* 일반항목 내부  */
						DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
						DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
						DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
						DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
						DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
						DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
						DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
						DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
						/* 일반 항목 외부 */
						DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
						DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
						DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
						DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
						DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
						DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
						DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
						DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
						DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
						DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
						/* 생물 독성 (물고기)*/
						DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
						DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
						/* 생물 독성 (물벼룩1) */
						DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
						DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
						DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
						DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
						/* 생물 독성 (물벼룩2) */
						DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
						DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
						DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
						DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
						/* 생물 독성 (미생물) */
						DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
						DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
						/* 생물 독성 (조류) */
						DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
						DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
						/* 클로로필-a */
						DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
						DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
						/* 휘발성 유기화합물 */
						DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
						DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
						DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
						DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
						DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
						DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
						DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
						DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
						DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
						DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
						DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
						DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
						DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
						DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
						DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
						DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
						DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
						DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
						DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
						DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
						DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
						DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
						DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
						DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
						DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
						DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
						DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
						DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
						DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
						DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
						/* 중금속 */
						DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
						DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
						DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
						DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
						DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
						DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
						DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
						DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
						/* 페놀 */
						DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
						DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
						DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
						DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
						/* 유기물질 */
						DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
						DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
						/* 영양염류 */
						DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
						DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
						DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
						DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
						DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
						DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
						DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
						DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
						DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
						DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
						/* 강수량계 */
						DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
						DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
						SUBSTR(F1.FACT_CODE,6,2) AS NOD
					 FROM (SELECT A.BRANCH_NO,
												A.MIN_TIME,
												A.ITEM_CODE,
												A.FACT_CODE,
												(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = A.ITEM_CODE) ITEM_NAME,
												A.MIN_VL,
												CASE
													WHEN START_ALARM_DATE IS NULL THEN
													A.MIN_OR
													WHEN ALARM_TYPE IN ('51', '52') THEN
													'1'
													WHEN ALARM_TYPE IN ('61', '62') THEN
													'2'
													WHEN ALARM_TYPE IN ('71', '72') THEN
													'3'
												 END MIN_OR,
												B.START_ALARM_DATE
											FROM
											(
													SELECT FACT_CODE, BRANCH_NO, ITEM_CODE ,
													(
															SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_TIME
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
														  AND D.BRANCH_NO = I.BRANCH_NO
														  AND D.ITEM_CODE = I.ITEM_CODE
														  AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
														  AND ROWNUM = 1
													) MIN_TIME,
													(
															SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_VL
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
														  AND D.BRANCH_NO = I.BRANCH_NO
														  AND D.ITEM_CODE = I.ITEM_CODE
														  AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
														  AND ROWNUM = 1
													) MIN_VL,
													(
															SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_OR
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
														  AND D.BRANCH_NO = I.BRANCH_NO
														  AND D.ITEM_CODE = I.ITEM_CODE
														  AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
														  AND ROWNUM = 1
													) MIN_OR
															FROM T_FACT_MEASU_ITEM I
															WHERE I.ITEM_USE_FLAG = 'Y'
											 ) A, 
											 ALARMHIST_TB B
											 WHERE A.FACT_CODE = B.SITE_ID(+)
											 AND A.MIN_TIME =  SUBSTR(B.START_ALARM_DATE(+), 0, 12)
									) F1
					)
				GROUP BY FACT_CODE, BRANCH_NO, NOD
			  ) D11
		WHERE F11.FACT_CODE = D11.FACT_CODE(+)
		  AND F11.BRANCH_NO = D11.BRANCH_NO(+)
			<isNotEqual prepend="AND" property="river" compareValue="all">
				RIVER_DIV = #river#
			</isNotEqual>
			<isNotEqual prepend="AND" property="sys" compareValue="all">
				SYS_KIND = #sys#
			</isNotEqual>		 
			AND D11.MIN_TIME IS NOT NULL
		ORDER BY FACT_NAME, BRANCH_NO
	</statement>
	
	<statement id="getAllDamList" parameterClass="searchTaksuPopupVO" resultClass="damViewVO">
			SELECT ID, 
			       DECODE(A.RIVER_DIV, 'R01', '한강', 'R02', '낙동강', 'R03', '금강', 'R04', '영산강', '', '정보없음' ) RIVER_DIV , 
			       NVL(A.RIVER_NM,'정보없음') RIVER_NM , 
			       NVL(A.NAME,'정보없음') NAME , 
			       NVL(A.MANAGE,'정보없음') MANAGE , 
			       NVL(A.MANAGE_PHONE,'정보없음') MANAGE_PHONE , 
			       (SELECT TO_CHAR(SWL/100, 'FM999,990.00') FROM T_DMHR WHERE DMOBSCD = B.DMOBSCD AND YMDH = B.YMDH) SWL,
                   (SELECT TO_CHAR(OTF, 'FM999,990.00') FROM T_DMHR WHERE DMOBSCD = B.DMOBSCD AND YMDH = B.YMDH) Sfw,
                   NVL(A.ADDRESS,'정보없음') ADDRESS 
			  FROM T_DAM A,
              (
                SELECT t.DMOBSCD, max(t.YMDH) YMDH
                FROM T_DMHR t 
              	WHERE 1=1
                AND t.DMOBSCD IN
				<iterate property="listData" open="(" close=")" conjunction=",">
					#listData[].dId#
			 	</iterate>
                GROUP BY t.DMOBSCD
              ) B
			 WHERE A.USE_YN ='Y'
			 AND A.ID=B.DMOBSCD
			 ORDER BY A.NAME ASC
	</statement>
	
	<select id="getAllSearchWareHouseList" parameterClass="searchTaksuPopupVO" resultClass="wareHouseSearchVO">
	SELECT A.WH_CODE AS whCode, 
		       A.WH_NAME AS whName, 
		       A.RIVER_DIV AS riverDiv, 
		       A.ADMIN_DEPT AS adminDept, 
		       A.ADMIN_DEPT_SUB AS adminDeptSub, 
		       A.ADMIN_NAME AS adminCode, 
		       A.ADMIN_TELNO AS adminTelno, 
		       A.USE_FLAG AS useFlag, 
		       A.LON AS lon, 
		       A.LAT AS lat, 
		       A.CTY_CODE AS ctyCode, 
		       A.ADDR AS addr, 
		       A.ADMIN_NAME AS adminId, 
		       A.ADMIN_NAME_SUB AS adminIdSub, 
		       (SELECT CTY_NAME 
		         FROM T_AREA 
		        WHERE CTY_CODE = A.CTY_CODE 
		       ) AS ctyName, 
		       (SELECT RIVER_NAME 
		         FROM T_RIVER_INFO 
		        WHERE RIVER_DIV = A.RIVER_DIV 
		       ) AS riverName, 
		       (SELECT MEMBER_NAME 
		         FROM T_MEMBER 
		        WHERE MEMBER_ID = A.ADMIN_NAME
		       ) AS adminName, 
		       (SELECT MEMBER_NAME 
		         FROM T_MEMBER 
		        WHERE MEMBER_ID = A.ADMIN_NAME_SUB
		       ) AS adminNameSub, 
		       (SELECT DEPT_NAME 
		         FROM T_DEPT_INFO 
		        WHERE DEPT_CODE = TO_NUMBER(B.DEPT_CODE)
		       ) AS adminDeptName, 
		       (SELECT DEPT_NAME 
		         FROM T_DEPT_INFO 
		        WHERE DEPT_CODE = TO_NUMBER(A.ADMIN_DEPT_SUB)
		       ) AS adminDeptNameSub 
		  FROM T_WAREHOUSE A, 
		       T_MEMBER B 
		 WHERE 1=1 
		       AND A.ADMIN_NAME = B.MEMBER_ID(+)  
		       AND A.WH_CODE IN
		       <iterate property="listData" open="(" close=")" conjunction=",">
					#listData[].whCode#
				</iterate>	
		       
		ORDER BY WH_CODE DESC
	</select>
	
	<!-- 보 10분 자료 DATA -->
	<select id="getAllDetailViewBO" resultClass="boSearchVO" parameterClass="searchTaksuPopupVO">
		SELECT M.boObsCd, 
			       Y.obsNm, 
			       Y.sugye, 
			       Y.recvDay, 
			       Y.recvTime, 
			       Y.swl, 
			       Y.owl, 
			       Y.sfw, 
			       Y.ecpc, 
			       Y.inf, 
			       Y.otf 
			  FROM 
			       (SELECT BOOBSCD AS boObsCd, 
			              MAX(YMDHM) AS ymdhm
			         FROM T_BOMST 
			        WHERE BOOBSCD IN 
			        <iterate property="listData" open="(" close=")" conjunction=",">
						#listData[].boobscd#
					</iterate>	
			        GROUP BY BOOBSCD 
			       ) M, 
			       (SELECT A.BOOBSCD AS boObsCd, 
			              A.OBSNM AS obsNm, 
			              A.RIVER_DIV AS sugye, 
			              SUBSTR(B.YMDHM,0,4)||'/' || SUBSTR(B.YMDHM,5,2) ||'/'|| SUBSTR(B.YMDHM,7,2) AS recvDay, 
			              SUBSTR(B.YMDHM,9,2)||':' || SUBSTR(B.YMDHM,11,2) AS recvTime, 
			              B.SWL AS swl, 
			              B.OWL AS owl, 
			              B.SFW AS sfw, 
			              B.ECPC AS ecpc, 
			              B.INF AS inf, 
			              B.TOTOTF AS otf, 
			              B.YMDHM AS ymdhm 
			         FROM T_BOOBSIF A, 
			              T_BOMST B 
			        WHERE A.BOOBSCD = B.BOOBSCD(+) 
			              AND B.YMDHM BETWEEN #toDate# AND #fromDate#
			       ) Y 
			 WHERE M.boObsCd = Y.boObsCd 
			       AND M.ymdhm = Y.ymdhm
	</select>
	
	<statement id="getAllDetailViewDISCHARGE"  parameterClass="searchTaksuPopupVO" resultClass="detailViewVO">
		SELECT A.FACTCODE, 
			       T.FACTNAME, 
			       A.BRANCHNO, 
			       T.BRANCH_NAME, 
			       A.MINTIME, 
			       T.STRDATE||' '||T.STRTIME AS STRDATE, 
			       T.STRTIME, 
			       T.MINDUMP, 
			       NVL(T.PHY, '-') AS PHY, 
			       NVL(T.BOD, '-') AS BOD, 
			       NVL(T.COD, '-') AS COD,
			       NVL(T.SUS, '-') AS SUS,
			       NVL(T.TOP, '-') AS TOP,
			       NVL(T.TON, '-') AS TON, 
			       NVL(T.FLW, '-') AS FLW,
			       T.PHY_OR, 
			       T.BOD_OR, 
			       T.COD_OR, 
			       T.SUS_OR, 
			       T.TOP_OR, 
			       T.TON_OR, 
			       T.FLW_OR, 
			       T.MINST, 
			       T.MINAB, 
			       T.RIVER_DIV, 
			       T.RIVER_NAME, 
			       T.SYS_KIND, 
			       T.SYS_KIND_NAME 
			  FROM 
			       (SELECT A.FACT_CODE AS FACTCODE, 
			              A.WAST_NO AS BRANCHNO, 
			              MAX(A.MIN_TIME) AS MINTIME 
			         FROM WTMSC_MIN_REAL@TMS A, 
			              WTMSC_ITEM@TMS B, 
			              WTMSC_FACT@TMS C, 
			              WTMSC_FACT_WAST@TMS D 
			        WHERE A.ITEM_CODE = B.ITEM_CODE 
			              AND A.FACT_CODE = C.FACT_CODE 
			              AND C.FACT_CODE = D.FACT_CODE 
			              AND A.WAST_NO = D.WAST_NO 
			              AND D.WAST_USED = 'Y' 
			              AND C.FACT_USED = 'Y' 
			              AND A.MIN_TIME BETWEEN #toDate# AND #fromDate#
			              AND
							<iterate property="listData" open="(" close=")" conjunction="OR">
								(A.FACT_CODE=#listData[].factCode# AND A.WAST_NO=#listData[].branchNo#)
							</iterate>	
			        GROUP BY A.FACT_CODE, 
			              A.WAST_NO 
			       ) A, 
			       (SELECT FACTCODE, 
			              FACTNAME, 
			              BRANCHNO, 
			              BRANCH_NAME, 
			              MINTIME, 
			              STRDATE, 
			              STRTIME, 
			              MINDUMP, 
			              TO_CHAR(SUM(PHY), 'FM999,990.00') PHY, 
			              TO_CHAR(SUM(BOD), 'FM999,990.00') BOD, 
			              TO_CHAR(SUM(COD), 'FM999,990.00') COD, 
			              TO_CHAR(SUM(SUS), 'FM999,990.00') SUS, 
			              TO_CHAR(SUM(TOP), 'FM999,990.00') TOP, 
			              TO_CHAR(SUM(TON), 'FM999,990.00') TON, 
			              TO_CHAR(SUM(FLW), 'FM999,990') FLW, 
			              SUM(PHY_OR) PHY_OR, 
			              SUM(BOD_OR) BOD_OR, 
			              SUM(COD_OR) COD_OR, 
			              SUM(SUS_OR) SUS_OR, 
			              SUM(TOP_OR) TOP_OR, 
			              SUM(TON_OR) TON_OR, 
			              SUM(FLW_OR) FLW_OR, 
			              MAX(MINST) MINST, 
			              MAX(MINAB) MINAB, 
			              RIVER_DIV, 
			              RIVER_NAME, 
			              SYS_KIND, 
			              SYS_KIND_NAME 
			         FROM 
			              (SELECT A.ITEM_CODE AS ITEMCODE, 
			                     B.ITEM_NAME AS ITEMNAME, 
			                     A.FACT_CODE AS FACTCODE, 
			                     C.FACT_NAME AS FACTNAME, 
			                     A.WAST_NO AS BRANCHNO, 
			                     A.WAST_NO BRANCH_NAME, 
			                     A.MIN_TIME AS MINTIME , 
			                     TO_CHAR(TO_DATE(A.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE, 
			                     TO_CHAR(TO_DATE(A.MIN_TIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME, 
			                     A.MIN_DUMP AS MINDUMP , 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'PHY', MIN_VL) PHY, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'BOD', MIN_VL) BOD, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'COD', MIN_VL) COD, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3),'SUS', MIN_VL) SUS, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TOP', MIN_VL) TOP, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3),'TON', MIN_VL) TON, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'FLW', MIN_VL) FLW, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'PHY', MIN_OR) PHY_OR, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'BOD', MIN_OR) BOD_OR, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'COD', MIN_OR) COD_OR, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'SUS', MIN_OR) SUS_OR, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TOP', MIN_OR) TOP_OR, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TON', MIN_OR) TON_OR, 
			                     DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'FLW', MIN_OR) FLW_OR, 
			                     A.MIN_ST AS MINST , 
			                     A.MIN_AB AS MINAB , 
			                     'R'||AREA.AREA_GBN AS RIVER_DIV, 
			                     DECODE(AREA.AREA_GBN,'01','수도권','02','충청/강원','03','영남','04','호남') AS RIVER_NAME, 
			                     'W' SYS_KIND, 
			                     '수질TMS' SYS_KIND_NAME 
			                FROM WTMSC_MIN_REAL@TMS A, 
			                     WTMSC_ITEM@TMS B, 
			                     WTMSC_FACT@TMS C, 
			                     WTMSC_FACT_WAST@TMS D, 
			                     WTMSC_AREA@TMS AREA 
			               WHERE A.ITEM_CODE = B.ITEM_CODE 
			                     AND A.FACT_CODE = C.FACT_CODE 
			                     AND C.FACT_CODE = D.FACT_CODE 
			                     AND A.WAST_NO = D.WAST_NO 
			                     AND D.WAST_USED = 'Y' 
			                     AND C.FACT_USED = 'Y' 
			                     AND AREA.CTY_CODE = C.CTY_CODE
			                     AND A.MIN_TIME BETWEEN #toDate# AND #fromDate#
			                     AND 
			                     <iterate property="listData" open="(" close=")" conjunction="OR">
									(A.FACT_CODE=#listData[].factCode# AND A.WAST_NO=#listData[].branchNo#)
								</iterate>	
			            ORDER BY A.FACT_CODE ASC 
			              ) 
			        GROUP BY FACTCODE, 
			              FACTNAME, 
			              BRANCHNO, 
			              BRANCH_NAME, 
			              STRDATE, 
			              STRTIME, 
			              MINTIME, 
			              STRDATE, 
			              STRTIME, 
			              MINDUMP, 
			              RIVER_DIV, 
			              RIVER_NAME, 
			              SYS_KIND, 
			              SYS_KIND_NAME 
			     ORDER BY STRDATE DESC, 
			              STRTIME DESC, 
			              FACTNAME ASC, 
			              BRANCHNO ASC 
			       ) T 
			 WHERE A.FACTCODE = T.FACTCODE 
			       AND A.BRANCHNO = T.BRANCHNO 
			       AND A.MINTIME = T.MINTIME 
			ORDER BY A.FACTCODE ASC, 
			       A.BRANCHNO ASC, 
			       A.MINTIME ASC  
	</statement>
	
	<statement id="getSelectWATERSYSMNT" parameterClass="searchTaksuPopupVO" resultClass="taksuPopupVO">
		SELECT 
			F11.FACT_CODE,
				F11.FACT_NAME,
				F11.BRANCH_NO,
				F11.BRANCH_NAME,
				F11.RIVER_DIV,
				F11.RIVER_NAME,
				F11.SYS_KIND,
				F11.SYS_KIND_NAME,
				<isEqual property="sys" compareValue="A">
					'OK' DEVICE_ST,
					'정상' STATUS_NAME,
				</isEqual>
				<isEqual property="sys" compareValue="U">
					F11.DEVICE_ST,
					NVL(DECODE(DEVICE_ST, 'OK', '정상', (SELECT STATUS_NAME FROM T_DEFINITE_MAPPING_CODE WHERE STATUS_CODE = F11.DEVICE_ST)), '가동중지') STATUS_NAME,
				</isEqual>					
				DECODE(D11.FACT_CODE, NULL, 'N', 'Y') IS_RECV,
				D11.MIN_TIME,
				D11.NOD,
				D11.CON,
				D11.TUR,
				D11.DOW,
				D11.TMP,
				D11.PHY,
				D11.CON_OR,
				D11.TUR_OR,
				D11.DOW_OR,
				D11.TMP_OR,
				D11.PHY_OR, 
				D11.IMP,
				D11.RIM,
				D11.LIM,
				D11.LTX,
				D11.RTX,
				D11.TOX,
				D11.EVN,
				D11.TOF,
				D11.VOC1,
				D11.VOC2,
				D11.VOC3,
				D11.VOC4,
				D11.VOC5,
				D11.VOC6,
				D11.VOC7,
				D11.VOC8,
				D11.VOC9,
				D11.VOC10,
				D11.VOC11,
				D11.VOC12,
				D11.VOC13,
				D11.VOC14,
				D11.VOC15,
				D11.CAD,
				D11.PLU,
				D11.COP,
				D11.ZIN,
				D11.PHE,
				D11.PHL,
				D11.TOC,
				D11.TON,
				D11.TOP,
				D11.NH4,
				D11.NO3,
				D11.PO4,
				D11.RIN,
				D11.IMP_OR,
				D11.RIM_OR,
				D11.LIM_OR,
				D11.LTX_OR,
				D11.RTX_OR,
				D11.TOX_OR,
				D11.EVN_OR,
				D11.TOF_OR,
				D11.VOC1_OR,
				D11.VOC2_OR,
				D11.VOC3_OR,
				D11.VOC4_OR,
				D11.VOC5_OR,
				D11.VOC6_OR,
				D11.VOC7_OR,
				D11.VOC8_OR,
				D11.VOC9_OR,
				D11.VOC10_OR,
				D11.VOC11_OR,
				D11.VOC12_OR,
				D11.VOC13_OR,
				D11.VOC14_OR,
				D11.VOC15_OR,
				D11.CAD_OR,
				D11.PLU_OR,
				D11.COP_OR,
				D11.ZIN_OR,
				D11.PHE_OR,
				D11.PHL_OR,
				D11.TOC_OR,
				D11.TON_OR,
				D11.TOP_OR,
				D11.NH4_OR,
				D11.NO3_OR,
				D11.PO4_OR,
				D11.RIN_OR
		 FROM (
				SELECT 
						F1.FACT_CODE, 
						<isEqual property="sys" compareValue="T">
							NVL(F1.FACT_NO,'-') AS FACT_NAME,
						</isEqual>
						<isNotEqual property="sys" compareValue="T">
							AREA.REG_NAME AS FACT_NAME,
						</isNotEqual>
						D1.BRANCH_NO,
						<isEqual property="sys" compareValue="A">
						D1.BRANCH_NAME BRANCH_NAME,
						</isEqual>
						<isNotEqual property="sys" compareValue="A">
						D1.BRANCH_NAME||'-'||D1.BRANCH_NO BRANCH_NAME,
						</isNotEqual>
					F1.RIVER_DIV, 
					(SELECT COMMON_CODE_NAME FROM T_COMMON_CODE 
						WHERE F1.RIVER_DIV = COMMON_CODE
						AND COMMON_CODE_CATEGORY = '01') RIVER_NAME,
					F1.SYS_KIND,
					(
						SELECT SYS_KIND_NAME 
						FROM T_SYS_KIND 
						WHERE SYS_KIND = F1.SYS_KIND
					) SYS_KIND_NAME,
					D1.DEVICE_ST
				 FROM 
						T_FACT_INFO F1, 
						T_FACT_BRANCH_INFO D1,
						T_WEATHER_AREA AREA
				WHERE 
					F1.FACT_CODE = D1.FACT_CODE
					AND D1.FACT_CODE = AREA.FACT_CODE(+)
					<isEqual property="sys" compareValue="U">
						AND D1.BRANCH_NO = AREA.BRANCH_NO(+)
					</isEqual>
				AND D1.BRANCH_USE_FLAG = 'Y'
				AND F1.FACT_USE_FLAG = 'Y'				 
				AND
				<iterate property="listData" open="(" close=")" conjunction="OR">
					(D1.FACT_CODE=#listData[].factCode# AND D1.BRANCH_NO=#listData[].branchNo#)
				</iterate>				 
			) F11,
			(
				 SELECT FACT_CODE,
									BRANCH_NO,
									MAX(MIN_TIME) as MIN_TIME,									
									NOD, /* 일반 항목 */
									TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
									TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
									TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
									TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
									TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
									SUM(TUR_OR) TUR_OR, 
									SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
									SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
									SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
									SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
									TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
									SUM(IMP_OR) IMP_OR, /* 생물독성(물벼룩1) */
									TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
									TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
									SUM(LIM_OR) LIM_OR,
									SUM(RIM_OR) RIM_OR, /* 생물독성(물벼룩2) */
									TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
									TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
									SUM(LTX_OR) LTX_OR,
									SUM(RTX_OR) RTX_OR, /* 생물독성(미생물) */
									TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
									SUM(TOX_OR) TOX_OR, /* 생물독성(조류) */
									TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
									SUM(EVN_OR) EVN_OR, /* 클로로필-a */
									TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
									SUM(TOF_OR) TOF_OR, /* 휘발성 유기화합물 */
									TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
									TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
									TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
									TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
									TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
									TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
									TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
									TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
									TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
									TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
									TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
									TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
									TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
									TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
									TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
									SUM(VOC1_OR) VOC1_OR,
									SUM(VOC2_OR) VOC2_OR,
									SUM(VOC3_OR) VOC3_OR,
									SUM(VOC4_OR) VOC4_OR,
									SUM(VOC5_OR) VOC5_OR,
									SUM(VOC6_OR) VOC6_OR,
									SUM(VOC7_OR) VOC7_OR,
									SUM(VOC8_OR) VOC8_OR,
									SUM(VOC9_OR) VOC9_OR,
									SUM(VOC10_OR) VOC10_OR,
									SUM(VOC11_OR) VOC11_OR,
									SUM(VOC12_OR) VOC12_OR,
									SUM(VOC13_OR) VOC13_OR,
									SUM(VOC14_OR) VOC14_OR,
									SUM(VOC15_OR) VOC15_OR, /* 중금속 */
									TO_CHAR(SUM(COP), 'FM999,990.00') COP,
									TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
									TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
									TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
									SUM(COP_OR) COP_OR,
									SUM(PLU_OR) PLU_OR,
									SUM(ZIN_OR) ZIN_OR,
									SUM(CAD_OR) CAD_OR, /* 페놀 */
									TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
									TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
									SUM(PHE_OR) PHE_OR,
									SUM(PHL_OR) PHL_OR, /* 유기물질 */
									TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
									SUM(TOC_OR) TOC_OR, /* 영양염류 */
									TO_CHAR(SUM(TON), 'FM999,990.00') TON,
									TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
									TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
									TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
									TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
									SUM(TON_OR) TON_OR,
									SUM(TOP_OR) TOP_OR,
									SUM(NH4_OR) NH4_OR,
									SUM(NO3_OR) NO3_OR,
									SUM(PO4_OR) PO4_OR, /* 강수량계 */
									TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
									SUM(RIN_OR) RIN_OR	
				FROM (
				 SELECT DISTINCT F1.FACT_CODE,
						F1.BRANCH_NO,										
						decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) as MIN_TIME,
						F1.ITEM_CODE,
						F1.ITEM_NAME,
						/* 일반항목 내부  */
						DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
						DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
						DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
						DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
						DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
						DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
						DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
						DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
						/* 일반 항목 외부 */
						DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
						DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
						DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
						DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
						DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
						DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
						DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
						DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
						DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
						DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
						/* 생물 독성 (물고기)*/
						DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
						DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
						/* 생물 독성 (물벼룩1) */
						DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
						DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
						DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
						DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
						/* 생물 독성 (물벼룩2) */
						DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
						DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
						DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
						DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
						/* 생물 독성 (미생물) */
						DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
						DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
						/* 생물 독성 (조류) */
						DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
						DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
						/* 클로로필-a */
						DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
						DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
						/* 휘발성 유기화합물 */
						DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
						DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
						DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
						DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
						DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
						DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
						DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
						DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
						DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
						DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
						DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
						DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
						DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
						DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
						DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
						DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
						DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
						DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
						DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
						DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
						DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
						DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
						DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
						DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
						DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
						DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
						DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
						DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
						DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
						DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
						/* 중금속 */
						DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
						DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
						DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
						DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
						DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
						DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
						DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
						DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
						/* 페놀 */
						DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
						DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
						DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
						DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
						/* 유기물질 */
						DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
						DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
						/* 영양염류 */
						DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
						DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
						DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
						DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
						DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
						DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
						DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
						DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
						DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
						DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
						/* 강수량계 */
						DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
						DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
						SUBSTR(F1.FACT_CODE,6,2) AS NOD
					 FROM (SELECT A.BRANCH_NO,					 							
												A.MIN_TIME,
												A.ITEM_CODE,
												A.FACT_CODE,
												(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = A.ITEM_CODE) ITEM_NAME,
												A.MIN_VL,
												CASE
													WHEN START_ALARM_DATE IS NULL THEN
													A.MIN_OR
													WHEN ALARM_TYPE IN ('51', '52') THEN
													'1'
													WHEN ALARM_TYPE IN ('61', '62') THEN
													'2'
													WHEN ALARM_TYPE IN ('71', '72') THEN
													'3'
												 END MIN_OR,
												B.START_ALARM_DATE
											FROM
											(
													SELECT FACT_CODE, BRANCH_NO, ITEM_CODE ,
													(
															SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_TIME
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
														  AND D.BRANCH_NO = I.BRANCH_NO
														  AND D.ITEM_CODE = I.ITEM_CODE
														  AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
														  AND ROWNUM = 1
													) MIN_TIME,
													(
															SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_VL
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
														  AND D.BRANCH_NO = I.BRANCH_NO
														  AND D.ITEM_CODE = I.ITEM_CODE
														  AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
														  AND ROWNUM = 1
													) MIN_VL,													
													(
															SELECT /*+ INDEX_DESC(D IX_MIN_DATA_03) */MIN_OR
														FROM T_MIN_DATA D
														WHERE D.FACT_CODE = I.FACT_CODE
														  AND D.BRANCH_NO = I.BRANCH_NO
														  AND D.ITEM_CODE = I.ITEM_CODE
														  AND D.MIN_DCD = '0'
															AND D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
														  AND ROWNUM = 1
													) MIN_OR
															FROM T_FACT_MEASU_ITEM I
															WHERE I.ITEM_USE_FLAG = 'Y'
											 ) A, 
											 ALARMHIST_TB B
											 WHERE A.FACT_CODE = B.SITE_ID(+)
											 AND A.MIN_TIME =  SUBSTR(B.START_ALARM_DATE(+), 0, 12)
									) F1
					)
				GROUP BY FACT_CODE, BRANCH_NO,NOD
			  ) D11
		WHERE F11.FACT_CODE = D11.FACT_CODE(+)
		  AND F11.BRANCH_NO = D11.BRANCH_NO(+)
			AND D11.MIN_TIME IS NOT NULL
		ORDER BY FACT_CODE ASC, BRANCH_NO ASC
	</statement>
	
	<statement id="getDetailRIVERMAIN"  parameterClass="searchTaksuMainVO" resultClass="taksuMainVO">
			SELECT F1.FACT_CODE,
						SUBSTR(D1.FACT_NAME, 4, 2) FACT_NAME,
						F1.BRANCH_NO,
						<isEqual property="sys" compareValue="A">
						BRANCH_NAME BRANCH_NAME,
						</isEqual>
						<isNotEqual property="sys" compareValue="A">
						BRANCH_NAME||'-'||F1.BRANCH_NO BRANCH_NAME,
						</isNotEqual>
						BRANCH_NAME||'-'||F1.BRANCH_NO BRANCH_NAME,
						TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD') MIN_DATE,
						TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'HH24:MI') MIN_TIME, 
						F1.ITEM_CODE,
						ITEM_NAME,
						MIN_OR,
						TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL,
						D1.RIVER_DIV,
						(SELECT COMMON_CODE_NAME FROM T_COMMON_CODE 
						WHERE D1.RIVER_DIV = COMMON_CODE
						  AND COMMON_CODE_CATEGORY = '01') RIVER_NAME,
						D1.SYS_KIND,
						(
						SELECT SYS_KIND_NAME 
							FROM T_SYS_KIND 
						 WHERE SYS_KIND =  D1.SYS_KIND
						) SYS_KIND_NAME
			  FROM 
						(
						SELECT DISTINCT 
								F1.FACT_CODE,
								F1.BRANCH_NO,
								B.BRANCH_NAME,
								D1.MIN_TIME, 
								F1.ITEM_CODE,
								(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F1.ITEM_CODE) ITEM_NAME,
								MIN_VL,
								MIN_OR
							FROM 
									T_FACT_BRANCH_INFO B, 
									(
									SELECT F.FACT_CODE,
												F.BRANCH_NO,
												F.MIN_TIME, 
												F.ITEM_CODE,
												MIN_VL,
												NVL(MIN_OR, '0') MIN_OR
									  FROM T_MIN_DATA F
								  ) F1, 
								  ( 
									SELECT FACT_CODE, BRANCH_NO, MAX(MIN_TIME) MIN_TIME
										FROM T_MIN_DATA
									 GROUP BY FACT_CODE, BRANCH_NO
								  ) D1
							WHERE F1.FACT_CODE = D1.FACT_CODE
								 AND F1.BRANCH_NO = D1.BRANCH_NO
								 AND F1.MIN_TIME = D1.MIN_TIME
								 AND F1.FACT_CODE = B.FACT_CODE
								 AND B.BRANCH_NO = F1.BRANCH_NO
								  AND B.BRANCH_USE_FLAG = 'Y'
					  ) F1, 
					  T_FACT_INFO D1,
					  T_FACT_MEASU_ITEM D2
			 WHERE 
				<![CDATA[
				 F1.FACT_CODE = D1.FACT_CODE
				 AND D1.FACT_USE_FLAG = 'Y'
				 AND F1.FACT_CODE = D2.FACT_CODE
				 AND F1.BRANCH_NO = D2.BRANCH_NO
				 AND F1.ITEM_CODE = D2.ITEM_CODE
				 AND D1.FACT_CODE = D2.FACT_CODE
				 AND F1.MIN_OR != '0'
				 AND F1.MIN_TIME >= TO_CHAR(SYSDATE-60/24/60 * 3, 'YYYYMMDDHH24MI')
				 ]]>  
				<isNotEqual prepend="AND" property="sys" compareValue="all">
				 D1.SYS_KIND = #sys#
				</isNotEqual>
				<isNotEqual prepend="AND" property="step" compareValue="all">
				 F1.MIN_OR = #step#
				</isNotEqual>
				ORDER BY FACT_NAME, BRANCH_NO
	</statement>
	
	<statement id="getRiverMainChart"  parameterClass="mainChartVO" resultClass="resultChartVO">
<!-- 		SELECT  FACT_CODE, FACT_NAME, BRANCH_NO, BRANCH_NAME, -->
<!-- 				DECODE(MIN_TIME2, NULL,  -->
<!-- 					( -->
<!-- 						CASE WHEN decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN  -->
<!-- 									 NVL(decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))),0) ELSE '0' END -->
<!-- 					),  -->
<!-- 					( -->
<!-- 						CASE WHEN decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN  -->
<!-- 									 NVL(decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))),0) ELSE '0' END -->
<!-- 					) -->
<!-- 				) MIN_TIME, -->
<!-- 			  DECODE(MIN_TIME2, NULL, -->
<!-- 				(  -->
<!-- 					CASE WHEN decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN  -->
<!-- 							MIN_VL ELSE 0 END -->
<!-- 				 ), -->
<!-- 				 ( -->
<!-- 					CASE WHEN decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN  -->
<!-- 							MIN_VL2 ELSE 0  END -->
<!-- 				 ) -->
<!-- 			  ) MIN_VL,   -->
<!-- 			  DECODE(MIN_TIME2, NULL, -->
<!-- 				( -->
<!-- 					CASE WHEN decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN  -->
<!-- 						 MIN_OR END -->
<!-- 				), -->
<!-- 				( -->
<!-- 					CASE WHEN decode(MIN_TIME2,null,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))) >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') THEN  -->
<!-- 						 MIN_OR2 END -->
<!-- 				)  -->
<!-- 			 ) MIN_OR, -->
<!-- 				LOC_SEQ_NO   -->
<!-- 		FROM	 -->
<!-- 			(SELECT F1.FACT_CODE, -->
<!-- 					F1.FACT_NAME, -->
<!-- 					D1.BRANCH_NO, -->
<!-- 					<isEqual property="sysKind" compareValue="A"> -->
<!-- 					D1.BRANCH_NAME BRANCH_NAME, -->
<!-- 					</isEqual> -->
<!-- 					<isNotEqual property="sysKind" compareValue="A"> -->
<!-- 					D1.BRANCH_NAME||'-'||D1.BRANCH_NO BRANCH_NAME, -->
<!-- 					</isNotEqual> -->
<!-- 					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */  -->
<!-- 							MIN_TIME -->
<!-- 					FROM T_MIN_DATA A -->
<!-- 					WHERE A.FACT_CODE = D1.FACT_CODE -->
<!-- 					  AND A.BRANCH_NO = D1.BRANCH_NO -->
<!-- 					  AND A.ITEM_CODE = #itemCode# -->
<!-- 					  AND A.MIN_DCD = '0' -->
<!-- 					  AND ROWNUM = 1) MIN_TIME, -->
<!-- 					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ MIN_VL -->
<!-- 					FROM T_MIN_DATA A -->
<!-- 					WHERE A.FACT_CODE = D1.FACT_CODE -->
<!-- 					  AND A.BRANCH_NO = D1.BRANCH_NO -->
<!-- 					  AND A.ITEM_CODE = #itemCode# -->
<!-- 					  AND A.MIN_DCD = '0' -->
<!-- 					  AND ROWNUM = 1) MIN_VL,	  -->
<!-- 					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ MIN_OR -->
<!-- 					FROM T_MIN_DATA A -->
<!-- 					WHERE A.FACT_CODE = D1.FACT_CODE -->
<!-- 					  AND A.BRANCH_NO = D1.BRANCH_NO -->
<!-- 					  AND A.ITEM_CODE = #itemCode# -->
<!-- 					  AND A.MIN_DCD = '0' -->
<!-- 					  AND ROWNUM = 1) MIN_OR, -->
<!-- 					 DECODE(SUBSTR(#itemCode#,0,3), 'VOC', NULL,  -->
<!-- 					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */  -->
<!-- 							MIN_TIME -->
<!-- 					FROM T_MIN_DATA A -->
<!-- 					WHERE A.FACT_CODE = D1.FACT_CODE -->
<!-- 					  AND A.BRANCH_NO = D1.BRANCH_NO -->
<!-- 					  AND A.ITEM_CODE = SUBSTR(#itemCode#,0,3) || '01' -->
<!-- 					  AND A.MIN_DCD = '0' -->
<!-- 					  AND ROWNUM = 1) -->
<!-- 					) MIN_TIME2, -->
<!-- 					DECODE(SUBSTR(#itemCode#,0,3), 'VOC', 0,  -->
<!-- 					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ MIN_VL -->
<!-- 					FROM T_MIN_DATA A -->
<!-- 					WHERE A.FACT_CODE = D1.FACT_CODE -->
<!-- 					  AND A.BRANCH_NO = D1.BRANCH_NO -->
<!-- 					  AND A.ITEM_CODE = SUBSTR(#itemCode#,0,3) || '01' -->
<!-- 					  AND A.MIN_DCD = '0' -->
<!-- 					  AND ROWNUM = 1) -->
<!-- 					) MIN_VL2, -->
<!-- 					DECODE(SUBSTR(#itemCode#,0,3), 'VOC', NULL, -->
<!-- 					(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_03 ) */ MIN_OR -->
<!-- 					FROM T_MIN_DATA A -->
<!-- 					WHERE A.FACT_CODE = D1.FACT_CODE -->
<!-- 					  AND A.BRANCH_NO = D1.BRANCH_NO -->
<!-- 					  AND A.ITEM_CODE = SUBSTR(#itemCode#,0,3) || '01' -->
<!-- 					  AND A.MIN_DCD = '0' -->
<!-- 					  AND ROWNUM = 1) -->
<!-- 					 ) MIN_OR2, -->
<!-- 					F1.LOC_SEQ_NO  -->
<!-- 			FROM T_FACT_INFO F1, -->
<!-- 				 T_FACT_BRANCH_INFO D1 -->
<!-- 			WHERE SYS_KIND = #sysKind# -->
<!-- 			  AND RIVER_DIV = #riverDiv# -->
<!-- 			  AND F1.FACT_CODE = D1.FACT_CODE -->
<!-- 			  AND D1.BRANCH_USE_FLAG = 'Y'  ) -->
<!-- 		 ORDER BY LOC_SEQ_NO,  FACT_NAME,  BRANCH_NO -->
<!-- 		 아래 표 값과 연동-->
<!-- 		 ORDER BY LOC_SEQ_NO,  FACT_NAME,  BRANCH_NO -->
		SELECT FACT_CODE, 
		       F1.FACT_NAME,
		       BRANCH_NO, 
		       BRANCH_NAME,  
		       DECODE(F1.MIN_TIME2, NULL, NVL(decode(MIN_TIME,NULL,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))),0), NVL(decode(MIN_TIME2,NULL,' ',(substr(MIN_TIME2,0,4)||'/'|| substr(MIN_TIME2,5,2)||'/'|| substr(MIN_TIME2,7,2)||' '||substr(MIN_TIME2,9,2)||':'|| substr(MIN_TIME2,11,2))),0) ) AS MIN_TIME,
<!-- 		       TO_NUMBER(DECODE(F1.MIN_TIME2, NULL, TO_CHAR(MIN_VL, 'FM999,990.00'), TO_CHAR(MIN_VL2, 'FM999,990.00'))) * 5 AS MIN_VL, -->
			   <isNotEqual property="itemCode" compareValue="CON00">
		       DECODE(F1.MIN_TIME2, NULL, MIN_VL, MIN_VL2 ) AS MIN_VL,
		       </isNotEqual>
		       <isEqual property="itemCode" compareValue="CON00">
		       DECODE(F1.MIN_TIME2, NULL, MIN_VL, MIN_VL2 ) AS MIN_VL,
		       </isEqual>
		       DECODE(F1.MIN_TIME2, NULL, MIN_OR, MIN_OR2 ) AS MIN_OR,  
		       F1.LOC_SEQ_NO
		  FROM 
		       (SELECT A.FACT_CODE, 
		              NVL(FACT_NO, '-') FACT_NAME, 
		              C.BRANCH_NO, 
		              C.BRANCH_NAME||'-'||C.BRANCH_NO BRANCH_NAME, 
		              (SELECT 
		                     /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ 
		                     MIN_TIME 
		                FROM T_MIN_DATA A1 
		               WHERE A1.FACT_CODE = A.FACT_CODE 
		                     AND A1.BRANCH_NO = C.BRANCH_NO 
		                     AND A1.ITEM_CODE = #itemCode# 
		                     AND A1.MIN_DCD = '0' 
		                     AND ROWNUM = 1
		              ) MIN_TIME, 
		              B.ITEM_CODE, 
		              (SELECT ITEM_NAME 
		                FROM T_ITEM_INFO 
		               WHERE ITEM_CODE = B.ITEM_CODE
		              ) ITEM_NAME, 
		              (SELECT 
		                     /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ 
		                     NVL(MIN_OR, '0') 
		                FROM T_MIN_DATA A1 
		               WHERE A1.FACT_CODE = A.FACT_CODE 
		                     AND A1.BRANCH_NO = C.BRANCH_NO 
		                     AND A1.ITEM_CODE = #itemCode# 
		                     AND A1.MIN_DCD = '0' 
		                     AND ROWNUM = 1
		              ) MIN_OR, 
		              (SELECT 
		                     /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */
		                     <isNotEqual property="itemCode" compareValue="CON00"> 
		                     TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL 
		                     </isNotEqual>
		                     <isEqual property="itemCode" compareValue="CON00">
		                      TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL 
		                     </isEqual> 
		                FROM T_MIN_DATA A1 
		               WHERE A1.FACT_CODE = A.FACT_CODE 
		                     AND A1.BRANCH_NO = C.BRANCH_NO 
		                     AND A1.ITEM_CODE = #itemCode# 
		                     AND A1.MIN_DCD = '0' 
		                     AND ROWNUM = 1
		              ) MIN_VL, 
		              DECODE(SUBSTR(#itemCode#,0,3), 'VOC', NULL, 
		              (SELECT 
		                     /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ 
		                     MIN_TIME 
		                FROM T_MIN_DATA A1 
		               WHERE A1.FACT_CODE = A.FACT_CODE 
		                     AND A1.BRANCH_NO = C.BRANCH_NO 
		                     AND A1.ITEM_CODE = SUBSTR(#itemCode#,0,3) || '01' 
		                     AND A1.MIN_DCD = '0' 
		                     AND ROWNUM = 1
		              ) ) MIN_TIME2, 
		              DECODE(SUBSTR(#itemCode#,0,3), 'VOC', '0', 
		              (SELECT 
		                     /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */
		                     <isNotEqual property="itemCode" compareValue="CON00">  
		                     TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL 
		                     </isNotEqual>
		                     <isEqual property="itemCode" compareValue="CON00">
		                     TO_CHAR(MIN_VL, 'FM999,990.000') AS MIN_VL 
		                     </isEqual>
		                FROM T_MIN_DATA A1 
		               WHERE A1.FACT_CODE = A.FACT_CODE 
		                     AND A1.BRANCH_NO = C.BRANCH_NO 
		                     AND A1.ITEM_CODE = SUBSTR(#itemCode#,0,3) || '01' 
		                     AND A1.MIN_DCD = '0' 
		                     AND ROWNUM = 1
		              ) ) MIN_VL2, 
		              DECODE(SUBSTR(#itemCode#,0,3), 'VOC', NULL, 
		              (SELECT 
		                     /*+ INDEX_DESC(A1 IX_MIN_DATA_03 ) */ 
		                     MIN_OR 
		                FROM T_MIN_DATA A1 
		               WHERE A1.FACT_CODE = A.FACT_CODE 
		                     AND A1.BRANCH_NO = C.BRANCH_NO 
		                     AND A1.ITEM_CODE = SUBSTR(#itemCode#,0,3) || '01' 
		                     AND A1.MIN_DCD = '0' 
		                     AND ROWNUM = 1
		              ) ) MIN_OR2, 
		              A.RIVER_DIV, 
		              A.SYS_KIND, 
		              (SELECT SYS_KIND_NAME 
		                FROM T_SYS_KIND 
		               WHERE SYS_KIND = A.SYS_KIND
		              ) SYS_KIND_NAME ,
		              A.LOC_SEQ_NO
		         FROM T_FACT_INFO A, 
		              T_ITEM_INFO B, 
		              T_FACT_BRANCH_INFO C 
		        WHERE A.FACT_USE_FLAG = 'Y' 
		              AND C.BRANCH_USE_FLAG = 'Y' 
		              AND A.FACT_CODE = C.FACT_CODE 
		              AND A.RIVER_DIV = #riverDiv#
		              AND A.SYS_KIND = #sysKind#
		              AND B.ITEM_CODE = #itemCode# 
		       ) F1 
		 WHERE MIN_TIME >= to_char((SYSDATE - 60/24/60 * 3), 'YYYYMMDDHH24MI') 
		       OR MIN_TIME2 >= to_char((SYSDATE - 60/24/60 * 3), 'YYYYMMDDHH24MI') 
		ORDER BY FACT_NAME, 
		       BRANCH_NO  
	</statement>
	
	<statement id="getRiverMainChartTMS"  parameterClass="mainChartVO" resultClass="resultChartVO">
	<![CDATA[
	SELECT FACT_CODE, FACT_NAME, BRANCH_NO, FACT_NAME||'-'||BRANCH_NO as BRANCH_NAME, MIN_TIME, nvl(MIN_VL,0) as MIN_VL , MIN_OR, ROWNUM AS LOC_SEQ_NO FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO AS BRANCH_NO
                           , MA.WAST_NO AS BRANCH_NAME
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD HH24:MI') AS MIN_DATE
	                 , TO_CHAR(TO_DATE(MB.MIN_TIME,'YYYYMMDDHH24MI'),'MM/DD HH24:MI') AS MIN_TIME
	                 , MA.ITEM_CODE
                           , MA.ITEM_NAME                            
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , CASE WHEN MB.MIN_OR > '0' THEN  CASE WHEN MIN_ST IN ('00', '02' ) THEN MIN_OR ELSE '0' END ELSE MIN_OR END AS MIN_OR
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
                           , MA.AREA_GBN	                 
	                 , 'R'||DECODE(ma.area_gbn,'02','03','03','02',MA.AREA_GBN) AS RIVER_DIV
                           , 'T' AS SYS_KIND
                           , '수질TMS' AS SYS_KIND_NAME                           
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
                           , B.ITEM_NAME
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD	                 
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C	                 
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE	               
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+) ORDER BY MA.FACT_CODE) WHERE RIVER_DIV = #riverDiv# AND ITEM_CODE = #itemCode# and ROWNUM < 11
	              
	           
	]]>
	</statement>
	
	<statement id="getRiverGaugeChart"  parameterClass="mainChartVO" resultClass="resultChartVO">
			SELECT FACT_CODE, FACT_NAME, BRANCH_NO, ITEM_CODE, 
					(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,					
					decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2))) as MIN_DAY,
					decode(MIN_TIME,null,' ',(substr(MIN_TIME,0,4)||'/'|| substr(MIN_TIME,5,2)||'/'|| substr(MIN_TIME,7,2)||' '||substr(MIN_TIME,9,2)||':'|| substr(MIN_TIME,11,2))) as MIN_TIME,
					MIN_OR, MIN_VL, RIVER_NAME, SYS_KIND
			 FROM 
				(SELECT F1.FACT_CODE,
							F1.FACT_NAME,
							(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_02) */ BRANCH_NO
							  FROM T_MIN_DATA A
							 WHERE FACT_CODE = F1.FACT_CODE
								AND MIN_DCD = '0'
								AND BRANCH_NO = #branchNo# 
								AND SUBSTR(A.ITEM_CODE, 0, 3) = #itemCode#
								AND MIN_TIME >= TO_CHAR(SYSDATE-60/24/60 * 3, 'YYYYMMDDHH24MI')
								AND ROWNUM = 1) BRANCH_NO, 
							(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_02) */ ITEM_CODE
							  FROM T_MIN_DATA A
							 WHERE FACT_CODE = F1.FACT_CODE
								AND MIN_DCD = '0'
								AND BRANCH_NO = #branchNo# 
								AND SUBSTR(A.ITEM_CODE, 0, 3) = #itemCode#
								AND MIN_TIME >= TO_CHAR(SYSDATE-60/24/60 * 3, 'YYYYMMDDHH24MI')
								AND ROWNUM = 1) ITEM_CODE,						 
							(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_02) */ MIN_TIME
							  FROM T_MIN_DATA A
							 WHERE FACT_CODE = F1.FACT_CODE
								AND MIN_DCD = '0'
								AND BRANCH_NO = #branchNo# 
								AND SUBSTR(A.ITEM_CODE, 0, 3) = #itemCode#
								AND MIN_TIME >= TO_CHAR(SYSDATE-60/24/60 * 3, 'YYYYMMDDHH24MI')
								AND ROWNUM = 1) MIN_TIME,
							(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_02) */  MIN_OR
							  FROM T_MIN_DATA A
							 WHERE FACT_CODE = F1.FACT_CODE
								AND MIN_DCD = '0'
								AND BRANCH_NO = #branchNo# 
								AND SUBSTR(A.ITEM_CODE, 0, 3) = #itemCode#
								AND MIN_TIME >= TO_CHAR(SYSDATE-60/24/60 * 3, 'YYYYMMDDHH24MI')
								AND ROWNUM = 1) MIN_OR, 
							(SELECT /*+ INDEX_DESC(A IX_MIN_DATA_02) */  MIN_VL
							  FROM T_MIN_DATA A
							 WHERE FACT_CODE = F1.FACT_CODE
								AND MIN_DCD = '0'
								AND BRANCH_NO = #branchNo# 
								AND SUBSTR(A.ITEM_CODE, 0, 3) = #itemCode#
								AND MIN_TIME >= TO_CHAR(SYSDATE-60/24/60 * 3, 'YYYYMMDDHH24MI')
								AND ROWNUM = 1) MIN_VL,
							DECODE(F1.RIVER_DIV, 'R01', '한강',
							 DECODE(F1.RIVER_DIV, 'R02', '낙동강',
								DECODE(F1.RIVER_DIV, 'R03', '금강', '영산강'
							))) RIVER_NAME,
							F1.SYS_KIND
				  FROM T_FACT_INFO F1
				 WHERE F1.FACT_USE_FLAG = 'Y'
					 AND F1.SYS_KIND = #sysKind#
					 AND F1.RIVER_DIV = #riverDiv#) F
			WHERE FACT_CODE = #factCode#
			  AND BRANCH_NO = #branchNo#
	</statement>
	
	<statement id="getAlertTargetList" parameterClass="alertTLVO" resultClass="alertTLVO">
		SELECT 
				ROWNUM						 as atNo
				, AT.FACT_CODE				as factCode
				, AT.BRANCH_NO				as branchNo
				, AT.SPREAD_TARGET_NO		as atId 
				, (	SELECT TRIM (SUBSTR (MAX (SYS_CONNECT_BY_PATH (DEPT_NAME, ' > ')), 4))
					  FROM T_DEPT_INFO 
					  WHERE DEPT_CODE =  M.DEPT_CODE
					  START WITH UPPER_DEPT_CODE = '0'
					  CONNECT BY PRIOR DEPT_CODE = UPPER_DEPT_CODE) as atDept 
				, ( SELECT DEPT_NAME
					  FROM T_DEPT_INFO
					 WHERE DEPT_CODE = M.DEPT_CODE)		as atPart
				, M.MEMBER_NAME		as atName
				, M.GRADE_NAME	as atPosition
				, M.OFFICE_NO	as atArsTele
				, M.MOBILE_NO	as atSmsTele
				, AT.ACS_FLAG			as atArs
				, AT.SMS_FLAG			as atSms
				, AT.DAY			as atDay
				, AT.NIGHT		as atNight
				, AT.USE_FLAG		as atRece
				, AT.STEP		as atClass
				, AT.SEQ		as atDepth
			FROM T_SPREAD_TARGET AT, T_MEMBER M
			<isNotEmpty property="dept">
				<isNotEqual  property="dept" compareValue="all">
					, T_DEPT_INFO D
				</isNotEqual> 
			</isNotEmpty>
			WHERE TRIM(AT.FACT_CODE) =#factCode#
			AND AT.BRANCH_NO = #branchNo#
			<isNotEmpty property="dept">
				<isNotEqual prepend="AND" property="dept" compareValue="all">
					D.UPPER_DEPT_CODE = #dept#
					AND M.DEPT_CODE = D.DEPT_CODE
				</isNotEqual>
			</isNotEmpty> 
			AND AT.MEMBER_ID = M.MEMBER_ID
			ORDER BY M.DEPT_CODE, M.GRADE_NAME, M.MEMBER_NAME
	</statement>	
	<statement id="getTotalMntMainDetailTSGraph_TMS" parameterClass="totalMntMainDetailSearchTSVO" resultClass="totalMntMainDetailTSVO"
			 remapResults="true">
				<![CDATA[
			SELECT *
  FROM (
       SELECT ROWNUM RNUM
            , T.*
         FROM (
              SELECT FACTCODE AS FACT_CODE
                   , FACTNAME AS FACT_NAME
                   , BRANCHNO AS BRANCH_NO
                   , FACTNAME ||'-'||BRANCH_NAME as BRANCH_NAME 
                   , MINTIME AS R_MINTIME
                   , TO_CHAR(TO_DATE(MINTIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') AS MIN_TIME
                   , STRDATE 
                   , STRTIME 
                   , MINDUMP
                   , TO_CHAR(SUM(PHY), 'FM999,990.00') PHY
                   , TO_CHAR(SUM(BOD), 'FM999,990.00') BOD
                   , TO_CHAR(SUM(COD), 'FM999,990.00') COD
                   , TO_CHAR(SUM(SUS), 'FM999,990.00') SUS
                   , TO_CHAR(SUM(TOP), 'FM999,990.00') TOP
                   , TO_CHAR(SUM(TON), 'FM999,990.00') TON
                   , TO_CHAR(SUM(FLW), 'FM999,990') FLW
                   , SUM(PHY_OR) PHY_OR
                   , SUM(BOD_OR) BOD_OR
                   , SUM(COD_OR) COD_OR
                   , SUM(SUS_OR) SUS_OR
                   , SUM(TOP_OR) TOP_OR
                   , SUM(TON_OR) TON_OR
                   , SUM(FLW_OR) FLW_OR
                   , MAX(MINST) MINST
                   , MAX(MINAB) MINAB
                   , RIVER_DIV
                   , RIVER_NAME
                   , SYS_KIND
                   , SYS_KIND_NAME
                FROM (
                     SELECT A.ITEM_CODE AS ITEMCODE
                          , B.ITEM_NAME AS ITEMNAME
                          , A.FACT_CODE AS FACTCODE
                          , C.FACT_NAME AS FACTNAME
                          , A.WAST_NO AS BRANCHNO
                          , A.WAST_NO BRANCH_NAME
                          , A.MIN_TIME AS MINTIME
                          , TO_CHAR(TO_DATE(A.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD') AS STRDATE
                          , TO_CHAR(TO_DATE(A.MIN_TIME, 'YYYYMMDDHH24MI'), 'HH24:MI') AS STRTIME
                          , A.MIN_DUMP AS MINDUMP
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'PHY', MIN_VL) PHY
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'BOD', MIN_VL) BOD
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'COD', MIN_VL) COD
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'SUS', MIN_VL) SUS
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TOP', MIN_VL) TOP
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TON', MIN_VL) TON
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'FLW', MIN_VL) FLW
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'PHY', MIN_OR) PHY_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'BOD', MIN_OR) BOD_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'COD', MIN_OR) COD_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'SUS', MIN_OR) SUS_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TOP', MIN_OR) TOP_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TON', MIN_OR) TON_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'FLW', MIN_OR) FLW_OR
                          , A.MIN_ST AS MINST
                          , A.MIN_AB AS MINAB
                          , 'R'||AREA.AREA_GBN AS RIVER_DIV
                          , DECODE(AREA.AREA_GBN, '01', '수도권', '02', '충청/강원', '03', '영남', '04', '호남') AS RIVER_NAME
                          , 'W' SYS_KIND
                          , '수질TMS' SYS_KIND_NAME 
                       FROM WTMSC_MIN_REAL@TMS A
                          , WTMSC_ITEM@TMS B
                          , WTMSC_FACT@TMS C
                          , WTMSC_FACT_WAST@TMS D
                          , WTMSC_AREA@TMS AREA
                      WHERE A.ITEM_CODE = B.ITEM_CODE
                        AND A.FACT_CODE = C.FACT_CODE
                        AND C.FACT_CODE = D.FACT_CODE
                        AND A.WAST_NO = D.WAST_NO
                        AND D.WAST_USED = 'Y'
                        AND C.FACT_USED = 'Y'
                        AND AREA.CTY_CODE = C.CTY_CODE and  A.FACT_CODE = #fact_code# and A.WAST_NO = #branch_no#
                        AND A.MIN_TIME BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD')||'0000'
                        AND TO_CHAR(SYSDATE,'YYYYMMDD')||'9999'
                   )
               GROUP BY FACTCODE, FACTNAME, BRANCHNO, BRANCH_NAME, STRDATE, STRTIME, MINTIME, STRDATE, STRTIME, MINDUMP, RIVER_DIV, RIVER_NAME, SYS_KIND, SYS_KIND_NAME
               ORDER BY STRDATE DESC, STRTIME DESC, FACTNAME ASC, BRANCHNO ASC
            ) T
     )
	]]>
		</statement>
	
	<statement id="getTotalMntMainDetailTSGraph" parameterClass="totalMntMainDetailSearchTSVO" resultClass="totalMntMainDetailTSVO"
			 remapResults="true">
			<isEqual property="sys" compareValue="U">
			  SELECT
					QQ.FACT_CODE, QQ.FACT_NAME, QQ.BRANCH_NO, QQ.BRANCH_NAME, QQ.MIN_TIME, QQ.STRDATE, QQ.STRTIME,
					TUR, CON, DOW, TMP, PHY, TOF, CON_OR, DOW_OR, TMP_OR, PHY_OR, TUR_OR, TOF_OR,
					QQ.RIVER_NAME, QQ.SYS_KIND_NAME, QQ.SYS_KIND
					<isNotEqual prepend="," property="item" compareValue="all">
							MIN_VL, AA.ITEM_NAME
					</isNotEqual>
				FROM
				(  
			 </isEqual>
				SELECT FACT_CODE, FACT_NAME, BRANCH_NO,
					<isEqual property="sys" compareValue="U">
					    MIN_TIME,
			    	</isEqual>
			    	<isEqual property="sys" compareValue="A">
					    R_MINTIME MIN_TIME,
			    	</isEqual>
						R_MINTIME, 
						TO_CHAR(TO_DATE(R_MINTIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
						TO_CHAR(TO_DATE(R_MINTIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
						RIVER_DIV, RIVER_NAME, NOD,
						SYS_KIND, SYS_KIND_NAME,
						
						
						
				    	<isNotEqual property="sys" compareValue="U">
						/* 일반 항목 (내부) */			  
					  	TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
					  	TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
						TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
						TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
						TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
						/* 클로로필-a */
						TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
				    	</isNotEqual>
						SUM(TOF_OR) TOF_OR,
						<isEqual property="sys" compareValue="U">
						TO_CHAR(SUM(TUR), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TUR00'), '0')) TUR,
					  	TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'CON00'), '0')) CON,
						TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'DOW00'), '0')) DOW,
						TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TMP00'), '0')) TMP,
						TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'PHY00'), '0')) PHY,
						TO_CHAR(SUM(TOF), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TOF00'), '0')) TOF,
				    	</isEqual>
						
						
					  SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
						SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
						SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
						SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
					  SUM(TUR_OR) TUR_OR,
					  /* 생물독성(물고기) */
					  TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
					  SUM(IMP_OR) IMP_OR,
					  /* 생물독성(물벼룩1) */
					  TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
					  TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
					  SUM(LIM_OR) LIM_OR,
					  SUM(RIM_OR) RIM_OR,
					  /* 생물독성(물벼룩2) */
					  TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
					  TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
					  SUM(LTX_OR) LTX_OR,
					  SUM(RTX_OR) RTX_OR,
						/* 생물독성(미생물) */
					  TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
					  SUM(TOX_OR) TOX_OR,
						/* 생물독성(조류) */
					  TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
					  SUM(EVN_OR) EVN_OR,
					
					  /* 휘발성 유기화합물 */
					  TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
					  TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
					  TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
					  TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
					  TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
					  TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
					  TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
					  TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
					  TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
					  TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
					  TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
					  TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
					  TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
					  TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
					  TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
					  SUM(VOC1_OR) VOC1_OR,
					  SUM(VOC2_OR) VOC2_OR,
					  SUM(VOC3_OR) VOC3_OR,
					  SUM(VOC4_OR) VOC4_OR,
					  SUM(VOC5_OR) VOC5_OR,
					  SUM(VOC6_OR) VOC6_OR,
					  SUM(VOC7_OR) VOC7_OR,
					  SUM(VOC8_OR) VOC8_OR,
					  SUM(VOC9_OR) VOC9_OR,
					  SUM(VOC10_OR) VOC10_OR,
					  SUM(VOC11_OR) VOC11_OR,
					  SUM(VOC12_OR) VOC12_OR,
					  SUM(VOC13_OR) VOC13_OR,
					  SUM(VOC14_OR) VOC14_OR,
					  SUM(VOC15_OR) VOC15_OR,
					  /* 중금속 */
					  TO_CHAR(SUM(COP), 'FM999,990.00') COP,
					  TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
					  TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
					  TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
					  SUM(COP_OR) COP_OR,
					  SUM(PLU_OR) PLU_OR,
					  SUM(ZIN_OR) ZIN_OR,
					  SUM(CAD_OR) CAD_OR,
					  /* 페놀 */
					  TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
					  TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
					  SUM(PHE_OR) PHE_OR,
					  SUM(PHL_OR) PHL_OR,
						/* 유기물질 */
					  TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
					  SUM(TOC_OR) TOC_OR,
					  /* 영양염류 */
					  TO_CHAR(SUM(TON), 'FM999,990.00') TON,
					  TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
					  TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
					  TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
					  TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
					  SUM(TON_OR) TON_OR,
					  SUM(TOP_OR) TOP_OR,
					  SUM(NH4_OR) NH4_OR,
					  SUM(NO3_OR) NO3_OR,
					  SUM(PO4_OR) PO4_OR,
					  /* 강수량계 */
					  TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
					  SUM(RIN_OR) RIN_OR, 
						BRANCH_NAME  
			  FROM (			
					SELECT F1.FACT_CODE,
							  D1.FACT_NAME, 
							  F1.BRANCH_NO,
							  D1.BRANCH_NAME,
							  F1.MIN_TIME AS R_MINTIME,
							  TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
								/*  일반항목 내부 */
							  DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
							  DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
							  DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
							  DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
							  DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
							  DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
							  DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
							  DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
							  /* 일반 항목 외부 */
							  DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
							  DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
							  DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
							  DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
							  DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
							  DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
							  DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
							  DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
							  DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
							  DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
							  /* 생물 독성 (물고기)*/
							  DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
							  DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
							  /* 생물 독성 (물벼룩1) */
							  DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
							  DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
							  DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
							  DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
							  /* 생물 독성 (물벼룩2) */
							  DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
							  DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
							  DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
							  DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
							  /* 생물 독성 (미생물) */
							  DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
							  DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
							  /* 생물 독성 (조류) */
							  DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
							  DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
							  /* 클로로필-a */
							  DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
							  DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
							  /* 휘발성 유기화합물 */
							  DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
							  DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
							  DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
							  DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
							  DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
							  DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
							  DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
							  DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
							  DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
							  DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
							  DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
							  DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
							  DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
							  DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
							  DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
							  DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
							  DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
							  DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
							  DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
							  DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
							  DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
							  DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
							  DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
							  DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
							  DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
							  DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
							  DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
							  DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
							  DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
							  DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
							  /* 중금속 */
							  DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
							  DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
							  DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
							  DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
							  DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
							  DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
							  DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
							  DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
							  /* 페놀 */
							  DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
							  DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
							  DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
							  DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
							  /* 유기물질 */
							  DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
							  DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
							  /* 영양염류 */
							  DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
							  DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
							  DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
							  DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
							  DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
							  DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
							  DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
							  DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
							  DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
							  DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
							  /* 강수량계 */
							  DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
							  DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
								TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL,
								D1.RIVER_DIV,
								DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
								SUBSTR(F1.FACT_CODE,6,2) AS NOD,
								D1.SYS_KIND,
								(
								SELECT SYS_KIND_NAME
									FROM T_SYS_KIND 
								 WHERE SYS_KIND = D1.SYS_KIND
								) SYS_KIND_NAME
					  FROM  
								(
								SELECT F.FACT_CODE,
											F.BRANCH_NO,
											F.MIN_TIME, 
											F.ITEM_CODE,
											(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
											MIN_VL,
											MIN_OR
								  FROM T_MIN_DATA F
								WHERE 
									F.FACT_CODE = #fact_code#
									AND F.MIN_TIME >=
										( 
										 SELECT SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' NOW 
										  FROM DUAL 
										)
									AND F.MIN_DCD = '0'
							  ) F1,
							  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG, 
											F.SYS_KIND, F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
									FROM T_FACT_INFO F,
											T_FACT_BRANCH_INFO D
								 WHERE F.FACT_CODE = D.FACT_CODE  
											AND D.BRANCH_USE_FLAG = 'Y'
							  ) D1,
							  T_FACT_MEASU_ITEM I
					 WHERE F1.FACT_CODE = D1.FACT_CODE
						 AND F1.BRANCH_NO = D1.BRANCH_NO
						 AND D1.FACT_USE_FLAG = 'Y'
						 AND F1.BRANCH_NO = #branch_no#
						 AND I.ITEM_CODE = F1.ITEM_CODE
						 AND I.FACT_CODE = F1.FACT_CODE
						 AND I.BRANCH_NO = F1.BRANCH_NO
						 AND I.ITEM_USE_FLAG = 'Y'
				)				 
			GROUP BY FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME, R_MINTIME, 
						  RIVER_DIV, RIVER_NAME, NOD,
						  SYS_KIND, SYS_KIND_NAME, BRANCH_NAME 
			<isNotEqual property="sys" compareValue="U"> 
				<isEqual property="orderby" compareValue="asc" >	
						ORDER BY MIN_TIME ASC, FACT_CODE ASC, BRANCH_NO ASC
				  </isEqual>
				<isEqual property="orderby" compareValue="desc" >
						ORDER BY MIN_TIME DESC, FACT_CODE ASC, BRANCH_NO ASC
				</isEqual> 
			</isNotEqual>
		<isEqual property="sys" compareValue="U"> 
			) AA,
			 (
							SELECT 
								Q.MIN_TIME, 
								TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
								TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
								A.FACT_CODE, 
								A.BRANCH_NO, 
								A.FACT_NAME,
								A.BRANCH_NAME,
								A.SYS_KIND,
								A.RIVER_NAME,
								A.SYS_KIND_NAME
							FROM
							(
							<isEqual property="sys" compareValue="U">
								<![CDATA[
									 SELECT
										TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI')+(LEVEL*10/24/60)-(10/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
								FROM
								(
									SELECT 
											SYSDATE - TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI') + (20/24/60) AS DAYCNT
									FROM DUAL
								  )
								CONNECT BY (LEVEL*10/24/60+(10/24/60)) < DAYCNT
								]]>
								</isEqual>
								<isEqual property="sys" compareValue="T">
								<![CDATA[
									SELECT
										TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI')+(LEVEL*30/24/60)-(30/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
									FROM
									(
										SELECT 
												SYSDATE - TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI') + (60/24/60) AS DAYCNT
										FROM DUAL
									  )
									CONNECT BY (LEVEL*30/24/60+(30/24/60)) < DAYCNT
								]]>
								</isEqual>
								<isEqual property="sys" compareValue="A">
								<![CDATA[
									SELECT
										TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI')+(LEVEL*5/24/60)-(5/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
									FROM
									(
										SELECT 
												SYSDATE - TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI') + (10/24/60) AS DAYCNT
										FROM DUAL
									  )
									CONNECT BY (LEVEL*5/24/60+(5/24/60)) < DAYCNT
								]]>
								</isEqual>
							) Q,
							(
								SELECT 
									B.FACT_CODE,
									B.BRANCH_NO,
									AREA.REG_NAME AS FACT_NAME,
									B.BRANCH_NAME||'-'||B.BRANCH_NO BRANCH_NAME,
									DECODE(F.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') AS RIVER_NAME,
									F.SYS_KIND,
									(
									SELECT SYS_KIND_NAME 
										FROM T_SYS_KIND 
									 WHERE SYS_KIND =  F.SYS_KIND
									) SYS_KIND_NAME
								FROM
									T_FACT_INFO F,
									T_FACT_BRANCH_INFO B,
									T_WEATHER_AREA AREA
								WHERE
									F.FACT_CODE = B.FACT_CODE
									AND B.BRANCH_USE_FLAG = 'Y'
									AND AREA.FACT_CODE(+) = B.FACT_CODE
									AND AREA.BRANCH_NO(+) = B.BRANCH_NO
									AND F.FACT_CODE =#fact_code#
									AND B.BRANCH_NO = #branch_no#
							) A
							WHERE
								<![CDATA[TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI') <= SYSDATE]]>
					) QQ
			WHERE
				AA.R_MINTIME(+) = QQ.MIN_TIME 
				AND AA.FACT_CODE(+) = QQ.FACT_CODE
				AND AA.BRANCH_NO(+) = QQ.BRANCH_NO
			 <isEqual property="orderby" compareValue="asc" >
					ORDER BY QQ.MIN_TIME ASC, QQ.FACT_CODE ASC, QQ.BRANCH_NO ASC
			 </isEqual>
			<isEqual property="orderby" compareValue="desc" >
				  ORDER BY QQ.MIN_TIME DESC, QQ.FACT_CODE ASC, QQ.BRANCH_NO ASC
			</isEqual>
		</isEqual>
		</statement>
		
		
		<statement id="getTotalMntMainDetailTSGraph_compare" parameterClass="totalMntMainDetailSearchTSVO" resultClass="totalMntMainDetailTSVO"
			 remapResults="true">
			  select AA.*,
							NVL(BB.MIN_VL,0) MIN_VL2,
							(
							SELECT ITEM_NAME 
								FROM T_ITEM_INFO
							 WHERE ITEM_CODE = #item#
							) ITEM_NAME 
					from
					(
						SELECT F1.FACT_CODE,
									D1.FACT_NAME, 
									F1.BRANCH_NO,
									D1.BRANCH_NAME,
									TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME, 
									TO_CHAR(MIN_VL, 'FM999990.00') AS MIN_VL,
									D1.RIVER_DIV,
									DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
									SUBSTR(F1.FACT_CODE,6,2) AS NOD,
									D1.SYS_KIND,
									(
									SELECT SYS_KIND_NAME 
										FROM T_SYS_KIND 
									 WHERE SYS_KIND =  D1.SYS_KIND
									) SYS_KIND_NAME
						  FROM 
									(
									SELECT F.FACT_CODE,
												F.BRANCH_NO,
												F.MIN_TIME, 
												F.ITEM_CODE,
												MIN_VL,
												MIN_OR
									  FROM T_MIN_DATA F
								 <![CDATA[
									WHERE F.FACT_CODE = #fact_code#
										AND F.MIN_TIME >=
											( 
											 SELECT SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' NOW 
												FROM DUAL 
											)
								  ]]>
										AND F.MIN_DCD = '0'
								  ) F1,
								  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG, 
												F.SYS_KIND, F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
										FROM T_FACT_INFO F,
											T_FACT_BRANCH_INFO D
									 WHERE F.FACT_CODE = D.FACT_CODE  
										AND D.BRANCH_USE_FLAG = 'Y'
								  ) D1,
								  T_FACT_MEASU_ITEM I
						 WHERE F1.FACT_CODE = D1.FACT_CODE
							 AND F1.BRANCH_NO = D1.BRANCH_NO
							 AND D1.FACT_USE_FLAG = 'Y'
							 AND F1.BRANCH_NO =  #branch_no#
							 AND I.ITEM_CODE = F1.ITEM_CODE
							 AND I.FACT_CODE = F1.FACT_CODE
							 AND I.BRANCH_NO = F1.BRANCH_NO
							 AND I.ITEM_USE_FLAG = 'Y'
							 <isNotEqual prepend="AND" property="item" compareValue="all">
								F1.ITEM_CODE = #item#
							 </isNotEqual>
						) AA,
						 (
						SELECT F1.FACT_CODE,
									D1.FACT_NAME, 
									F1.BRANCH_NO,
									D1.BRANCH_NAME,
									TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME, 
									TO_CHAR(MIN_VL, 'FM999990.00') AS MIN_VL,
									D1.RIVER_DIV,
									DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
									SUBSTR(F1.FACT_CODE,6,2) AS NOD,
									D1.SYS_KIND,
									(
									SELECT SYS_KIND_NAME 
										FROM T_SYS_KIND 
									 WHERE SYS_KIND =  D1.SYS_KIND
									) SYS_KIND_NAME
						  FROM 
									(
									SELECT F.FACT_CODE,
												F.BRANCH_NO,
												F.MIN_TIME, 
												F.ITEM_CODE,
												MIN_VL,
												MIN_OR
									  FROM T_MIN_DATA F
									WHERE F.FACT_CODE = #fact_code#
										AND F.MIN_TIME like #compareDate#||'%'
										AND F.MIN_DCD = '0'	 
								  ) F1,
								  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG,
												F.SYS_KIND, F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
										FROM T_FACT_INFO F,
											T_FACT_BRANCH_INFO D
									 WHERE F.FACT_CODE = D.FACT_CODE  
										AND D.BRANCH_USE_FLAG = 'Y'
								  ) D1,
								  T_FACT_MEASU_ITEM I
						 WHERE F1.FACT_CODE = D1.FACT_CODE
							 AND F1.BRANCH_NO = D1.BRANCH_NO
							 AND D1.FACT_USE_FLAG = 'Y'
							 AND F1.BRANCH_NO =  #branch_no#
							 AND I.ITEM_CODE = F1.ITEM_CODE
							 AND I.FACT_CODE = F1.FACT_CODE
							 AND I.BRANCH_NO = F1.BRANCH_NO
							 AND I.ITEM_USE_FLAG = 'Y'
							 <isNotEqual prepend="AND" property="item" compareValue="all">
								 F1.ITEM_CODE = #item#
							 </isNotEqual>
						) BB
					 WHERE
						SUBSTR(AA.MIN_TIME, 12,5) = SUBSTR(BB.MIN_TIME(+), 12,5)
					ORDER BY AA.MIN_TIME ASC
		</statement>
		
		<statement id="getTotalMntMainDetailTS"  parameterClass="totalMntMainDetailSearchTSVO" resultClass="totalMntMainDetailTSVO" remapResults="true">
			<isEqual property="sys" compareValue="U">
			  SELECT
					QQ.FACT_CODE, QQ.FACT_NAME, QQ.BRANCH_NO, QQ.BRANCH_NAME, QQ.MIN_TIME,
					QQ.STRDATE, QQ.STRTIME,
					TUR, CON, DOW, TMP, PHY, CON_OR, DOW_OR, TMP_OR, PHY_OR, TUR_OR,
					IMP, LIM, RIM, LIM_OR, RIM_OR, LTX, RTX, LTX_OR, RTX_OR, TOX, TOX_OR, EVN, EVN_OR, TOF, TOF_OR, 
					VOC1, VOC2, VOC3, VOC4, VOC5, VOC6, VOC7, VOC8, VOC9, VOC10, VOC11, VOC12, VOC13, VOC14, VOC15,
					VOC1_OR, VOC2_OR, VOC3_OR, VOC4_OR, VOC5_OR, VOC6_OR, VOC7_OR, VOC8_OR, VOC9_OR, VOC10_OR, VOC11_OR, VOC12_OR, VOC13_OR, VOC14_OR, VOC15_OR,
					COP, PLU, ZIN, CAD, PHE, PHL, TOC, TON, TOP, NH4, NO3, PO4, RIN
					COP_OR, PLU_OR, ZIN_OR, CAD_OR, PHE_OR, PHL_OR, TOC_OR, TON_OR, TOP_OR, NH4_OR, NO3_OR, PO4_OR, RIN_OR,
					QQ.RIVER_NAME, QQ.SYS_KIND_NAME, QQ.SYS_KIND 
				FROM
				(  
			 </isEqual>
				SELECT FACT_CODE, FACT_NAME, BRANCH_NO,
						MIN_TIME,  R_MINTIME, 
						TO_CHAR(TO_DATE(R_MINTIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
						TO_CHAR(TO_DATE(R_MINTIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
						RIVER_DIV, RIVER_NAME, NOD,
						SYS_KIND, SYS_KIND_NAME,
						<isNotEqual property="sys" compareValue="U">
							/* 일반 항목 (내부) */
							TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
							TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
							TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
							TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
							TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
							/* 클로로필-a */
							TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
						</isNotEqual>
						<isEqual property="sys" compareValue="U">
							/* 일반 항목 (내부) */
							TO_CHAR(SUM(TUR), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TUR00'), '0')) TUR,
							TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'CON00'), '0')) CON,
							TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'DOW00'), '0')) DOW,
							TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TMP00'), '0')) TMP,
							TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'PHY00'), '0')) PHY,
							/* 클로로필-a */
							TO_CHAR(SUM(TOF), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TOF00'), '0')) TOF,
						</isEqual>
						
					  SUM(TOF_OR) TOF_OR,
					  SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
						SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
						SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
						SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
					  SUM(TUR_OR) TUR_OR,
					  /* 생물독성(물고기) */
					  TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
					  SUM(IMP_OR) IMP_OR,
					  /* 생물독성(물벼룩1) */
					  TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
					  TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
					  SUM(LIM_OR) LIM_OR,
					  SUM(RIM_OR) RIM_OR,
					  /* 생물독성(물벼룩2) */
					  TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
					  TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
					  SUM(LTX_OR) LTX_OR,
					  SUM(RTX_OR) RTX_OR,
						/* 생물독성(미생물) */
					  TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
					  SUM(TOX_OR) TOX_OR,
						/* 생물독성(조류) */
					  TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
					  SUM(EVN_OR) EVN_OR,
						
					  /* 휘발성 유기화합물 */
					  TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
					  TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
					  TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
					  TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
					  TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
					  TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
					  TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
					  TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
					  TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
					  TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
					  TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
					  TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
					  TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
					  TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
					  TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
					  SUM(VOC1_OR) VOC1_OR,
					  SUM(VOC2_OR) VOC2_OR,
					  SUM(VOC3_OR) VOC3_OR,
					  SUM(VOC4_OR) VOC4_OR,
					  SUM(VOC5_OR) VOC5_OR,
					  SUM(VOC6_OR) VOC6_OR,
					  SUM(VOC7_OR) VOC7_OR,
					  SUM(VOC8_OR) VOC8_OR,
					  SUM(VOC9_OR) VOC9_OR,
					  SUM(VOC10_OR) VOC10_OR,
					  SUM(VOC11_OR) VOC11_OR,
					  SUM(VOC12_OR) VOC12_OR,
					  SUM(VOC13_OR) VOC13_OR,
					  SUM(VOC14_OR) VOC14_OR,
					  SUM(VOC15_OR) VOC15_OR,
					  /* 중금속 */
					  TO_CHAR(SUM(COP), 'FM999,990.00') COP,
					  TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
					  TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
					  TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
					  SUM(COP_OR) COP_OR,
					  SUM(PLU_OR) PLU_OR,
					  SUM(ZIN_OR) ZIN_OR,
					  SUM(CAD_OR) CAD_OR,
					  /* 페놀 */
					  TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
					  TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
					  SUM(PHE_OR) PHE_OR,
					  SUM(PHL_OR) PHL_OR,
						/* 유기물질 */
					  TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
					  SUM(TOC_OR) TOC_OR,
					  /* 영양염류 */
					  TO_CHAR(SUM(TON), 'FM999,990.00') TON,
					  TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
					  TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
					  TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
					  TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
					  SUM(TON_OR) TON_OR,
					  SUM(TOP_OR) TOP_OR,
					  SUM(NH4_OR) NH4_OR,
					  SUM(NO3_OR) NO3_OR,
					  SUM(PO4_OR) PO4_OR,
					  /* 강수량계 */
					  TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
					  SUM(RIN_OR) RIN_OR, 
						BRANCH_NAME  
			  FROM (			
					SELECT F1.FACT_CODE,
							  D1.FACT_NAME, 
							  F1.BRANCH_NO,
							  D1.BRANCH_NAME,
							  F1.MIN_TIME AS R_MINTIME,
							  TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
								/*  일반항목 내부 */
							  DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
							  DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
							  DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
							  DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
							  DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
							  DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
							  DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
							  DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
							  /* 일반 항목 외부 */
							  DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
							  DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
							  DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
							  DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
							  DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
							  DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
							  DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
							  DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
							  DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
							  DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
							  /* 생물 독성 (물고기)*/
							  DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
							  DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
							  /* 생물 독성 (물벼룩1) */
							  DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
							  DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
							  DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
							  DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
							  /* 생물 독성 (물벼룩2) */
							  DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
							  DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
							  DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
							  DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
							  /* 생물 독성 (미생물) */
							  DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
							  DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
							  /* 생물 독성 (조류) */
							  DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
							  DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
							  /* 클로로필-a */
							  DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
							  DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
							  /* 휘발성 유기화합물 */
							  DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
							  DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
							  DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
							  DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
							  DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
							  DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
							  DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
							  DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
							  DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
							  DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
							  DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
							  DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
							  DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
							  DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
							  DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
							  DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
							  DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
							  DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
							  DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
							  DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
							  DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
							  DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
							  DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
							  DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
							  DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
							  DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
							  DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
							  DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
							  DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
							  DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
							  /* 중금속 */
							  DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
							  DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
							  DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
							  DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
							  DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
							  DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
							  DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
							  DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
							  /* 페놀 */
							  DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
							  DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
							  DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
							  DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
							  /* 유기물질 */
							  DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
							  DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
							  /* 영양염류 */
							  DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
							  DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
							  DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
							  DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
							  DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
							  DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
							  DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
							  DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
							  DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
							  DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
							  /* 강수량계 */
							  DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
							  DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
								TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL,
								D1.RIVER_DIV,
								DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
								SUBSTR(F1.FACT_CODE,6,2) AS NOD,
								D1.SYS_KIND,
								(
								SELECT SYS_KIND_NAME
									FROM T_SYS_KIND 
								 WHERE SYS_KIND = D1.SYS_KIND
								) SYS_KIND_NAME
					  FROM  
								(
								SELECT F.FACT_CODE,
											F.BRANCH_NO,
											F.MIN_TIME, 
											F.ITEM_CODE,
											(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
											MIN_VL,
											MIN_OR
								  FROM T_MIN_DATA F
								WHERE 
									F.FACT_CODE = #fact_code#
									AND F.MIN_TIME >=
										( 
										 SELECT SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' NOW 
										  FROM DUAL 
										)
									AND F.MIN_DCD = '0'
							  ) F1,
							  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG, 
											F.SYS_KIND, F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
									FROM T_FACT_INFO F,
											T_FACT_BRANCH_INFO D
								 WHERE F.FACT_CODE = D.FACT_CODE  
											AND D.BRANCH_USE_FLAG = 'Y'
							  ) D1,
							  T_FACT_MEASU_ITEM I
					 WHERE F1.FACT_CODE = D1.FACT_CODE
						 AND F1.BRANCH_NO = D1.BRANCH_NO
						 AND D1.FACT_USE_FLAG = 'Y'
						 AND F1.BRANCH_NO = #branch_no#
						 AND I.ITEM_CODE = F1.ITEM_CODE
						 AND I.FACT_CODE = F1.FACT_CODE
						 AND I.BRANCH_NO = F1.BRANCH_NO
						 AND I.ITEM_USE_FLAG = 'Y'
				)				 
			GROUP BY FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME, R_MINTIME, 
						  RIVER_DIV, RIVER_NAME, NOD,
						  SYS_KIND, SYS_KIND_NAME, BRANCH_NAME 
			<isNotEqual property="sys" compareValue="U"> 
				<isEqual property="orderby" compareValue="asc" >	
						ORDER BY MIN_TIME ASC, FACT_CODE ASC, BRANCH_NO ASC
				  </isEqual>
				<isEqual property="orderby" compareValue="desc" >
						ORDER BY MIN_TIME DESC, FACT_CODE ASC, BRANCH_NO ASC
				</isEqual> 
			</isNotEqual>
		<isEqual property="sys" compareValue="U"> 
			) AA,
			 (
							SELECT 
								Q.MIN_TIME, 
								TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
								TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
								A.FACT_CODE, 
								A.BRANCH_NO, 
								A.FACT_NAME,
								A.BRANCH_NAME,
								A.SYS_KIND,
								A.RIVER_NAME,
								A.SYS_KIND_NAME
							FROM
							(
							<isEqual property="sys" compareValue="U">
								<![CDATA[
									 SELECT
										TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI')+(LEVEL*10/24/60)-(10/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
								FROM
								(
									SELECT 
											SYSDATE - TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI') + (20/24/60) AS DAYCNT
									FROM DUAL
								  )
								CONNECT BY (LEVEL*10/24/60+(10/24/60)) < DAYCNT
								]]>
								</isEqual>
								<isEqual property="sys" compareValue="T">
								<![CDATA[
									SELECT
										TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI')+(LEVEL*30/24/60)-(30/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
									FROM
									(
										SELECT 
												SYSDATE - TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI') + (60/24/60) AS DAYCNT
										FROM DUAL
									  )
									CONNECT BY (LEVEL*30/24/60+(30/24/60)) < DAYCNT
								]]>
								</isEqual>
								<isEqual property="sys" compareValue="A">
								<![CDATA[
									SELECT
										TO_CHAR(TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI')+(LEVEL*5/24/60)-(5/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
									FROM
									(
										SELECT 
												SYSDATE - TO_DATE(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'), 0, 8)||'0000' , 'YYYYMMDDHH24MI') + (10/24/60) AS DAYCNT
										FROM DUAL
									  )
									CONNECT BY (LEVEL*5/24/60+(5/24/60)) < DAYCNT
								]]>
								</isEqual>
							) Q,
							(
								SELECT 
									B.FACT_CODE,
									B.BRANCH_NO,
									AREA.REG_NAME AS FACT_NAME,
									B.BRANCH_NAME||'-'||B.BRANCH_NO BRANCH_NAME,
									DECODE(F.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') AS RIVER_NAME,
									F.SYS_KIND,
									(
									SELECT SYS_KIND_NAME 
										FROM T_SYS_KIND 
									 WHERE SYS_KIND =  F.SYS_KIND
									) SYS_KIND_NAME
								FROM
									T_FACT_INFO F,
									T_FACT_BRANCH_INFO B,
									T_WEATHER_AREA AREA
								WHERE
									F.FACT_CODE = B.FACT_CODE
									AND B.BRANCH_USE_FLAG = 'Y'
									AND AREA.FACT_CODE(+) = B.FACT_CODE
									AND AREA.BRANCH_NO(+) = B.BRANCH_NO
									AND F.FACT_CODE =#fact_code#
									AND B.BRANCH_NO = #branch_no#
							) A
							WHERE
								<![CDATA[TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI') <= SYSDATE]]>
					) QQ
			WHERE
				AA.R_MINTIME(+) = QQ.MIN_TIME 
				AND AA.FACT_CODE(+) = QQ.FACT_CODE
				AND AA.BRANCH_NO(+) = QQ.BRANCH_NO
			 <isEqual property="orderby" compareValue="asc" >
					ORDER BY QQ.MIN_TIME ASC, QQ.FACT_CODE ASC, QQ.BRANCH_NO ASC
			 </isEqual>
			<isEqual property="orderby" compareValue="desc" >
				  ORDER BY QQ.MIN_TIME DESC, QQ.FACT_CODE ASC, QQ.BRANCH_NO ASC
			</isEqual>
		</isEqual>
	</statement>
	
	
	<statement id="getTotalMntMainDetailTS_TMS"  parameterClass="totalMntMainDetailSearchTSVO" resultClass="totalMntMainDetailTSVO" remapResults="true">
			<![CDATA[
			SELECT *
  FROM (
       SELECT ROWNUM RNUM
            , T.*
         FROM (
              SELECT FACTCODE AS FACT_CODE
                   , FACTNAME AS FACT_NAME
                   , BRANCHNO AS BRANCH_NO
                   , FACTNAME ||'-'||BRANCH_NAME as BRANCH_NAME 
                   , MINTIME AS R_MINTIME
                   , TO_CHAR(TO_DATE(MINTIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') AS MIN_TIME
                   , STRDATE 
                   , STRTIME 
                   , MINDUMP
                   , TO_CHAR(SUM(PHY), 'FM999,990.00') PHY
                   , TO_CHAR(SUM(BOD), 'FM999,990.00') BOD
                   , TO_CHAR(SUM(COD), 'FM999,990.00') COD
                   , TO_CHAR(SUM(SUS), 'FM999,990.00') SUS
                   , TO_CHAR(SUM(TOP), 'FM999,990.00') TOP
                   , TO_CHAR(SUM(TON), 'FM999,990.00') TON
                   , TO_CHAR(SUM(FLW), 'FM999,990') FLW
                   , SUM(PHY_OR) PHY_OR
                   , SUM(BOD_OR) BOD_OR
                   , SUM(COD_OR) COD_OR
                   , SUM(SUS_OR) SUS_OR
                   , SUM(TOP_OR) TOP_OR
                   , SUM(TON_OR) TON_OR
                   , SUM(FLW_OR) FLW_OR
                   , MAX(MINST) MINST
                   , MAX(MINAB) MINAB
                   , RIVER_DIV
                   , RIVER_NAME
                   , SYS_KIND
                   , SYS_KIND_NAME
                FROM (
                     SELECT A.ITEM_CODE AS ITEMCODE
                          , B.ITEM_NAME AS ITEMNAME
                          , A.FACT_CODE AS FACTCODE
                          , C.FACT_NAME AS FACTNAME
                          , A.WAST_NO AS BRANCHNO
                          , A.WAST_NO BRANCH_NAME
                          , A.MIN_TIME AS MINTIME
                          , TO_CHAR(TO_DATE(A.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD') AS STRDATE
                          , TO_CHAR(TO_DATE(A.MIN_TIME, 'YYYYMMDDHH24MI'), 'HH24:MI') AS STRTIME
                          , A.MIN_DUMP AS MINDUMP
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'PHY', MIN_VL) PHY
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'BOD', MIN_VL) BOD
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'COD', MIN_VL) COD
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'SUS', MIN_VL) SUS
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TOP', MIN_VL) TOP
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TON', MIN_VL) TON
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'FLW', MIN_VL) FLW
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'PHY', MIN_OR) PHY_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'BOD', MIN_OR) BOD_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'COD', MIN_OR) COD_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'SUS', MIN_OR) SUS_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TOP', MIN_OR) TOP_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'TON', MIN_OR) TON_OR
                          , DECODE(SUBSTR(A.ITEM_CODE, 0, 3), 'FLW', MIN_OR) FLW_OR
                          , A.MIN_ST AS MINST
                          , A.MIN_AB AS MINAB
                          , 'R'||AREA.AREA_GBN AS RIVER_DIV
                          , DECODE(AREA.AREA_GBN, '01', '수도권', '02', '충청/강원', '03', '영남', '04', '호남') AS RIVER_NAME
                          , 'W' SYS_KIND
                          , '수질TMS' SYS_KIND_NAME 
                       FROM WTMSC_MIN_REAL@TMS A
                          , WTMSC_ITEM@TMS B
                          , WTMSC_FACT@TMS C
                          , WTMSC_FACT_WAST@TMS D
                          , WTMSC_AREA@TMS AREA
                      WHERE A.ITEM_CODE = B.ITEM_CODE
                        AND A.FACT_CODE = C.FACT_CODE
                        AND C.FACT_CODE = D.FACT_CODE
                        AND A.WAST_NO = D.WAST_NO
                        AND D.WAST_USED = 'Y'
                        AND C.FACT_USED = 'Y'
                        AND AREA.CTY_CODE = C.CTY_CODE and  A.FACT_CODE = #fact_code# and A.WAST_NO = #branch_no#
                        AND A.MIN_TIME BETWEEN TO_CHAR(SYSDATE,'YYYYMMDD')||'0000'
                        AND TO_CHAR(SYSDATE,'YYYYMMDD')||'9999'
                   )
               GROUP BY FACTCODE, FACTNAME, BRANCHNO, BRANCH_NAME, STRDATE, STRTIME, MINTIME, STRDATE, STRTIME, MINDUMP, RIVER_DIV, RIVER_NAME, SYS_KIND, SYS_KIND_NAME
               ORDER BY STRDATE DESC, STRTIME DESC, FACTNAME ASC, BRANCHNO ASC
            ) T
     )
	]]>
	</statement>
	
<!--	<statement id="getNextFact_U" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO"> -->
<!--		 SELECT  -->
<!--					FACT_CODE, -->
<!--					BRANCH_NO, -->
<!--					BRANCH_NAME -->
<!--		  from  -->
<!--			  ( -->
<!--				  SELECT -->
<!--					  FACT_CODE AS FACT_CODE, -->
<!--					  BRANCH_NO as BRANCH_NO, -->
<!--					  BRANCH_NAME AS BRANCH_NAME -->
<!--					FROM -->
<!--						T_FACT_BRANCH_INFO -->
<!--					WHERE -->
<!--						FACT_CODE = #fact_code# -->
<!--						AND BRANCH_USE_FLAG = 'Y' -->
<!--					  <isEqual property="isNext" compareValue="Y"> -->
<!--					  <![CDATA[ -->
<!--						  AND BRANCH_NO > #branch_no# -->
<!--							ORDER BY BRANCH_NO ASC -->
<!--					  ]]> -->
<!--					  </isEqual> -->
<!--					  <isNotEqual property="isNext" compareValue="Y"> -->
<!--					  <![CDATA[ -->
<!--						  AND BRANCH_NO < #branch_no# -->
<!--						  ORDER BY BRANCH_NO DESC -->
<!--						]]> -->
<!--					  </isNotEqual> -->
<!--				) -->
<!--		  where -->
<!--			  rownum = 1 -->
<!--	</statement> -->
	
	<statement id="getNextFact_U" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO">
			SELECT 
				  FACT_CODE
				, BRANCH_NO
				, BRANCH_NAME
			FROM
				(
					SELECT
						  A.FACT_CODE AS FACT_CODE
						, B.BRANCH_NO AS BRANCH_NO
						, B.BRANCH_NAME AS BRANCH_NAME
					FROM
					T_FACT_INFO A, T_FACT_BRANCH_INFO B,
					(
						SELECT A1.RIVER_DIV, B1.BRANCH_MAP_Y
						FROM T_FACT_INFO A1, T_FACT_BRANCH_INFO B1
						WHERE A1.FACT_CODE = #fact_code#
							AND A1.SYS_KIND = #sys_kind#
							AND A1.FACT_CODE = B1.FACT_CODE
							AND A1.FACT_USE_FLAG = 'Y'
							AND B1.BRANCH_USE_FLAG = 'Y'
					) C
					WHERE
						A.FACT_CODE = B.FACT_CODE
					AND A.FACT_USE_FLAG = 'Y'
					AND B.BRANCH_USE_FLAG = 'Y'
					AND A.RIVER_DIV = C.RIVER_DIV
					AND A.SYS_KIND = #sys_kind#
				<isNotEqual property="nearAll" compareValue="all">
					AND B.BRANCH_NO != #branch_no#
				<isEqual property="isNext" compareValue="Y">
					<![CDATA[
					AND B.BRANCH_MAP_Y > C.BRANCH_MAP_Y
					ORDER BY B.BRANCH_MAP_Y ASC
					]]>
				</isEqual>
				<isNotEqual property="isNext" compareValue="Y">
					<![CDATA[
					AND B.BRANCH_MAP_Y < C.BRANCH_MAP_Y
					ORDER BY B.BRANCH_MAP_Y DESC
					]]>
				</isNotEqual>
				</isNotEqual>
				)
			WHERE
					ROWNUM = 1
	</statement>
	
		<statement id="getWatersysMntMainDetail" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO" remapResults="true">
				<isEqual property="sys_kind" compareValue="U">
					SELECT
						QQ.FACT_CODE, QQ.FACT_NAME, QQ.BRANCH_NO, QQ.BRANCH_NAME, QQ.MIN_TIME,
						QQ.STRDATE, QQ.STRTIME,
						TUR, CON, DOW, TMP, PHY, CON_OR, DOW_OR, TMP_OR, PHY_OR, TUR_OR,
						IMP, LIM, RIM, LIM_OR, RIM_OR, LTX, RTX, LTX_OR, RTX_OR, TOX, TOX_OR, EVN, EVN_OR, TOF, TOF_OR,
						VOC1, VOC2, VOC3, VOC4, VOC5, VOC6, VOC7, VOC8, VOC9, VOC10, VOC11, VOC12, VOC13, VOC14, VOC15,
						VOC1_OR, VOC2_OR, VOC3_OR, VOC4_OR, VOC5_OR, VOC6_OR, VOC7_OR, VOC8_OR, VOC9_OR, VOC10_OR, VOC11_OR, VOC12_OR, VOC13_OR, VOC14_OR, VOC15_OR,
						COP, PLU, ZIN, CAD, PHE, PHL, TOC, TON, TOP, NH4, NO3, PO4, RIN
						COP_OR, PLU_OR, ZIN_OR, CAD_OR, PHE_OR, PHL_OR, TOC_OR, TON_OR, TOP_OR, NH4_OR, NO3_OR, PO4_OR, RIN_OR,
						QQ.RIVER_NAME, QQ.SYS_KIND_NAME, QQ.SYS_KIND
					FROM
					(
				</isEqual>
						SELECT FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD') AS STRDATE,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'HH24:MI') AS STRTIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME,
								FACT_MGR,
								BRANCH_CNT,
								FACT_TEL_NO,
								FACT_EMAIL,
								/* 일반 항목 (내부) 
								TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
								TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
								TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
								TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
								TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
								*/
								TO_CHAR(SUM(TUR), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TUR00'), '0') ) TUR, 
								TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'CON00'), '0')) CON, 
								TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'DOW00'), '0')) DOW, 
								TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TMP00'), '0')) TMP, 
								TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'PHY00'), '0')) PHY,
								
								
								
								
								SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
								SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
								SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
								SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
								SUM(TUR_OR) TUR_OR,
								/* 생물독성(물고기) */
								TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
								SUM(IMP_OR) IMP_OR,
								/* 생물독성(물벼룩1) */
								TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
								TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
								SUM(LIM_OR) LIM_OR,
								SUM(RIM_OR) RIM_OR,
								/* 생물독성(물벼룩2) */
								TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
								TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
								SUM(LTX_OR) LTX_OR,
								SUM(RTX_OR) RTX_OR,
								/* 생물독성(미생물) */
								TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
								SUM(TOX_OR) TOX_OR,
								/* 생물독성(조류) */
								TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
								SUM(EVN_OR) EVN_OR,
								/* 클로로필-a */
								TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
								SUM(TOF_OR) TOF_OR,
								/* 휘발성 유기화합물 */
								TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
								TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
								TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
								TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
								TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
								TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
								TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
								TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
								TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
								TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
								TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
								TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
								TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
								TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
								TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
								SUM(VOC1_OR) VOC1_OR,
								SUM(VOC2_OR) VOC2_OR,
								SUM(VOC3_OR) VOC3_OR,
								SUM(VOC4_OR) VOC4_OR,
								SUM(VOC5_OR) VOC5_OR,
								SUM(VOC6_OR) VOC6_OR,
								SUM(VOC7_OR) VOC7_OR,
								SUM(VOC8_OR) VOC8_OR,
								SUM(VOC9_OR) VOC9_OR,
								SUM(VOC10_OR) VOC10_OR,
								SUM(VOC11_OR) VOC11_OR,
								SUM(VOC12_OR) VOC12_OR,
								SUM(VOC13_OR) VOC13_OR,
								SUM(VOC14_OR) VOC14_OR,
								SUM(VOC15_OR) VOC15_OR,
								/* 중금속 */
								TO_CHAR(SUM(COP), 'FM999,990.00') COP,
								TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
								TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
								TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
								SUM(COP_OR) COP_OR,
								SUM(PLU_OR) PLU_OR,
								SUM(ZIN_OR) ZIN_OR,
								SUM(CAD_OR) CAD_OR,
								/* 페놀 */
								TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
								TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
								SUM(PHE_OR) PHE_OR,
								SUM(PHL_OR) PHL_OR,
								/* 유기물질 */
								TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
								SUM(TOC_OR) TOC_OR,
								/* 영양염류 */
								TO_CHAR(SUM(TON), 'FM999,990.00') TON,
								TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
								TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
								TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
								TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
								SUM(TON_OR) TON_OR,
								SUM(TOP_OR) TOP_OR,
								SUM(NH4_OR) NH4_OR,
								SUM(NO3_OR) NO3_OR,
								SUM(PO4_OR) PO4_OR,
								/* 강수량계 */
								TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
								SUM(RIN_OR) RIN_OR,
								BRANCH_NAME
					  FROM (
							SELECT F1.FACT_CODE,
										D1.FACT_NAME,
										D1.FACT_MGR,
										D1.FACT_ADDR,
										D1.FACT_TEL_NO,
										D1.FACT_EMAIL,
										D1.BRANCH_CNT,
										F1.BRANCH_NO, 
										TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
										 /*  일반항목 내부 */
										DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
										DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
										/* 일반 항목 외부 */
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
										/* 생물 독성 (물고기)*/
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
										/* 생물 독성 (물벼룩1) */
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
										/* 생물 독성 (물벼룩2) */
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
										/* 생물 독성 (미생물) */
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
										/* 생물 독성 (조류) */
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
										/* 클로로필-a */
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
										/* 휘발성 유기화합물 */
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
										/* 중금속 */
										DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
										DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
										/* 페놀 */
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
										/* 유기물질 */
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
										/* 영양염류 */
										DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
										DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
										/* 강수량계 */
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
										TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL,
										D1.RIVER_DIV,
										DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
										SUBSTR(F1.FACT_CODE,6,2) AS NOD,
										D1.SYS_KIND,
										D1.BRANCH_NAME,
										(
										SELECT SYS_KIND_NAME 
											FROM T_SYS_KIND 
										 WHERE SYS_KIND =  D1.SYS_KIND
										) SYS_KIND_NAME
							  FROM 
										(
										SELECT F.FACT_CODE,
													F.BRANCH_NO,
													F.MIN_TIME, 
													F.ITEM_CODE,
													(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
													MIN_VL,
													MIN_OR
										  FROM T_MIN_DATA F
									 <![CDATA[
										WHERE F.FACT_CODE = #fact_code# 
											AND F.MIN_TIME BETWEEN #frDate#||#frTime#||'00' AND #toDate#||#toTime#||'59'
									]]>
											AND F.MIN_DCD = '0'
									  ) F1,
									  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG,
													F.BRANCH_CNT, F.SYS_KIND, F.FACT_EMAIL,
													F.FACT_MGR, F.FACT_ADDR, F.FACT_TEL_NO,
													F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
											FROM T_FACT_INFO F,
													T_FACT_BRANCH_INFO D
										 WHERE F.FACT_CODE = D.FACT_CODE 
													 AND D.BRANCH_USE_FLAG = 'Y'
									  ) D1,
									T_FACT_MEASU_ITEM I
							WHERE F1.FACT_CODE = D1.FACT_CODE
								 AND F1.BRANCH_NO = D1.BRANCH_NO
								 AND D1.FACT_USE_FLAG = 'Y'
								 AND I.ITEM_CODE = F1.ITEM_CODE
								 AND I.FACT_CODE = F1.FACT_CODE
								 AND I.BRANCH_NO = F1.BRANCH_NO
								 AND F1.BRANCH_NO = #branch_no#
								 AND I.ITEM_USE_FLAG = 'Y'
						)				 
					GROUP BY FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME, 
								FACT_MGR, FACT_ADDR,FACT_TEL_NO, 
								FACT_EMAIL, BRANCH_CNT, BRANCH_NAME
					ORDER BY MIN_TIME DESC
			<isEqual property="sys_kind" compareValue="U">
			) AA,
			 (
					SELECT 
						 TO_CHAR(TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
						A.FACT_CODE,
						A.BRANCH_NO,
						A.FACT_NAME,
						A.BRANCH_NAME,
						A.SYS_KIND,
						A.RIVER_NAME,
						A.SYS_KIND_NAME
					FROM
					(
						<isEqual property="sys_kind" compareValue="U">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*10/24/60)-(10/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (20/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*10/24/60+(10/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="T">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*30/24/60)-(30/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (60/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*30/24/60+(30/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="A">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*5/24/60)-(5/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (10/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*5/24/60+(5/24/60)) < DAYCNT
						]]>
						</isEqual>
					) Q,
					(
						SELECT
							B.FACT_CODE,
							B.BRANCH_NO,
							AREA.REG_NAME AS FACT_NAME,
							B.BRANCH_NAME||'-'||B.BRANCH_NO BRANCH_NAME,
							DECODE(F.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') AS RIVER_NAME,
							F.SYS_KIND,
							(
							SELECT SYS_KIND_NAME
								FROM T_SYS_KIND
							 WHERE SYS_KIND = F.SYS_KIND
							) SYS_KIND_NAME
						FROM
							T_FACT_INFO F,
							T_FACT_BRANCH_INFO B,
							T_WEATHER_AREA AREA
						WHERE
							F.FACT_CODE = B.FACT_CODE
								AND B.BRANCH_USE_FLAG = 'Y'
								AND AREA.FACT_CODE(+) = B.FACT_CODE
								AND AREA.BRANCH_NO(+) = B.BRANCH_NO
								AND F.FACT_CODE = #fact_code#
								AND B.BRANCH_NO = #branch_no#
					) A
					WHERE
						<![CDATA[TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI') <= SYSDATE]]>
			) QQ
					WHERE
						AA.MIN_TIME(+) = QQ.MIN_TIME
						AND AA.FACT_CODE(+) = QQ.FACT_CODE
						AND AA.BRANCH_NO(+) = QQ.BRANCH_NO
					 ORDER BY QQ.MIN_TIME DESC, QQ.FACT_CODE ASC, QQ.BRANCH_NO ASC
		 </isEqual>
	</statement>
	

	
<!--	2014-10-21 mypark 페이징 추가(총 카운트) -->
	<statement id="getWatersysMntMainDetail_all_count" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="java.lang.Integer" >
		SELECT COUNT(*) FROM (		
				<isEqual property="sys_kind" compareValue="U">
					SELECT
						QQ.FACT_CODE, QQ.FACT_NAME, QQ.BRANCH_NO, QQ.BRANCH_NAME, QQ.MIN_TIME,
						QQ.STRDATE, QQ.STRTIME,
						TUR, CON, DOW, TMP, PHY, CON_OR, DOW_OR, TMP_OR, PHY_OR, TUR_OR,
						IMP, LIM, RIM, LIM_OR, RIM_OR, LTX, RTX, LTX_OR, RTX_OR, TOX, TOX_OR, EVN, EVN_OR, TOF, TOF_OR,
						VOC1, VOC2, VOC3, VOC4, VOC5, VOC6, VOC7, VOC8, VOC9, VOC10, VOC11, VOC12, VOC13, VOC14, VOC15,
						VOC1_OR, VOC2_OR, VOC3_OR, VOC4_OR, VOC5_OR, VOC6_OR, VOC7_OR, VOC8_OR, VOC9_OR, VOC10_OR, VOC11_OR, VOC12_OR, VOC13_OR, VOC14_OR, VOC15_OR,
						COP, PLU, ZIN, CAD, PHE, PHL, TOC, TON, TOP, NH4, NO3, PO4, RIN
						COP_OR, PLU_OR, ZIN_OR, CAD_OR, PHE_OR, PHL_OR, TOC_OR, TON_OR, TOP_OR, NH4_OR, NO3_OR, PO4_OR, RIN_OR,
						QQ.RIVER_NAME, QQ.SYS_KIND_NAME, QQ.SYS_KIND
					FROM
					(
				</isEqual>
						SELECT FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD') AS STRDATE,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'HH24:MI') AS STRTIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME,
								FACT_MGR,
								BRANCH_CNT,
								FACT_TEL_NO,
								FACT_EMAIL,
								/* 일반 항목 (내부) */
								TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
								TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
								TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
								TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
								TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
								
								SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
								SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
								SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
								SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
								SUM(TUR_OR) TUR_OR,
								/* 생물독성(물고기) */
								TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
								SUM(IMP_OR) IMP_OR,
								/* 생물독성(물벼룩1) */
								TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
								TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
								SUM(LIM_OR) LIM_OR,
								SUM(RIM_OR) RIM_OR,
								/* 생물독성(물벼룩2) */
								TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
								TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
								SUM(LTX_OR) LTX_OR,
								SUM(RTX_OR) RTX_OR,
								/* 생물독성(미생물) */
								TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
								SUM(TOX_OR) TOX_OR,
								/* 생물독성(조류) */
								TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
								SUM(EVN_OR) EVN_OR,
								/* 클로로필-a */
								TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
								
								SUM(TOF_OR) TOF_OR,
								/* 휘발성 유기화합물 */
								TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
								TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
								TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
								TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
								TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
								TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
								TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
								TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
								TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
								TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
								TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
								TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
								TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
								TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
								TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
								SUM(VOC1_OR) VOC1_OR,
								SUM(VOC2_OR) VOC2_OR,
								SUM(VOC3_OR) VOC3_OR,
								SUM(VOC4_OR) VOC4_OR,
								SUM(VOC5_OR) VOC5_OR,
								SUM(VOC6_OR) VOC6_OR,
								SUM(VOC7_OR) VOC7_OR,
								SUM(VOC8_OR) VOC8_OR,
								SUM(VOC9_OR) VOC9_OR,
								SUM(VOC10_OR) VOC10_OR,
								SUM(VOC11_OR) VOC11_OR,
								SUM(VOC12_OR) VOC12_OR,
								SUM(VOC13_OR) VOC13_OR,
								SUM(VOC14_OR) VOC14_OR,
								SUM(VOC15_OR) VOC15_OR,
								/* 중금속 */
								TO_CHAR(SUM(COP), 'FM999,990.00') COP,
								TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
								TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
								TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
								SUM(COP_OR) COP_OR,
								SUM(PLU_OR) PLU_OR,
								SUM(ZIN_OR) ZIN_OR,
								SUM(CAD_OR) CAD_OR,
								/* 페놀 */
								TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
								TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
								SUM(PHE_OR) PHE_OR,
								SUM(PHL_OR) PHL_OR,
								/* 유기물질 */
								TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
								SUM(TOC_OR) TOC_OR,
								/* 영양염류 */
								TO_CHAR(SUM(TON), 'FM999,990.00') TON,
								TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
								TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
								TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
								TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
								SUM(TON_OR) TON_OR,
								SUM(TOP_OR) TOP_OR,
								SUM(NH4_OR) NH4_OR,
								SUM(NO3_OR) NO3_OR,
								SUM(PO4_OR) PO4_OR,
								/* 강수량계 */
								TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
								SUM(RIN_OR) RIN_OR,
								BRANCH_NAME||'-'||BRANCH_NO BRANCH_NAME
					  FROM (
							SELECT F1.FACT_CODE,
										D1.FACT_NAME,
										D1.FACT_MGR,
										D1.FACT_ADDR,
										D1.FACT_TEL_NO,
										D1.FACT_EMAIL,
										D1.BRANCH_CNT,
										F1.BRANCH_NO, 
										TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
										 /*  일반항목 내부 */
										DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
										DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
										/* 일반 항목 외부 */
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
										/* 생물 독성 (물고기)*/
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
										/* 생물 독성 (물벼룩1) */
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
										/* 생물 독성 (물벼룩2) */
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
										/* 생물 독성 (미생물) */
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
										/* 생물 독성 (조류) */
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
										/* 클로로필-a */
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
										/* 휘발성 유기화합물 */
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
										/* 중금속 */
										DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
										DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
										/* 페놀 */
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
										/* 유기물질 */
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
										/* 영양염류 */
										DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
										DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
										/* 강수량계 */
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
										TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL,
										D1.RIVER_DIV,
										DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
										SUBSTR(F1.FACT_CODE,6,2) AS NOD,
										D1.SYS_KIND,
										D1.BRANCH_NAME,
										(
										SELECT SYS_KIND_NAME 
											FROM T_SYS_KIND 
										 WHERE SYS_KIND =  D1.SYS_KIND
										) SYS_KIND_NAME
							  FROM 
										(
										SELECT F.FACT_CODE,
													F.BRANCH_NO,
													F.MIN_TIME, 
													F.ITEM_CODE,
													(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
													MIN_VL,
													MIN_OR
										  FROM T_MIN_DATA F
										WHERE 
											<isNotEqual property="nearAll" compareValue="all">
											  (
												(#beforeFactCode# IS NOT NULL AND ( F.FACT_CODE = #beforeFactCode# AND F.BRANCH_NO = #beforeBranchNo#))
												OR (#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND F.BRANCH_NO = #branch_no#))
												OR (#nextFactCode# IS NOT NULL AND ( F.FACT_CODE = #nextFactCode# AND F.BRANCH_NO = #nextBranchNo#))
											   ) 
											</isNotEqual>
											<isEqual property="nearAll" compareValue="all">
											  (
												(#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND F.BRANCH_NO = #branch_no#))
											   ) 
											</isEqual>
											AND F.MIN_TIME BETWEEN #frDate#||#frTime#||'00' AND #toDate#||#toTime#||'59'
											AND F.MIN_DCD = '0'
									  ) F1,
									  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG,
													F.BRANCH_CNT, F.SYS_KIND, F.FACT_EMAIL,
													F.FACT_MGR, F.FACT_ADDR, F.FACT_TEL_NO,
													F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
											FROM T_FACT_INFO F,
													T_FACT_BRANCH_INFO D
										 WHERE F.FACT_CODE = D.FACT_CODE 
													 AND D.BRANCH_USE_FLAG = 'Y'
													 AND   (
															(#beforeFactCode# IS NOT NULL AND ( D.FACT_CODE = #beforeFactCode# AND D.BRANCH_NO = #beforeBranchNo#))
															OR (#fact_code# IS NOT NULL AND ( D.FACT_CODE = #fact_code# AND D.BRANCH_NO = #branch_no#))
															OR (#nextFactCode# IS NOT NULL AND ( D.FACT_CODE = #nextFactCode# AND D.BRANCH_NO = #nextBranchNo#))
														   ) 
									  ) D1
							WHERE F1.FACT_CODE = D1.FACT_CODE
								 AND F1.BRANCH_NO = D1.BRANCH_NO
								 AND D1.FACT_USE_FLAG = 'Y'
								 AND   (
										(#beforeFactCode# IS NOT NULL AND ( F1.FACT_CODE = #beforeFactCode# AND F1.BRANCH_NO = #beforeBranchNo#))
										OR (#fact_code# IS NOT NULL AND ( F1.FACT_CODE = #fact_code# AND F1.BRANCH_NO = #branch_no#))
										OR (#nextFactCode# IS NOT NULL AND ( F1.FACT_CODE = #nextFactCode# AND F1.BRANCH_NO = #nextBranchNo#))
									   ) 
						)				 
					GROUP BY FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME, 
								FACT_MGR, FACT_ADDR,FACT_TEL_NO, 
								FACT_EMAIL, BRANCH_CNT, BRANCH_NAME
					ORDER BY MIN_TIME DESC, DECODE(FACT_CODE,#beforeFactCode#,1,#fact_code#,2,3)
			<isEqual property="sys_kind" compareValue="U">
			) AA,
			 (
					SELECT 
						 TO_CHAR(TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
						A.FACT_CODE,
						A.BRANCH_NO,
						A.FACT_NAME,
						A.BRANCH_NAME,
						A.SYS_KIND,
						A.RIVER_NAME,
						A.SYS_KIND_NAME
					FROM
					(
						<isEqual property="sys_kind" compareValue="U">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*10/24/60)-(10/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (20/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*10/24/60+(10/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="T">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*30/24/60)-(30/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (60/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*30/24/60+(30/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="A">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*5/24/60)-(5/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (10/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*5/24/60+(5/24/60)) < DAYCNT
						]]>
						</isEqual>
					) Q,
					(
						SELECT
							B.FACT_CODE,
							B.BRANCH_NO,
							AREA.REG_NAME AS FACT_NAME,
							B.BRANCH_NAME||'-'||B.BRANCH_NO BRANCH_NAME,
							DECODE(F.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') AS RIVER_NAME,
							F.SYS_KIND,
							(
							SELECT SYS_KIND_NAME
								FROM T_SYS_KIND
							 WHERE SYS_KIND = F.SYS_KIND
							) SYS_KIND_NAME
						FROM
							T_FACT_INFO F,
							T_FACT_BRANCH_INFO B,
							T_WEATHER_AREA AREA
						WHERE
							F.FACT_CODE = B.FACT_CODE
								AND B.BRANCH_USE_FLAG = 'Y'
								AND AREA.FACT_CODE(+) = B.FACT_CODE
								AND AREA.BRANCH_NO(+) = B.BRANCH_NO
								<isNotEqual property="nearAll" compareValue="all">
								AND (
								(#beforeFactCode# IS NOT NULL AND ( F.FACT_CODE = #beforeFactCode# AND B.BRANCH_NO = #beforeBranchNo#))
								 OR (#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND B.BRANCH_NO = #branch_no#))
								 OR (#nextFactCode# IS NOT NULL AND ( F.FACT_CODE = #nextFactCode# AND B.BRANCH_NO = #nextBranchNo#))
								) 
								</isNotEqual>
								<isEqual property="nearAll" compareValue="all">
								AND (
								(#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND B.BRANCH_NO = #branch_no#))
								) 
								</isEqual>
					) A
					WHERE
						<![CDATA[TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI') <= SYSDATE]]>
			) QQ
					WHERE
						AA.MIN_TIME = QQ.MIN_TIME
						AND AA.FACT_CODE = QQ.FACT_CODE
						AND AA.BRANCH_NO = QQ.BRANCH_NO
					<!-- ORDER BY QQ.MIN_TIME DESC, DECODE(QQ.BRANCH_NO,#beforeBranchNo#,1,#branch_no#,2,3) -->
		 </isEqual>
			)
	</statement>
<!--	2014-10-21 mypark 페이징 추가 -->
	
		<statement id="getWatersysMntMainDetail_all" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO" remapResults="true">
<!-- 2014-10-21 mypark 페이징 처리 추가 -->			
		SELECT * 
		  FROM ( 
			 SELECT ROWNUM RNUM, T.*
		   	   FROM (
<!-- 2014-10-21 mypark 페이징 처리 추가 -->				   	   
				<isEqual property="sys_kind" compareValue="U">
					SELECT
						QQ.FACT_CODE, QQ.FACT_NAME, QQ.BRANCH_NO, QQ.BRANCH_NAME, QQ.MIN_TIME,
						QQ.STRDATE, QQ.STRTIME,
						TUR, CON, DOW, TMP, PHY, CON_OR, DOW_OR, TMP_OR, PHY_OR, TUR_OR,
						IMP, LIM, RIM, LIM_OR, RIM_OR, LTX, RTX, LTX_OR, RTX_OR, TOX, TOX_OR, EVN, EVN_OR, TOF, TOF_OR,
						VOC1, VOC2, VOC3, VOC4, VOC5, VOC6, VOC7, VOC8, VOC9, VOC10, VOC11, VOC12, VOC13, VOC14, VOC15,
						VOC1_OR, VOC2_OR, VOC3_OR, VOC4_OR, VOC5_OR, VOC6_OR, VOC7_OR, VOC8_OR, VOC9_OR, VOC10_OR, VOC11_OR, VOC12_OR, VOC13_OR, VOC14_OR, VOC15_OR,
						COP, PLU, ZIN, CAD, PHE, PHL, TOC, TON, TOP, NH4, NO3, PO4, RIN
						COP_OR, PLU_OR, ZIN_OR, CAD_OR, PHE_OR, PHL_OR, TOC_OR, TON_OR, TOP_OR, NH4_OR, NO3_OR, PO4_OR, RIN_OR,
						QQ.RIVER_NAME, QQ.SYS_KIND_NAME, QQ.SYS_KIND
					FROM
					(
				</isEqual>
						SELECT FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD') AS STRDATE,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'HH24:MI') AS STRTIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME,
								FACT_MGR,
								BRANCH_CNT,
								FACT_TEL_NO,
								FACT_EMAIL,
								/* 일반 항목 (내부) 
								*/
								<isEqual property="sys_kind" compareValue="A">
								TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
								TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
								TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
								TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
								TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY, 
								</isEqual>
								<isEqual property="sys_kind" compareValue="U">
								TO_CHAR(SUM(TUR), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TUR00'), '0') ) TUR, 
								TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'CON00'), '0')) CON, 
								TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'DOW00'), '0')) DOW, 
								TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'TMP00'), '0')) TMP, 
								TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), RPAD('FM999,990.', 10+(SELECT VALUE_FORMAT FROM T_ITEM_INFO_ADD WHERE ITEM_CODE = 'PHY00'), '0')) PHY,
								</isEqual>
								
								
								SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
								SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
								SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
								SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
								SUM(TUR_OR) TUR_OR,
								/* 생물독성(물고기) */
								TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
								SUM(IMP_OR) IMP_OR,
								/* 생물독성(물벼룩1) */
								TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
								TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
								SUM(LIM_OR) LIM_OR,
								SUM(RIM_OR) RIM_OR,
								/* 생물독성(물벼룩2) */
								TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
								TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
								SUM(LTX_OR) LTX_OR,
								SUM(RTX_OR) RTX_OR,
								/* 생물독성(미생물) */
								TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
								SUM(TOX_OR) TOX_OR,
								/* 생물독성(조류) */
								TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
								SUM(EVN_OR) EVN_OR,
								/* 클로로필-a */
								TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
								SUM(TOF_OR) TOF_OR,
								/* 휘발성 유기화합물 */
								TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
								TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
								TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
								TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
								TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
								TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
								TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
								TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
								TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
								TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
								TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
								TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
								TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
								TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
								TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
								SUM(VOC1_OR) VOC1_OR,
								SUM(VOC2_OR) VOC2_OR,
								SUM(VOC3_OR) VOC3_OR,
								SUM(VOC4_OR) VOC4_OR,
								SUM(VOC5_OR) VOC5_OR,
								SUM(VOC6_OR) VOC6_OR,
								SUM(VOC7_OR) VOC7_OR,
								SUM(VOC8_OR) VOC8_OR,
								SUM(VOC9_OR) VOC9_OR,
								SUM(VOC10_OR) VOC10_OR,
								SUM(VOC11_OR) VOC11_OR,
								SUM(VOC12_OR) VOC12_OR,
								SUM(VOC13_OR) VOC13_OR,
								SUM(VOC14_OR) VOC14_OR,
								SUM(VOC15_OR) VOC15_OR,
								/* 중금속 */
								TO_CHAR(SUM(COP), 'FM999,990.00') COP,
								TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
								TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
								TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
								SUM(COP_OR) COP_OR,
								SUM(PLU_OR) PLU_OR,
								SUM(ZIN_OR) ZIN_OR,
								SUM(CAD_OR) CAD_OR,
								/* 페놀 */
								TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
								TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
								SUM(PHE_OR) PHE_OR,
								SUM(PHL_OR) PHL_OR,
								/* 유기물질 */
								TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
								SUM(TOC_OR) TOC_OR,
								/* 영양염류 */
								TO_CHAR(SUM(TON), 'FM999,990.00') TON,
								TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
								TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
								TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
								TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
								SUM(TON_OR) TON_OR,
								SUM(TOP_OR) TOP_OR,
								SUM(NH4_OR) NH4_OR,
								SUM(NO3_OR) NO3_OR,
								SUM(PO4_OR) PO4_OR,
								/* 강수량계 */
								TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
								SUM(RIN_OR) RIN_OR,
								BRANCH_NAME||'-'||BRANCH_NO BRANCH_NAME
					  FROM (
							SELECT F1.FACT_CODE,
										D1.FACT_NAME,
										D1.FACT_MGR,
										D1.FACT_ADDR,
										D1.FACT_TEL_NO,
										D1.FACT_EMAIL,
										D1.BRANCH_CNT,
										F1.BRANCH_NO, 
										TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
										 /*  일반항목 내부 */
										DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
										DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
										/* 일반 항목 외부 */
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
										/* 생물 독성 (물고기)*/
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
										/* 생물 독성 (물벼룩1) */
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
										/* 생물 독성 (물벼룩2) */
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
										/* 생물 독성 (미생물) */
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
										/* 생물 독성 (조류) */
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
										/* 클로로필-a */
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
										/* 휘발성 유기화합물 */
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
										/* 중금속 */
										DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
										DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
										/* 페놀 */
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
										/* 유기물질 */
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
										/* 영양염류 */
										DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
										DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
										/* 강수량계 */
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
										TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL,
										D1.RIVER_DIV,
										DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
										SUBSTR(F1.FACT_CODE,6,2) AS NOD,
										D1.SYS_KIND,
										D1.BRANCH_NAME,
										(
										SELECT SYS_KIND_NAME 
											FROM T_SYS_KIND 
										 WHERE SYS_KIND =  D1.SYS_KIND
										) SYS_KIND_NAME
							  FROM 
										(
										SELECT F.FACT_CODE,
													F.BRANCH_NO,
													F.MIN_TIME, 
													F.ITEM_CODE,
													(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
													MIN_VL,
													MIN_OR
										  FROM T_MIN_DATA F
										WHERE 
											<isNotEqual property="nearAll" compareValue="all">
											  (
												(#beforeFactCode# IS NOT NULL AND ( F.FACT_CODE = #beforeFactCode# AND F.BRANCH_NO = #beforeBranchNo#))
												OR (#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND F.BRANCH_NO = #branch_no#))
												OR (#nextFactCode# IS NOT NULL AND ( F.FACT_CODE = #nextFactCode# AND F.BRANCH_NO = #nextBranchNo#))
											   ) 
											</isNotEqual>
											<isEqual property="nearAll" compareValue="all">
											  (
												(#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code#))
											   ) 
											</isEqual>
											AND F.MIN_TIME BETWEEN #frDate#||#frTime#||'00' AND #toDate#||#toTime#||'59'
											AND F.MIN_DCD = '0'
									  ) F1,
									  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG,
													F.BRANCH_CNT, F.SYS_KIND, F.FACT_EMAIL,
													F.FACT_MGR, F.FACT_ADDR, F.FACT_TEL_NO,
													F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
											FROM T_FACT_INFO F,
													T_FACT_BRANCH_INFO D
										 WHERE F.FACT_CODE = D.FACT_CODE 
													 AND D.BRANCH_USE_FLAG = 'Y'
													 <isNotEqual property="nearAll" compareValue="all">
													 AND   (
															(#beforeFactCode# IS NOT NULL AND ( D.FACT_CODE = #beforeFactCode# AND D.BRANCH_NO = #beforeBranchNo#))
															OR (#fact_code# IS NOT NULL AND ( D.FACT_CODE = #fact_code# AND D.BRANCH_NO = #branch_no#))
															OR (#nextFactCode# IS NOT NULL AND ( D.FACT_CODE = #nextFactCode# AND D.BRANCH_NO = #nextBranchNo#))
														   ) 
													 </isNotEqual>
													 <isEqual property="nearAll" compareValue="all">
													 AND   (
															(#fact_code# IS NOT NULL AND ( D.FACT_CODE = #fact_code#))
														   ) 
													 </isEqual>
									  ) D1
<!-- 									T_FACT_MEASU_ITEM I -->
							WHERE F1.FACT_CODE = D1.FACT_CODE
								 AND F1.BRANCH_NO = D1.BRANCH_NO
								 AND D1.FACT_USE_FLAG = 'Y'
<!-- 								 AND I.ITEM_CODE = F1.ITEM_CODE -->
<!-- 								 AND I.FACT_CODE = F1.FACT_CODE -->
<!-- 								 AND I.BRANCH_NO = F1.BRANCH_NO -->
								<isNotEqual property="nearAll" compareValue="all">
								 AND   (
										(#beforeFactCode# IS NOT NULL AND ( F1.FACT_CODE = #beforeFactCode# AND F1.BRANCH_NO = #beforeBranchNo#))
										OR (#fact_code# IS NOT NULL AND ( F1.FACT_CODE = #fact_code# AND F1.BRANCH_NO = #branch_no#))
										OR (#nextFactCode# IS NOT NULL AND ( F1.FACT_CODE = #nextFactCode# AND F1.BRANCH_NO = #nextBranchNo#))
									   ) 
								</isNotEqual>
								<isEqual property="nearAll" compareValue="all">
								 AND   (
										(#fact_code# IS NOT NULL AND ( F1.FACT_CODE = #fact_code#))
									   ) 
								</isEqual>
<!--								 AND F1.BRANCH_NO IN (#beforeBranchNo#,#branch_no#,#nextBranchNo#) -->
<!--								 AND F1.BRANCH_NO = #branch_no# -->
<!-- 								 AND I.ITEM_USE_FLAG = 'Y' -->
						)				 
					GROUP BY FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME, 
								FACT_MGR, FACT_ADDR,FACT_TEL_NO, 
								FACT_EMAIL, BRANCH_CNT, BRANCH_NAME
					ORDER BY MIN_TIME DESC,
					<isNotEqual property="nearAll" compareValue="all"> 
					DECODE(FACT_CODE,#beforeFactCode#,1,#fact_code#,2,3)
					</isNotEqual>
					<isEqual property="nearAll" compareValue="all"> 
					DECODE(FACT_CODE,#fact_code#,1)
					</isEqual>
			<isEqual property="sys_kind" compareValue="U">
			) AA,
			 (
					SELECT 
						 TO_CHAR(TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
						A.FACT_CODE,
						A.BRANCH_NO,
						A.FACT_NAME,
						A.BRANCH_NAME,
						A.SYS_KIND,
						A.RIVER_NAME,
						A.SYS_KIND_NAME
					FROM
					(
						<isEqual property="sys_kind" compareValue="U">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*10/24/60)-(10/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (20/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*10/24/60+(10/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="T">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*30/24/60)-(30/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (60/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*30/24/60+(30/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="A">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*5/24/60)-(5/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (10/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*5/24/60+(5/24/60)) < DAYCNT
						]]>
						</isEqual>
					) Q,
					(
						SELECT
							B.FACT_CODE,
							B.BRANCH_NO,
							AREA.REG_NAME AS FACT_NAME,
							B.BRANCH_NAME||'-'||B.BRANCH_NO BRANCH_NAME,
							DECODE(F.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') AS RIVER_NAME,
							F.SYS_KIND,
							(
							SELECT SYS_KIND_NAME
								FROM T_SYS_KIND
							 WHERE SYS_KIND = F.SYS_KIND
							) SYS_KIND_NAME
						FROM
							T_FACT_INFO F,
							T_FACT_BRANCH_INFO B,
							T_WEATHER_AREA AREA
						WHERE
							F.FACT_CODE = B.FACT_CODE
								AND B.BRANCH_USE_FLAG = 'Y'
								AND AREA.FACT_CODE(+) = B.FACT_CODE
								AND AREA.BRANCH_NO(+) = B.BRANCH_NO
<!--								AND F.FACT_CODE = #fact_code# -->
								<isNotEqual property="nearAll" compareValue="all">
								AND (
								(#beforeFactCode# IS NOT NULL AND ( F.FACT_CODE = #beforeFactCode# AND B.BRANCH_NO = #beforeBranchNo#))
								 OR (#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND B.BRANCH_NO = #branch_no#))
								 OR (#nextFactCode# IS NOT NULL AND ( F.FACT_CODE = #nextFactCode# AND B.BRANCH_NO = #nextBranchNo#))
								) 
								</isNotEqual>
								<isEqual property="nearAll" compareValue="all">
								AND (
								(#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code#))
								) 
								</isEqual>
								
<!--								AND B.BRANCH_NO = #branch_no# -->
<!--								AND B.BRANCH_NO IN (#beforeBranchNo#,#branch_no#,#nextBranchNo#) -->
					) A
					WHERE
						<![CDATA[TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI') <= SYSDATE]]>
			) QQ
					WHERE
						AA.MIN_TIME = QQ.MIN_TIME
						AND AA.FACT_CODE = QQ.FACT_CODE
						AND AA.BRANCH_NO = QQ.BRANCH_NO
					ORDER BY QQ.MIN_TIME DESC, 
					<isNotEqual property="nearAll" compareValue="all">
					DECODE(QQ.BRANCH_NO,#beforeBranchNo#,1,#branch_no#,2,3)
					</isNotEqual>
					<isEqual property="nearAll" compareValue="all">
					QQ.BRANCH_NO ASC
					</isEqual>
<!--					 ORDER BY QQ.MIN_TIME DESC, QQ.FACT_CODE ASC, QQ.BRANCH_NO ASC -->
		 </isEqual>
<!-- 2014-10-21 mypark 페이징 처리 추가 -->		 
			) T
		) WHERE
<![CDATA[
			RNUM  > #firstIndex#
	  		  AND  RNUM <= #firstIndex# + #recordCountPerPage#
]]>
<!-- 2014-10-21 mypark 페이징 처리 추가 -->		 
	</statement>
	
		<statement id="getWatersysMntMainDetail_all_old_function" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO" remapResults="true">
				<isEqual property="sys_kind" compareValue="U">
					SELECT
						QQ.FACT_CODE, QQ.FACT_NAME, QQ.BRANCH_NO, QQ.BRANCH_NAME, QQ.MIN_TIME,
						QQ.STRDATE, QQ.STRTIME,
						TUR, CON, DOW, TMP, PHY, CON_OR, DOW_OR, TMP_OR, PHY_OR, TUR_OR,
						IMP, LIM, RIM, LIM_OR, RIM_OR, LTX, RTX, LTX_OR, RTX_OR, TOX, TOX_OR, EVN, EVN_OR, TOF, TOF_OR,
						VOC1, VOC2, VOC3, VOC4, VOC5, VOC6, VOC7, VOC8, VOC9, VOC10, VOC11, VOC12, VOC13, VOC14, VOC15,
						VOC1_OR, VOC2_OR, VOC3_OR, VOC4_OR, VOC5_OR, VOC6_OR, VOC7_OR, VOC8_OR, VOC9_OR, VOC10_OR, VOC11_OR, VOC12_OR, VOC13_OR, VOC14_OR, VOC15_OR,
						COP, PLU, ZIN, CAD, PHE, PHL, TOC, TON, TOP, NH4, NO3, PO4, RIN
						COP_OR, PLU_OR, ZIN_OR, CAD_OR, PHE_OR, PHL_OR, TOC_OR, TON_OR, TOP_OR, NH4_OR, NO3_OR, PO4_OR, RIN_OR,
						QQ.RIVER_NAME, QQ.SYS_KIND_NAME, QQ.SYS_KIND
					FROM
					(
				</isEqual>
						SELECT FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD') AS STRDATE,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'HH24:MI') AS STRTIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME,
								FACT_MGR,
								BRANCH_CNT,
								FACT_TEL_NO,
								FACT_EMAIL,
								/* 일반 항목 (내부) */
								TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
								TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
								TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
								TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
								TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'CON00', SUBSTR(MIN_TIME,5,2), SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) ) CON_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'DOW00', SUBSTR(MIN_TIME,5,2), SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR))) DOW_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'TMP00', SUBSTR(MIN_TIME,5,2), SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR))) TMP_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'PHY00', SUBSTR(MIN_TIME,5,2), SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR))) PHY_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'TUR00', SUBSTR(MIN_TIME,5,2), SUM(TUR_OR)) TUR_OR,
								/* 생물독성(물고기) */
								TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'IMP00', SUBSTR(MIN_TIME,5,2), SUM(IMP_OR)) IMP_OR,
								/* 생물독성(물벼룩1) */
								TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
								TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'LIM00', SUBSTR(MIN_TIME,5,2), SUM(LIM_OR)) LIM_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'RIM00', SUBSTR(MIN_TIME,5,2), SUM(RIM_OR)) RIM_OR,
								/* 생물독성(물벼룩2) */
								TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
								TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'LTX00', SUBSTR(MIN_TIME,5,2), SUM(LTX_OR)) LTX_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'RTX00', SUBSTR(MIN_TIME,5,2), SUM(RTX_OR)) RTX_OR,
								/* 생물독성(미생물) */
								TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'TOX00', SUBSTR(MIN_TIME,5,2), SUM(TOX_OR)) TOX_OR,
								/* 생물독성(조류) */
								TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
	 							FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'EVN00', SUBSTR(MIN_TIME,5,2), SUM(EVN_OR)) EVN_OR,
								/* 클로로필-a */
								TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
	 							FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'TOF00', SUBSTR(MIN_TIME,5,2), SUM(TOF_OR)) TOF_OR,
								/* 휘발성 유기화합물 */
								TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
								TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
								TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
								TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
								TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
								TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
								TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
								TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
								TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
								TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
								TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
								TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
								TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
								TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
								TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC01', SUBSTR(MIN_TIME,5,2), SUM(VOC1_OR)) VOC1_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC02', SUBSTR(MIN_TIME,5,2), SUM(VOC2_OR)) VOC2_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC03', SUBSTR(MIN_TIME,5,2), SUM(VOC3_OR)) VOC3_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC04', SUBSTR(MIN_TIME,5,2), SUM(VOC4_OR)) VOC4_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC05', SUBSTR(MIN_TIME,5,2), SUM(VOC5_OR)) VOC5_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC06', SUBSTR(MIN_TIME,5,2), SUM(VOC6_OR)) VOC6_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC07', SUBSTR(MIN_TIME,5,2), SUM(VOC7_OR)) VOC7_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC08', SUBSTR(MIN_TIME,5,2), SUM(VOC8_OR)) VOC8_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC09', SUBSTR(MIN_TIME,5,2), SUM(VOC9_OR)) VOC9_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC10', SUBSTR(MIN_TIME,5,2), SUM(VOC10_OR)) VOC10_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC11', SUBSTR(MIN_TIME,5,2), SUM(VOC11_OR)) VOC11_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC12', SUBSTR(MIN_TIME,5,2), SUM(VOC12_OR)) VOC12_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC13', SUBSTR(MIN_TIME,5,2), SUM(VOC13_OR)) VOC13_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC14', SUBSTR(MIN_TIME,5,2), SUM(VOC14_OR)) VOC14_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'VOC15', SUBSTR(MIN_TIME,5,2), SUM(VOC15_OR)) VOC15_OR,
								/* 중금속 */
								TO_CHAR(SUM(COP), 'FM999,990.00') COP,
								TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
								TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
								TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'COP00', SUBSTR(MIN_TIME,5,2), SUM(COP_OR)) COP_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'PLU00', SUBSTR(MIN_TIME,5,2), SUM(PLU_OR)) PLU_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'ZIN00', SUBSTR(MIN_TIME,5,2), SUM(ZIN_OR)) ZIN_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'CAD00', SUBSTR(MIN_TIME,5,2), SUM(CAD_OR)) CAD_OR,
								/* 페놀 */
								TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
								TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'PHE00', SUBSTR(MIN_TIME,5,2), SUM(PHE_OR)) PHE_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'PHL00', SUBSTR(MIN_TIME,5,2), SUM(PHL_OR)) PHL_OR,
								/* 유기물질 */
								TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
	 							FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'TOC00', SUBSTR(MIN_TIME,5,2), SUM(TOC_OR)) TOC_OR,
								/* 영양염류 */
								TO_CHAR(SUM(TON), 'FM999,990.00') TON,
								TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
								TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
								TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
								TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'TON00', SUBSTR(MIN_TIME,5,2), SUM(TON_OR)) TON_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'TOP00', SUBSTR(MIN_TIME,5,2), SUM(TOP_OR)) TOP_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'NH400', SUBSTR(MIN_TIME,5,2), SUM(NH4_OR)) NH4_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'NO300', SUBSTR(MIN_TIME,5,2), SUM(NO3_OR)) NO3_OR,
								FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'PO400', SUBSTR(MIN_TIME,5,2), SUM(PO4_OR)) PO4_OR,
								/* 강수량계 */
								TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
	 							FN_GET_DATA_CHK(FACT_CODE, BRANCH_NO, 'RIN00', SUBSTR(MIN_TIME,5,2), SUM(RIN_OR)) RIN_OR,
								BRANCH_NAME||'-'||BRANCH_NO BRANCH_NAME
					  FROM (
							SELECT F1.FACT_CODE,
										D1.FACT_NAME,
										D1.FACT_MGR,
										D1.FACT_ADDR,
										D1.FACT_TEL_NO,
										D1.FACT_EMAIL,
										D1.BRANCH_CNT,
										F1.BRANCH_NO, 
										TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
										 /*  일반항목 내부 */
										DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
										DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
										/* 일반 항목 외부 */
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
										/* 생물 독성 (물고기)*/
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
										/* 생물 독성 (물벼룩1) */
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
										/* 생물 독성 (물벼룩2) */
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
										/* 생물 독성 (미생물) */
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
										/* 생물 독성 (조류) */
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
										/* 클로로필-a */
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
										/* 휘발성 유기화합물 */
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
										/* 중금속 */
										DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
										DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
										/* 페놀 */
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
										/* 유기물질 */
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
										/* 영양염류 */
										DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
										DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
										/* 강수량계 */
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
										TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL,
										D1.RIVER_DIV,
										DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
										SUBSTR(F1.FACT_CODE,6,2) AS NOD,
										D1.SYS_KIND,
										D1.BRANCH_NAME,
										(
										SELECT SYS_KIND_NAME 
											FROM T_SYS_KIND 
										 WHERE SYS_KIND =  D1.SYS_KIND
										) SYS_KIND_NAME
							  FROM 
										(
										SELECT F.FACT_CODE,
													F.BRANCH_NO,
													F.MIN_TIME, 
													F.ITEM_CODE,
													(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
													MIN_VL,
													MIN_OR
										  FROM T_MIN_DATA F
									 <![CDATA[
										WHERE 
											  (
												(#beforeFactCode# IS NOT NULL AND ( F.FACT_CODE = #beforeFactCode# AND F.BRANCH_NO = #beforeBranchNo#))
												OR (#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND F.BRANCH_NO = #branch_no#))
												OR (#nextFactCode# IS NOT NULL AND ( F.FACT_CODE = #nextFactCode# AND F.BRANCH_NO = #nextBranchNo#))
											   ) 
											AND F.MIN_TIME BETWEEN #frDate#||#frTime#||'00' AND #toDate#||#toTime#||'59'
									]]>
											AND F.MIN_DCD = '0'
									  ) F1,
									  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG,
													F.BRANCH_CNT, F.SYS_KIND, F.FACT_EMAIL,
													F.FACT_MGR, F.FACT_ADDR, F.FACT_TEL_NO,
													F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
											FROM T_FACT_INFO F,
													T_FACT_BRANCH_INFO D
										 WHERE F.FACT_CODE = D.FACT_CODE 
													 AND D.BRANCH_USE_FLAG = 'Y'
													 AND   (
															(#beforeFactCode# IS NOT NULL AND ( D.FACT_CODE = #beforeFactCode# AND D.BRANCH_NO = #beforeBranchNo#))
															OR (#fact_code# IS NOT NULL AND ( D.FACT_CODE = #fact_code# AND D.BRANCH_NO = #branch_no#))
															OR (#nextFactCode# IS NOT NULL AND ( D.FACT_CODE = #nextFactCode# AND D.BRANCH_NO = #nextBranchNo#))
														   ) 
									  ) D1,
									T_FACT_MEASU_ITEM I
							WHERE F1.FACT_CODE = D1.FACT_CODE
								 AND F1.BRANCH_NO = D1.BRANCH_NO
								 AND D1.FACT_USE_FLAG = 'Y'
								 AND I.ITEM_CODE = F1.ITEM_CODE
								 AND I.FACT_CODE = F1.FACT_CODE
								 AND I.BRANCH_NO = F1.BRANCH_NO
								 AND   (
										(#beforeFactCode# IS NOT NULL AND ( F1.FACT_CODE = #beforeFactCode# AND F1.BRANCH_NO = #beforeBranchNo#))
										OR (#fact_code# IS NOT NULL AND ( F1.FACT_CODE = #fact_code# AND F1.BRANCH_NO = #branch_no#))
										OR (#nextFactCode# IS NOT NULL AND ( F1.FACT_CODE = #nextFactCode# AND F1.BRANCH_NO = #nextBranchNo#))
									   ) 
<!--								 AND F1.BRANCH_NO IN (#beforeBranchNo#,#branch_no#,#nextBranchNo#) -->
<!--								 AND F1.BRANCH_NO = #branch_no# -->
								 AND I.ITEM_USE_FLAG = 'Y'
						)				 
					GROUP BY FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME, 
								FACT_MGR, FACT_ADDR,FACT_TEL_NO, 
								FACT_EMAIL, BRANCH_CNT, BRANCH_NAME
					ORDER BY MIN_TIME DESC, DECODE(FACT_CODE,#beforeFactCode#,1,#fact_code#,2,3)
			<isEqual property="sys_kind" compareValue="U">
			) AA,
			 (
					SELECT 
						 TO_CHAR(TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
						A.FACT_CODE,
						A.BRANCH_NO,
						A.FACT_NAME,
						A.BRANCH_NAME,
						A.SYS_KIND,
						A.RIVER_NAME,
						A.SYS_KIND_NAME
					FROM
					(
						<isEqual property="sys_kind" compareValue="U">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*10/24/60)-(10/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (20/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*10/24/60+(10/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="T">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*30/24/60)-(30/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (60/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*30/24/60+(30/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="A">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*5/24/60)-(5/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (10/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*5/24/60+(5/24/60)) < DAYCNT
						]]>
						</isEqual>
					) Q,
					(
						SELECT
							B.FACT_CODE,
							B.BRANCH_NO,
							AREA.REG_NAME AS FACT_NAME,
							B.BRANCH_NAME||'-'||B.BRANCH_NO BRANCH_NAME,
							DECODE(F.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') AS RIVER_NAME,
							F.SYS_KIND,
							(
							SELECT SYS_KIND_NAME
								FROM T_SYS_KIND
							 WHERE SYS_KIND = F.SYS_KIND
							) SYS_KIND_NAME
						FROM
							T_FACT_INFO F,
							T_FACT_BRANCH_INFO B,
							T_WEATHER_AREA AREA
						WHERE
							F.FACT_CODE = B.FACT_CODE
								AND B.BRANCH_USE_FLAG = 'Y'
								AND AREA.FACT_CODE(+) = B.FACT_CODE
								AND AREA.BRANCH_NO(+) = B.BRANCH_NO
<!--								AND F.FACT_CODE = #fact_code# -->
								AND (
								(#beforeFactCode# IS NOT NULL AND ( F.FACT_CODE = #beforeFactCode# AND B.BRANCH_NO = #beforeBranchNo#))
								 OR (#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND B.BRANCH_NO = #branch_no#))
								 OR (#nextFactCode# IS NOT NULL AND ( F.FACT_CODE = #nextFactCode# AND B.BRANCH_NO = #nextBranchNo#))
								) 
								
<!--								AND B.BRANCH_NO = #branch_no# -->
<!--								AND B.BRANCH_NO IN (#beforeBranchNo#,#branch_no#,#nextBranchNo#) -->
					) A
					WHERE
						<![CDATA[TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI') <= SYSDATE]]>
			) QQ
					WHERE
						AA.MIN_TIME(+) = QQ.MIN_TIME
						AND AA.FACT_CODE(+) = QQ.FACT_CODE
						AND AA.BRANCH_NO(+) = QQ.BRANCH_NO
					ORDER BY QQ.MIN_TIME DESC, DECODE(QQ.BRANCH_NO,#beforeBranchNo#,1,#branch_no#,2,3)
<!--					 ORDER BY QQ.MIN_TIME DESC, QQ.FACT_CODE ASC, QQ.BRANCH_NO ASC -->
		 </isEqual>
	</statement>	
	
		
<!--	20140313 이광복 추가.backup -->
		<statement id="getWatersysMntMainDetail_all_old" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO" remapResults="true">
				<isEqual property="sys_kind" compareValue="U">
					SELECT
						QQ.FACT_CODE, QQ.FACT_NAME, QQ.BRANCH_NO, QQ.BRANCH_NAME, QQ.MIN_TIME,
						QQ.STRDATE, QQ.STRTIME,
						TUR, CON, DOW, TMP, PHY, CON_OR, DOW_OR, TMP_OR, PHY_OR, TUR_OR,
						IMP, LIM, RIM, LIM_OR, RIM_OR, LTX, RTX, LTX_OR, RTX_OR, TOX, TOX_OR, EVN, EVN_OR, TOF, TOF_OR,
						VOC1, VOC2, VOC3, VOC4, VOC5, VOC6, VOC7, VOC8, VOC9, VOC10, VOC11, VOC12, VOC13, VOC14, VOC15,
						VOC1_OR, VOC2_OR, VOC3_OR, VOC4_OR, VOC5_OR, VOC6_OR, VOC7_OR, VOC8_OR, VOC9_OR, VOC10_OR, VOC11_OR, VOC12_OR, VOC13_OR, VOC14_OR, VOC15_OR,
						COP, PLU, ZIN, CAD, PHE, PHL, TOC, TON, TOP, NH4, NO3, PO4, RIN
						COP_OR, PLU_OR, ZIN_OR, CAD_OR, PHE_OR, PHL_OR, TOC_OR, TON_OR, TOP_OR, NH4_OR, NO3_OR, PO4_OR, RIN_OR,
						QQ.RIVER_NAME, QQ.SYS_KIND_NAME, QQ.SYS_KIND
					FROM
					(
				</isEqual>
						SELECT FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD') AS STRDATE,
								TO_CHAR(TO_DATE(MIN_TIME,'YYYY/MM/DD HH24:MI'),'HH24:MI') AS STRTIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME,
								FACT_MGR,
								BRANCH_CNT,
								FACT_TEL_NO,
								FACT_EMAIL,
								/* 일반 항목 (내부) */
								TO_CHAR(SUM(TUR), 'FM999,990.00') TUR,
								TO_CHAR(SUM(DECODE(CON2, NULL, CON, CON2)), 'FM999,990.000') CON,
								TO_CHAR(SUM(DECODE(DOW2, NULL, DOW, DOW2)), 'FM999,990.00') DOW,
								TO_CHAR(SUM(DECODE(TMP2, NULL, TMP, TMP2)), 'FM999,990.00') TMP,
								TO_CHAR(SUM(DECODE(PHY2, NULL, PHY, PHY2)), 'FM999,990.00') PHY,
								SUM(DECODE(CON2, NULL, CON_OR, CON2_OR)) CON_OR,
								SUM(DECODE(DOW2, NULL, DOW_OR, DOW2_OR)) DOW_OR,
								SUM(DECODE(TMP2, NULL, TMP_OR, TMP2_OR)) TMP_OR,
								SUM(DECODE(PHY2, NULL, PHY_OR, PHY2_OR)) PHY_OR, 
								SUM(TUR_OR) TUR_OR,
								/* 생물독성(물고기) */
								TO_CHAR(SUM(IMP), 'FM999,990.00') IMP,
								SUM(IMP_OR) IMP_OR,
								/* 생물독성(물벼룩1) */
								TO_CHAR(SUM(LIM), 'FM999,990.00') LIM,
								TO_CHAR(SUM(RIM), 'FM999,990.00') RIM,
								SUM(LIM_OR) LIM_OR,
								SUM(RIM_OR) RIM_OR,
								/* 생물독성(물벼룩2) */
								TO_CHAR(SUM(LTX), 'FM999,990.00') LTX,
								TO_CHAR(SUM(RTX), 'FM999,990.00') RTX,
								SUM(LTX_OR) LTX_OR,
								SUM(RTX_OR) RTX_OR,
								/* 생물독성(미생물) */
								TO_CHAR(SUM(TOX), 'FM999,990.00') TOX,
								SUM(TOX_OR) TOX_OR,
								/* 생물독성(조류) */
								TO_CHAR(SUM(EVN), 'FM999,990.00') EVN,
								SUM(EVN_OR) EVN_OR,
								/* 클로로필-a */
								TO_CHAR(SUM(TOF), 'FM999,990.00') TOF,
								SUM(TOF_OR) TOF_OR,
								/* 휘발성 유기화합물 */
								TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1,
								TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2,
								TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3,
								TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4,
								TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5,
								TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6,
								TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7,
								TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8,
								TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9,
								TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10,
								TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11,
								TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12,
								TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13,
								TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14,
								TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15,
								SUM(VOC1_OR) VOC1_OR,
								SUM(VOC2_OR) VOC2_OR,
								SUM(VOC3_OR) VOC3_OR,
								SUM(VOC4_OR) VOC4_OR,
								SUM(VOC5_OR) VOC5_OR,
								SUM(VOC6_OR) VOC6_OR,
								SUM(VOC7_OR) VOC7_OR,
								SUM(VOC8_OR) VOC8_OR,
								SUM(VOC9_OR) VOC9_OR,
								SUM(VOC10_OR) VOC10_OR,
								SUM(VOC11_OR) VOC11_OR,
								SUM(VOC12_OR) VOC12_OR,
								SUM(VOC13_OR) VOC13_OR,
								SUM(VOC14_OR) VOC14_OR,
								SUM(VOC15_OR) VOC15_OR,
								/* 중금속 */
								TO_CHAR(SUM(COP), 'FM999,990.00') COP,
								TO_CHAR(SUM(PLU), 'FM999,990.00') PLU,
								TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN,
								TO_CHAR(SUM(CAD), 'FM999,990.00') CAD,
								SUM(COP_OR) COP_OR,
								SUM(PLU_OR) PLU_OR,
								SUM(ZIN_OR) ZIN_OR,
								SUM(CAD_OR) CAD_OR,
								/* 페놀 */
								TO_CHAR(SUM(PHE), 'FM999,990.00') PHE,
								TO_CHAR(SUM(PHL), 'FM999,990.00') PHL,
								SUM(PHE_OR) PHE_OR,
								SUM(PHL_OR) PHL_OR,
								/* 유기물질 */
								TO_CHAR(SUM(TOC), 'FM999,990.00') TOC,
								SUM(TOC_OR) TOC_OR,
								/* 영양염류 */
								TO_CHAR(SUM(TON), 'FM999,990.00') TON,
								TO_CHAR(SUM(TOP), 'FM999,990.00') TOP,
								TO_CHAR(SUM(NH4), 'FM999,990.00') NH4,
								TO_CHAR(SUM(NO3), 'FM999,990.00') NO3,
								TO_CHAR(SUM(PO4), 'FM999,990.00') PO4,
								SUM(TON_OR) TON_OR,
								SUM(TOP_OR) TOP_OR,
								SUM(NH4_OR) NH4_OR,
								SUM(NO3_OR) NO3_OR,
								SUM(PO4_OR) PO4_OR,
								/* 강수량계 */
								TO_CHAR(SUM(RIN), 'FM999,990.00') RIN,
								SUM(RIN_OR) RIN_OR,
<!--								BRANCH_NAME -->
								BRANCH_NAME||'-'||BRANCH_NO BRANCH_NAME
					  FROM (
							SELECT F1.FACT_CODE,
										D1.FACT_NAME,
										D1.FACT_MGR,
										D1.FACT_ADDR,
										D1.FACT_TEL_NO,
										D1.FACT_EMAIL,
										D1.BRANCH_CNT,
										F1.BRANCH_NO, 
										TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
										 /*  일반항목 내부 */
										DECODE(F1.ITEM_CODE, 'CON00', MIN_VL) CON,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_VL) DOW,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_VL) TMP,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_VL) PHY,
										DECODE(F1.ITEM_CODE, 'CON00', MIN_OR) CON_OR,
										DECODE(F1.ITEM_CODE, 'DOW00', MIN_OR) DOW_OR,
										DECODE(F1.ITEM_CODE, 'TMP00', MIN_OR)TMP_OR,
										DECODE(F1.ITEM_CODE, 'PHY00', MIN_OR) PHY_OR,
										/* 일반 항목 외부 */
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_VL) TMP2,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_VL) PHY2,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_VL) DOW2,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_VL) CON2,
										DECODE(F1.ITEM_CODE, 'TMP01', MIN_OR) TMP2_OR,
										DECODE(F1.ITEM_CODE, 'PHY01', MIN_OR) PHY2_OR,
										DECODE(F1.ITEM_CODE, 'DOW01', MIN_OR) DOW2_OR,
										DECODE(F1.ITEM_CODE, 'CON01', MIN_OR) CON2_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_OR) TUR_OR,
										DECODE(F1.ITEM_CODE, 'TUR00', MIN_VL) TUR,
										/* 생물 독성 (물고기)*/
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_VL) IMP,
										DECODE(F1.ITEM_CODE, 'IMP00', MIN_OR) IMP_OR,
										/* 생물 독성 (물벼룩1) */
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_VL) LIM,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_VL) RIM,
										DECODE(F1.ITEM_CODE, 'LIM00', MIN_OR) LIM_OR,
										DECODE(F1.ITEM_CODE, 'RIM00', MIN_OR) RIM_OR,
										/* 생물 독성 (물벼룩2) */
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_VL) LTX,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_VL) RTX,
										DECODE(F1.ITEM_CODE, 'LTX00', MIN_OR) LTX_OR,
										DECODE(F1.ITEM_CODE, 'RTX00', MIN_OR) RTX_OR,
										/* 생물 독성 (미생물) */
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_VL) TOX,
										DECODE(F1.ITEM_CODE, 'TOX00', MIN_OR) TOX_OR,
										/* 생물 독성 (조류) */
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_VL) EVN,
										DECODE(F1.ITEM_CODE, 'EVN00', MIN_OR) EVN_OR,
										/* 클로로필-a */
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_VL) TOF,
										DECODE(F1.ITEM_CODE, 'TOF00', MIN_OR) TOF_OR,
										/* 휘발성 유기화합물 */
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_VL) VOC1,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_VL) VOC2,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_VL) VOC3,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_VL) VOC4,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_VL) VOC5,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_VL) VOC6,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_VL) VOC7,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_VL) VOC8,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_VL) VOC9,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_VL) VOC10,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_VL) VOC11,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_VL) VOC12,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_VL) VOC13,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_VL) VOC14,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_VL) VOC15,
										DECODE(F1.ITEM_CODE, 'VOC01', MIN_OR) VOC1_OR,
										DECODE(F1.ITEM_CODE, 'VOC02', MIN_OR) VOC2_OR,
										DECODE(F1.ITEM_CODE, 'VOC03', MIN_OR) VOC3_OR,
										DECODE(F1.ITEM_CODE, 'VOC04', MIN_OR) VOC4_OR,
										DECODE(F1.ITEM_CODE, 'VOC05', MIN_OR) VOC5_OR,
										DECODE(F1.ITEM_CODE, 'VOC06', MIN_OR) VOC6_OR,
										DECODE(F1.ITEM_CODE, 'VOC07', MIN_OR) VOC7_OR,
										DECODE(F1.ITEM_CODE, 'VOC08', MIN_OR) VOC8_OR,
										DECODE(F1.ITEM_CODE, 'VOC09', MIN_OR) VOC9_OR,
										DECODE(F1.ITEM_CODE, 'VOC10', MIN_OR) VOC10_OR,
										DECODE(F1.ITEM_CODE, 'VOC11', MIN_OR) VOC11_OR,
										DECODE(F1.ITEM_CODE, 'VOC12', MIN_OR) VOC12_OR,
										DECODE(F1.ITEM_CODE, 'VOC13', MIN_OR) VOC13_OR,
										DECODE(F1.ITEM_CODE, 'VOC14', MIN_OR) VOC14_OR,
										DECODE(F1.ITEM_CODE, 'VOC15', MIN_OR) VOC15_OR,
										/* 중금속 */
										DECODE(F1.ITEM_CODE, 'COP00', MIN_VL) COP,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_VL) PLU,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_VL) ZIN,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_VL) CAD,
										DECODE(F1.ITEM_CODE, 'COP00', MIN_OR) COP_OR,
										DECODE(F1.ITEM_CODE, 'PLU00', MIN_OR) PLU_OR,
										DECODE(F1.ITEM_CODE, 'ZIN00', MIN_OR) ZIN_OR,
										DECODE(F1.ITEM_CODE, 'CAD00', MIN_OR) CAD_OR,
										/* 페놀 */
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_VL) PHE,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_VL) PHL,
										DECODE(F1.ITEM_CODE, 'PHE00', MIN_OR) PHE_OR,
										DECODE(F1.ITEM_CODE, 'PHL00', MIN_OR) PHL_OR,
										/* 유기물질 */
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_VL) TOC,
										DECODE(F1.ITEM_CODE, 'TOC00', MIN_OR) TOC_OR,
										/* 영양염류 */
										DECODE(F1.ITEM_CODE, 'TON00', MIN_VL) TON,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_VL) TOP,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_VL) NH4,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_VL) NO3,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_VL) PO4,
										DECODE(F1.ITEM_CODE, 'TON00', MIN_OR) TON_OR,
										DECODE(F1.ITEM_CODE, 'TOP00', MIN_OR) TOP_OR,
										DECODE(F1.ITEM_CODE, 'NH400', MIN_OR) NH4_OR,
										DECODE(F1.ITEM_CODE, 'NO300', MIN_OR) NO3_OR,
										DECODE(F1.ITEM_CODE, 'PO400', MIN_OR) PO4_OR,
										/* 강수량계 */
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_VL) RIN,
										DECODE(F1.ITEM_CODE, 'RIN00', MIN_OR) RIN_OR,
										TO_CHAR(MIN_VL, 'FM999,990.00') AS MIN_VL,
										D1.RIVER_DIV,
										DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
										SUBSTR(F1.FACT_CODE,6,2) AS NOD,
										D1.SYS_KIND,
										D1.BRANCH_NAME,
										(
										SELECT SYS_KIND_NAME 
											FROM T_SYS_KIND 
										 WHERE SYS_KIND =  D1.SYS_KIND
										) SYS_KIND_NAME
							  FROM 
										(
										SELECT F.FACT_CODE,
													F.BRANCH_NO,
													F.MIN_TIME, 
													F.ITEM_CODE,
													(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
													MIN_VL,
													MIN_OR
										  FROM T_MIN_DATA F
									 <![CDATA[
										WHERE 
											  (
												(#beforeFactCode# IS NOT NULL AND ( F.FACT_CODE = #beforeFactCode# AND F.BRANCH_NO = #beforeBranchNo#))
												OR (#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND F.BRANCH_NO = #branch_no#))
												OR (#nextFactCode# IS NOT NULL AND ( F.FACT_CODE = #nextFactCode# AND F.BRANCH_NO = #nextBranchNo#))
											   ) 
											AND F.MIN_TIME BETWEEN #frDate#||#frTime#||'00' AND #toDate#||#toTime#||'59'
									]]>
											AND F.MIN_DCD = '0'
									  ) F1,
									  ( SELECT F.FACT_CODE, F.FACT_NAME, F.FACT_USE_FLAG,
													F.BRANCH_CNT, F.SYS_KIND, F.FACT_EMAIL,
													F.FACT_MGR, F.FACT_ADDR, F.FACT_TEL_NO,
													F.RIVER_DIV, D.BRANCH_NO, D.BRANCH_NAME 
											FROM T_FACT_INFO F,
													T_FACT_BRANCH_INFO D
										 WHERE F.FACT_CODE = D.FACT_CODE 
													 AND D.BRANCH_USE_FLAG = 'Y'
									  ) D1,
									T_FACT_MEASU_ITEM I
							WHERE F1.FACT_CODE = D1.FACT_CODE
								 AND F1.BRANCH_NO = D1.BRANCH_NO
								 AND D1.FACT_USE_FLAG = 'Y'
								 AND I.ITEM_CODE = F1.ITEM_CODE
								 AND I.FACT_CODE = F1.FACT_CODE
								 AND I.BRANCH_NO = F1.BRANCH_NO
								 AND   (
										(#beforeFactCode# IS NOT NULL AND ( F1.FACT_CODE = #beforeFactCode# AND F1.BRANCH_NO = #beforeBranchNo#))
										OR (#fact_code# IS NOT NULL AND ( F1.FACT_CODE = #fact_code# AND F1.BRANCH_NO = #branch_no#))
										OR (#nextFactCode# IS NOT NULL AND ( F1.FACT_CODE = #nextFactCode# AND F1.BRANCH_NO = #nextBranchNo#))
									   ) 
<!--								 AND F1.BRANCH_NO IN (#beforeBranchNo#,#branch_no#,#nextBranchNo#) -->
<!--								 AND F1.BRANCH_NO = #branch_no# -->
								 AND I.ITEM_USE_FLAG = 'Y'
						)				 
					GROUP BY FACT_CODE, FACT_NAME, BRANCH_NO, MIN_TIME,
								RIVER_DIV, RIVER_NAME, NOD,
								SYS_KIND, SYS_KIND_NAME, 
								FACT_MGR, FACT_ADDR,FACT_TEL_NO, 
								FACT_EMAIL, BRANCH_CNT, BRANCH_NAME
					ORDER BY MIN_TIME DESC, DECODE(FACT_CODE,#beforeFactCode#,1,#fact_code#,2,3)
			<isEqual property="sys_kind" compareValue="U">
			) AA,
			 (
					SELECT 
						 TO_CHAR(TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'YYYY/MM/DD') AS STRDATE,
						TO_CHAR(TO_DATE(Q.MIN_TIME,'YYYYMMDDHH24MI'),'HH24:MI') AS STRTIME,
						A.FACT_CODE,
						A.BRANCH_NO,
						A.FACT_NAME,
						A.BRANCH_NAME,
						A.SYS_KIND,
						A.RIVER_NAME,
						A.SYS_KIND_NAME
					FROM
					(
						<isEqual property="sys_kind" compareValue="U">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*10/24/60)-(10/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (20/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*10/24/60+(10/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="T">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*30/24/60)-(30/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT 
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (60/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*30/24/60+(30/24/60)) < DAYCNT
						]]>
						</isEqual>
						<isEqual property="sys_kind" compareValue="A">
						<![CDATA[
							SELECT
									TO_CHAR(TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI')+(LEVEL*5/24/60)-(5/24/60), 'YYYYMMDDHH24MI') AS MIN_TIME
							FROM
							(
								SELECT
										TO_DATE(#toDate#||#toTime#||'59', 'YYYYMMDDHH24MI') - TO_DATE(#frDate#||#frTime#||'00' , 'YYYYMMDDHH24MI') + (10/24/60) AS DAYCNT
								FROM DUAL
							)
							CONNECT BY (LEVEL*5/24/60+(5/24/60)) < DAYCNT
						]]>
						</isEqual>
					) Q,
					(
						SELECT
							B.FACT_CODE,
							B.BRANCH_NO,
							AREA.REG_NAME AS FACT_NAME,
							B.BRANCH_NAME||'-'||B.BRANCH_NO BRANCH_NAME,
							DECODE(F.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') AS RIVER_NAME,
							F.SYS_KIND,
							(
							SELECT SYS_KIND_NAME
								FROM T_SYS_KIND
							 WHERE SYS_KIND = F.SYS_KIND
							) SYS_KIND_NAME
						FROM
							T_FACT_INFO F,
							T_FACT_BRANCH_INFO B,
							T_WEATHER_AREA AREA
						WHERE
							F.FACT_CODE = B.FACT_CODE
								AND B.BRANCH_USE_FLAG = 'Y'
								AND AREA.FACT_CODE(+) = B.FACT_CODE
								AND AREA.BRANCH_NO(+) = B.BRANCH_NO
<!--								AND F.FACT_CODE = #fact_code# -->
								AND (
								(#beforeFactCode# IS NOT NULL AND ( F.FACT_CODE = #beforeFactCode# AND B.BRANCH_NO = #beforeBranchNo#))
								 OR (#fact_code# IS NOT NULL AND ( F.FACT_CODE = #fact_code# AND B.BRANCH_NO = #branch_no#))
								 OR (#nextFactCode# IS NOT NULL AND ( F.FACT_CODE = #nextFactCode# AND B.BRANCH_NO = #nextBranchNo#))
								) 
								
<!--								AND B.BRANCH_NO = #branch_no# -->
<!--								AND B.BRANCH_NO IN (#beforeBranchNo#,#branch_no#,#nextBranchNo#) -->
					) A
					WHERE
						<![CDATA[TO_DATE(Q.MIN_TIME, 'YYYYMMDDHH24MI') <= SYSDATE]]>
			) QQ
					WHERE
						AA.MIN_TIME(+) = QQ.MIN_TIME
						AND AA.FACT_CODE(+) = QQ.FACT_CODE
						AND AA.BRANCH_NO(+) = QQ.BRANCH_NO
					ORDER BY QQ.MIN_TIME DESC, DECODE(QQ.BRANCH_NO,#beforeBranchNo#,1,#branch_no#,2,3)
<!--					ORDER BY QQ.MIN_TIME DESC, QQ.FACT_CODE ASC, QQ.BRANCH_NO ASC -->
		 </isEqual>
	</statement>	
	
	<statement id="getNextFact" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO">
			SELECT 
				FACT_CODE,
				FACT_NAME
			FROM
				(
					SELECT
						A.FACT_CODE AS FACT_CODE,
						A.FACT_NAME AS FACT_NAME
					FROM
					T_FACT_INFO A, T_FACT_BRANCH_INFO B,
					(
						SELECT A1.RIVER_DIV, B1.BRANCH_MAP_Y
						FROM T_FACT_INFO A1, T_FACT_BRANCH_INFO B1
						WHERE A1.FACT_CODE = #fact_code#
							AND A1.SYS_KIND = #sys_kind#
							AND A1.FACT_CODE = B1.FACT_CODE
							AND A1.FACT_USE_FLAG = 'Y'
							AND B1.BRANCH_USE_FLAG = 'Y'
					) C
					WHERE
						A.FACT_CODE = B.FACT_CODE
					AND A.FACT_USE_FLAG = 'Y'
					AND B.BRANCH_USE_FLAG = 'Y'
					AND A.RIVER_DIV = C.RIVER_DIV
					AND A.SYS_KIND = #sys_kind#
				<isEqual property="isNext" compareValue="Y">
					<![CDATA[
					AND B.BRANCH_MAP_Y > C.BRANCH_MAP_Y
					ORDER BY B.BRANCH_MAP_Y ASC
					]]>
				</isEqual>
				<isNotEqual property="isNext" compareValue="Y">
					<![CDATA[
					AND B.BRANCH_MAP_Y < C.BRANCH_MAP_Y
					ORDER BY B.BRANCH_MAP_Y DESC
					]]>
				</isNotEqual>
				)
			WHERE
					ROWNUM = 1
	</statement>
	
	
	<statement id="getWatersysMntMainDetailGraph" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO" remapResults="true">
			SELECT 
				MIN_TIME,
				(
					<isEqual property="sys" compareValue="U">
						SELECT BRANCH_NAME
						FROM T_FACT_BRANCH_INFO
						WHERE 
							FACT_CODE = #beforeFactCode#
							AND BRANCH_NO = #beforeBranchNo#
					</isEqual>
					<isNotEqual property="sys" compareValue="U">
						SELECT FACT_NAME
						FROM T_FACT_INFO
						WHERE 
						FACT_CODE = #beforeFactCode#
					</isNotEqual>
				) beforeFactName,
				(
					<isEqual property="sys" compareValue="U">
						SELECT BRANCH_NAME
						FROM T_FACT_BRANCH_INFO
						WHERE 
							FACT_CODE = #curFactCode#
							AND BRANCH_NO = #curBranchNo#
					</isEqual>
					<isNotEqual property="sys" compareValue="U">
						SELECT FACT_NAME
						FROM T_FACT_INFO
						WHERE 
						FACT_CODE = #curFactCode#
					</isNotEqual>
				) curFactName,
				(
					<isEqual property="sys" compareValue="U">
						SELECT BRANCH_NAME
						FROM T_FACT_BRANCH_INFO
						WHERE 
							FACT_CODE = #nextFactCode#
							AND BRANCH_NO = #nextBranchNo#
					</isEqual>
					<isNotEqual property="sys" compareValue="U">
						SELECT FACT_NAME
						FROM T_FACT_INFO
						WHERE 
						FACT_CODE = #nextFactCode#
					</isNotEqual>
				) nextFactName,
				<isEqual property="sys" compareValue="U">
				SUM(DECODE(BRANCH_NO, #beforeBranchNo#, MIN_VL)) vlBefore,
				SUM(DECODE(BRANCH_NO,#curBranchNo#, MIN_VL)) vlCur,
				SUM(DECODE(BRANCH_NO,#nextBranchNo#, MIN_VL)) vlNext,
				</isEqual>
				<isNotEqual property="sys" compareValue="U">
				SUM(DECODE(FACT_CODE, #beforeFactCode#, MIN_VL)) vlBefore,
				SUM(DECODE(FACT_CODE, #curFactCode#, MIN_VL)) vlCur,
				SUM(DECODE(FACT_CODE, #nextFactCode#, MIN_VL)) vlNext,
				</isNotEqual>
			(
				SELECT ITEM_NAME 
				FROM T_ITEM_INFO 
				WHERE ITEM_CODE = #item#
			) ITEM_NAME
	FROM (
			SELECT F1.FACT_CODE,
						D1.FACT_NAME, 
						D1.FACT_MGR,
						D1.FACT_ADDR,
						D1.FACT_TEL_NO,
						D1.FACT_EMAIL,
						D1.BRANCH_CNT,
						F1.BRANCH_NO, 
						TO_CHAR(TO_DATE(F1.MIN_TIME, 'YYYYMMDDHH24MI'), 'YYYY/MM/DD HH24:MI') MIN_TIME, 
						TO_CHAR(F1.MIN_VL, 'FM999990.00') AS MIN_VL,
						D1.RIVER_DIV,
						DECODE(SUBSTR(D1.RIVER_DIV,3,1),'1','한강','2','낙동강','3','금강','4','영산강') AS RIVER_NAME,
						SUBSTR(F1.FACT_CODE,6,2) AS NOD,
						D1.SYS_KIND,
						(
							SELECT SYS_KIND_NAME 
							FROM T_SYS_KIND 
							WHERE SYS_KIND = D1.SYS_KIND
						) SYS_KIND_NAME
			FROM 
					(
						SELECT F.FACT_CODE,
								F.BRANCH_NO,
								F.MIN_TIME, 
								F.ITEM_CODE,
								(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
								MIN_VL,
								MIN_OR
						FROM T_MIN_DATA F
						WHERE F.FACT_CODE = #beforeFactCode#
							AND F.BRANCH_NO = #beforeBranchNo#
							AND F.MIN_TIME BETWEEN #frDate#||#frTime#||'00' AND #toDate#||#toTime#||'59'
							AND F.MIN_DCD = '0'
					UNION
						SELECT F.FACT_CODE,
								F.BRANCH_NO,
								F.MIN_TIME, 
								F.ITEM_CODE,
								(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
								MIN_VL,
								MIN_OR
						FROM T_MIN_DATA F
						WHERE F.FACT_CODE = #curFactCode#
							AND F.BRANCH_NO = #curBranchNo#
							AND F.MIN_TIME BETWEEN #frDate#||#frTime#||'00' AND #toDate#||#toTime#||'59'
							AND F.MIN_DCD = '0'
					UNION
						SELECT F.FACT_CODE,
								F.BRANCH_NO,
								F.MIN_TIME,
								F.ITEM_CODE,
								(SELECT ITEM_NAME FROM T_ITEM_INFO WHERE ITEM_CODE = F.ITEM_CODE) ITEM_NAME,
								MIN_VL,
								MIN_OR
						FROM T_MIN_DATA F
						WHERE F.FACT_CODE = #nextFactCode#
							AND F.BRANCH_NO = #nextBranchNo#
							AND F.MIN_TIME BETWEEN #frDate#||#frTime#||'00' AND #toDate#||#toTime#||'59'
							AND F.MIN_DCD = '0'
				) F1,
				T_FACT_INFO D1
<!-- 				T_FACT_MEASU_ITEM I -->
			WHERE F1.FACT_CODE = D1.FACT_CODE
					AND D1.FACT_USE_FLAG = 'Y'
<!-- 					AND I.ITEM_CODE = F1.ITEM_CODE -->
<!-- 					AND I.FACT_CODE = F1.FACT_CODE -->
<!-- 					AND I.BRANCH_NO = F1.BRANCH_NO -->
<!-- 					AND I.ITEM_USE_FLAG = 'Y' -->
					AND F1.ITEM_CODE IN 
					(#item#,
						(
							CASE
								WHEN #item# = 'PHY00'
								THEN 'PHY01'
								WHEN #item# = 'CON00'
								THEN 'CON01'
								WHEN #item# = 'DOW00'
								THEN 'DOW01'
								WHEN #item# = 'TMP00'
								THEN 'TMP01'
								ELSE
								'XXX'
							END
						)
					)
				)
			GROUP BY MIN_TIME
			ORDER BY MIN_TIME ASC
	</statement>
	
	<statement id="getFactLaw" parameterClass="factLawVO" resultClass="factLawVO">
			SELECT 
				STD_LVAL law_low,
				STD_HVAL law_high
			FROM 
				T_WQ_STD
			WHERE
			<![CDATA[
				FACT_CODE = #fact_code#
				AND BRANCH_NO = #branch_no#
				AND SUBSTR(ITEM_CODE, 0, 3) = #item#
				AND USE_FLAG = 'Y'
				AND ROWNUM <= 1
			]]>
	</statement>
	
	<statement id="getFactLocation" parameterClass="factLocationVO" resultClass="factLocationVO">
		SELECT
			F.SYS_KIND,
			B.FACT_CODE,
			B.BRANCH_NO,
			B.LATITUDE,
			B.LONGITUDE
		FROM
			T_FACT_INFO F,
			T_FACT_BRANCH_INFO B
		WHERE F.FACT_CODE = B.FACT_CODE
			AND B.FACT_CODE = #fact_code#
			AND B.BRANCH_NO = #branch_no#
	</statement>
	
	<statement id="getAutoData" resultClass="autoDataVO">
		SELECT *
		FROM (
		SELECT COMMON_CODE CODE, COMMON_CODE_NAME CODE_NAME
				FROM T_COMMON_CODE
				 WHERE COMMON_CODE_CATEGORY = '37'
				 ORDER BY CODE_SORT) F11,
				(SELECT ITEM_CODE, /* 한강 */
						TO_CHAR(SUM(VAL01), 'FM999,990.099') VAL01,
						TO_CHAR(SUM(VAL02), 'FM999,990.099') VAL02,
						TO_CHAR(SUM(VAL03), 'FM999,990.099') VAL03,
						TO_CHAR(SUM(VAL04), 'FM999,990.099') VAL04,
						TO_CHAR(SUM(VAL05), 'FM999,990.099') VAL05,
						TO_CHAR(SUM(VAL06), 'FM999,990.099') VAL06,
						TO_CHAR(SUM(VAL07), 'FM999,990.099') VAL07,
						TO_CHAR(SUM(VAL08), 'FM999,990.099') VAL08,
						TO_CHAR(SUM(VAL09), 'FM999,990.099') VAL09,
						TO_CHAR(SUM(VAL10), 'FM999,990.099') VAL10,
						TO_CHAR(SUM(VAL11), 'FM999,990.099') VAL11,
						TO_CHAR(SUM(VAL12), 'FM999,990.099') VAL12,
						TO_CHAR(SUM(VAL13), 'FM999,990.099') VAL13,
						TO_CHAR(SUM(VAL14), 'FM999,990.099') VAL14,
						TO_CHAR(SUM(VAL15), 'FM999,990.099') VAL15,
						TO_CHAR(SUM(VAL16), 'FM999,990.099') VAL16,
						TO_CHAR(SUM(VAL17), 'FM999,990.099') VAL17,
						TO_CHAR(SUM(VAL18), 'FM999,990.099') VAL18,
						TO_CHAR(SUM(VAL19), 'FM999,990.099') VAL19, /* 낙동강 */
						TO_CHAR(SUM(VAL20), 'FM999,990.099') VAL20,
						TO_CHAR(SUM(VAL21), 'FM999,990.099') VAL21,
						TO_CHAR(SUM(VAL22), 'FM999,990.099') VAL22,
						TO_CHAR(SUM(VAL23), 'FM999,990.099') VAL23,
						TO_CHAR(SUM(VAL24), 'FM999,990.099') VAL24,
						TO_CHAR(SUM(VAL25), 'FM999,990.099') VAL25,
						TO_CHAR(SUM(VAL26), 'FM999,990.099') VAL26,
						TO_CHAR(SUM(VAL27), 'FM999,990.099') VAL27,
						TO_CHAR(SUM(VAL28), 'FM999,990.099') VAL28,
						TO_CHAR(SUM(VAL29), 'FM999,990.099') VAL29,
						TO_CHAR(SUM(VAL30), 'FM999,990.099') VAL30,
						TO_CHAR(SUM(VAL31), 'FM999,990.099') VAL31,
						TO_CHAR(SUM(VAL32), 'FM999,990.099') VAL32,
						TO_CHAR(SUM(VAL33), 'FM999,990.099') VAL33,
						TO_CHAR(SUM(VAL34), 'FM999,990.099') VAL34,
						TO_CHAR(SUM(VAL35), 'FM999,990.099') VAL35,
						TO_CHAR(SUM(VAL36), 'FM999,990.099') VAL36,
						TO_CHAR(SUM(VAL37), 'FM999,990.099') VAL37, /* 금강 */
						TO_CHAR(SUM(VAL38), 'FM999,990.099') VAL38,
						TO_CHAR(SUM(VAL39), 'FM999,990.099') VAL39,
						TO_CHAR(SUM(VAL40), 'FM999,990.099') VAL40,
						TO_CHAR(SUM(VAL41), 'FM999,990.099') VAL41,
						TO_CHAR(SUM(VAL42), 'FM999,990.099') VAL42,
						TO_CHAR(SUM(VAL43), 'FM999,990.099') VAL43,
						TO_CHAR(SUM(VAL44), 'FM999,990.099') VAL44,
						TO_CHAR(SUM(VAL45), 'FM999,990.099') VAL45,
						TO_CHAR(SUM(VAL46), 'FM999,990.099') VAL46,
						TO_CHAR(SUM(VAL47), 'FM999,990.099') VAL47,
						TO_CHAR(SUM(VAL48), 'FM999,990.099') VAL48, /* 영산강 */
						TO_CHAR(SUM(VAL49), 'FM999,990.099') VAL49,
						TO_CHAR(SUM(VAL50), 'FM999,990.099') VAL50,
						TO_CHAR(SUM(VAL51), 'FM999,990.099') VAL51,
						TO_CHAR(SUM(VAL52), 'FM999,990.099') VAL52,
						TO_CHAR(SUM(VAL53), 'FM999,990.099') VAL53,
						TO_CHAR(SUM(VAL54), 'FM999,990.099') VAL54,
						TO_CHAR(SUM(VAL55), 'FM999,990.099') VAL55,
						TO_CHAR(SUM(VAL56), 'FM999,990.099') VAL56, /* 한강 */
						SUM(CON01) CON01,
						SUM(CON02) CON02,
						SUM(CON03) CON03,
						SUM(CON04) CON04,
						SUM(CON05) CON05,
						SUM(CON06) CON06,
						SUM(CON07) CON07,
						SUM(CON08) CON08,
						SUM(CON09) CON09,
						SUM(CON10) CON10,
						SUM(CON11) CON11,
						SUM(CON12) CON12,
						SUM(CON13) CON13,
						SUM(CON14) CON14,
						SUM(CON15) CON15,
						SUM(CON16) CON16,
						SUM(CON17) CON17,
						SUM(CON18) CON18,
						SUM(CON19) CON19, /* 낙동강 */
						SUM(CON20) CON20,
						SUM(CON21) CON21,
						SUM(CON22) CON22,
						SUM(CON23) CON23,
						SUM(CON24) CON24,
						SUM(CON25) CON25,
						SUM(CON26) CON26,
						SUM(CON27) CON27,
						SUM(CON28) CON28,
						SUM(CON29) CON29,
						SUM(CON30) CON30,
						SUM(CON31) CON31,
						SUM(CON32) CON32,
						SUM(CON33) CON33,
						SUM(CON34) CON34,
						SUM(CON35) CON35,
						SUM(CON36) CON36,
						SUM(CON37) CON37, /* 금강 */
						SUM(CON38) CON38,
						SUM(CON39) CON39,
						SUM(CON40) CON40,
						SUM(CON41) CON41,
						SUM(CON42) CON42,
						SUM(CON43) CON43,
						SUM(CON44) CON44,
						SUM(CON45) CON45,
						SUM(CON46) CON46,
						SUM(CON47) CON47,
						SUM(CON48) CON48, /* 영산강 */
						SUM(CON49) CON49,
						SUM(CON50) CON50,
						SUM(CON51) CON51,
						SUM(CON52) CON52,
						SUM(CON53) CON53,
						SUM(CON54) CON54,
						SUM(CON55) CON55,
						SUM(CON56) CON56
				FROM (SELECT ITEM_CODE, /* 한강 */
								DECODE(FACT_NAME, '가평', MIN_VL) VAL01,
								DECODE(FACT_NAME, '강천', MIN_VL) VAL02,
								DECODE(FACT_NAME, '경안천', MIN_VL) VAL03,
								DECODE(FACT_NAME, '구리', MIN_VL) VAL04,
								DECODE(FACT_NAME, '단양', MIN_VL) VAL05,
								DECODE(FACT_NAME, '달천', MIN_VL) VAL06,
								DECODE(FACT_NAME, '미산', MIN_VL) VAL07,
								DECODE(FACT_NAME, '서상', MIN_VL) VAL08,
								DECODE(FACT_NAME, '신천', MIN_VL) VAL09,
								DECODE(FACT_NAME, '양평', MIN_VL) VAL10,
								DECODE(FACT_NAME, '여주', MIN_VL) VAL11,
								DECODE(FACT_NAME, '원주', MIN_VL) VAL12,
								DECODE(FACT_NAME, '의암호', MIN_VL) VAL13,
								DECODE(FACT_NAME, '인제', MIN_VL) VAL14,
								DECODE(FACT_NAME, '충주', MIN_VL) VAL15,
								DECODE(FACT_NAME, '평창강', MIN_VL) VAL16,
								DECODE(FACT_NAME, '포천', MIN_VL) VAL17,
								DECODE(FACT_NAME, '한탄강', MIN_VL) VAL18,
								DECODE(FACT_NAME, '화천', MIN_VL) VAL19, /* 낙옹강 */
								DECODE(FACT_NAME, '강창', MIN_VL) VAL20,
								DECODE(FACT_NAME, '고령', MIN_VL) VAL21,
								DECODE(FACT_NAME, '남천', MIN_VL) VAL22,
								DECODE(FACT_NAME, '봉화', MIN_VL) VAL23,
								DECODE(FACT_NAME, '상동', MIN_VL) VAL24,
								DECODE(FACT_NAME, '성서', MIN_VL) VAL25,
								DECODE(FACT_NAME, '성주', MIN_VL) VAL26,
								DECODE(FACT_NAME, '예천', MIN_VL) VAL27,
								DECODE(FACT_NAME, '왜관', MIN_VL) VAL28,
								DECODE(FACT_NAME, '임하호', MIN_VL) VAL29,
								DECODE(FACT_NAME, '적포', MIN_VL) VAL30,
								DECODE(FACT_NAME, '진주', MIN_VL) VAL31,
								DECODE(FACT_NAME, '창암', MIN_VL) VAL32,
								DECODE(FACT_NAME, '청암', MIN_VL) VAL33,
								DECODE(FACT_NAME, '칠곡', MIN_VL) VAL34,
								DECODE(FACT_NAME, '칠서', MIN_VL) VAL35,
								DECODE(FACT_NAME, '풍양', MIN_VL) VAL36,
								DECODE(FACT_NAME, '해평', MIN_VL) VAL37, /* 금강 */
								DECODE(FACT_NAME, '갑천', MIN_VL) VAL38,
								DECODE(FACT_NAME, '공주', MIN_VL) VAL39,
								DECODE(FACT_NAME, '대청호', MIN_VL) VAL40,
								DECODE(FACT_NAME, '미호천', MIN_VL) VAL41,
								DECODE(FACT_NAME, '봉황천', MIN_VL) VAL42,
								DECODE(FACT_NAME, '부여', MIN_VL) VAL43,
								DECODE(FACT_NAME, '옥천천', MIN_VL) VAL44,
								DECODE(FACT_NAME, '용담호', MIN_VL) VAL45,
								DECODE(FACT_NAME, '이원', MIN_VL) VAL46,
								DECODE(FACT_NAME, '장계', MIN_VL) VAL47,
								DECODE(FACT_NAME, '현도', MIN_VL) VAL48, /* 영산강 */
								DECODE(FACT_NAME, '구례', MIN_VL) VAL49,
								DECODE(FACT_NAME, '나주', MIN_VL) VAL50,
								DECODE(FACT_NAME, '동복호', MIN_VL) VAL51,
								DECODE(FACT_NAME, '서창교', MIN_VL) VAL52,
								DECODE(FACT_NAME, '옥정호', MIN_VL) VAL53,
								DECODE(FACT_NAME, '주암호', MIN_VL) VAL54,
								DECODE(FACT_NAME, '탐진호', MIN_VL) VAL55,
								DECODE(FACT_NAME, '황룡강', MIN_VL) VAL56, /* 한강 */
								DECODE(FACT_NAME, '가평', MIN_ST) CON01,
								DECODE(FACT_NAME, '강천', MIN_ST) CON02,
								DECODE(FACT_NAME, '경안천', MIN_ST) CON03,
								DECODE(FACT_NAME, '구리', MIN_ST) CON04,
								DECODE(FACT_NAME, '단양', MIN_ST) CON05,
								DECODE(FACT_NAME, '달천', MIN_ST) CON06,
								DECODE(FACT_NAME, '미산', MIN_ST) CON07,
								DECODE(FACT_NAME, '서상', MIN_ST) CON08,
								DECODE(FACT_NAME, '신천', MIN_ST) CON09,
								DECODE(FACT_NAME, '양평', MIN_ST) CON10,
								DECODE(FACT_NAME, '여주', MIN_ST) CON11,
								DECODE(FACT_NAME, '원주', MIN_ST) CON12,
								DECODE(FACT_NAME, '의암호', MIN_ST) CON13,
								DECODE(FACT_NAME, '인제', MIN_ST) CON14,
								DECODE(FACT_NAME, '충주', MIN_ST) CON15,
								DECODE(FACT_NAME, '평창강', MIN_ST) CON16,
								DECODE(FACT_NAME, '포천', MIN_ST) CON17,
								DECODE(FACT_NAME, '한탄강', MIN_ST) CON18,
								DECODE(FACT_NAME, '화천', MIN_ST) CON19, /* 낙옹강 */
								DECODE(FACT_NAME, '강창', MIN_ST) CON20,
								DECODE(FACT_NAME, '고령', MIN_ST) CON21,
								DECODE(FACT_NAME, '남천', MIN_ST) CON22,
								DECODE(FACT_NAME, '봉화', MIN_ST) CON23,
								DECODE(FACT_NAME, '상동', MIN_ST) CON24,
								DECODE(FACT_NAME, '성서', MIN_ST) CON25,
								DECODE(FACT_NAME, '성주', MIN_ST) CON26,
								DECODE(FACT_NAME, '예천', MIN_ST) CON27,
								DECODE(FACT_NAME, '왜관', MIN_ST) CON28,
								DECODE(FACT_NAME, '임하호', MIN_ST) CON29,
								DECODE(FACT_NAME, '적포', MIN_ST) CON30,
								DECODE(FACT_NAME, '진주', MIN_ST) CON31,
								DECODE(FACT_NAME, '창암', MIN_ST) CON32,
								DECODE(FACT_NAME, '청암', MIN_ST) CON33,
								DECODE(FACT_NAME, '칠곡', MIN_ST) CON34,
								DECODE(FACT_NAME, '칠서', MIN_ST) CON35,
								DECODE(FACT_NAME, '풍양', MIN_ST) CON36,
								DECODE(FACT_NAME, '해평', MIN_ST) CON37, /* 금강 */
								DECODE(FACT_NAME, '갑천', MIN_ST) CON38,
								DECODE(FACT_NAME, '공주', MIN_ST) CON39,
								DECODE(FACT_NAME, '대청호', MIN_ST) CON40,
								DECODE(FACT_NAME, '미호천', MIN_ST) CON41,
								DECODE(FACT_NAME, '봉황천', MIN_ST) CON42,
								DECODE(FACT_NAME, '부여', MIN_ST) CON43,
								DECODE(FACT_NAME, '옥천천', MIN_ST) CON44,
								DECODE(FACT_NAME, '용담호', MIN_ST) CON45,
								DECODE(FACT_NAME, '이원', MIN_ST) CON46,
								DECODE(FACT_NAME, '장계', MIN_ST) CON47,
								DECODE(FACT_NAME, '현도', MIN_ST) CON48, /* 영산강 */
								DECODE(FACT_NAME, '구례', MIN_ST) CON49,
								DECODE(FACT_NAME, '나주', MIN_ST) CON50,
								DECODE(FACT_NAME, '동복호', MIN_ST) CON51,
								DECODE(FACT_NAME, '서창교', MIN_ST) CON52,
								DECODE(FACT_NAME, '옥정호', MIN_ST) CON53,
								DECODE(FACT_NAME, '주암호', MIN_ST) CON54,
								DECODE(FACT_NAME, '탐진호', MIN_ST) CON55,
								DECODE(FACT_NAME, '황룡강', MIN_ST) CON56
						FROM (
								SELECT 
										A.FACT_CODE, 
										A.FACT_NAME,
										 B.MIN_TIME, 
										 CASE 
											WHEN B.ITEM_CODE = 'PHY01' 
											THEN 'PHY00'
											WHEN B.ITEM_CODE = 'DOW01'
											THEN 'DOW00'
											WHEN B.ITEM_CODE = 'CON01'
											THEN 'CON00'
											WHEN B.ITEM_CODE = 'TMP01'
											THEN 'TMP00'
											ELSE
												B.ITEM_CODE
										 END ITEM_CODE,
										 B.MIN_VL, 
										 B.MIN_OR,
										DECODE(C.MSR_ID, NULL, B.MIN_ST, '10') MIN_ST
								FROM 
								(SELECT A.FACT_CODE,
										A.FACT_NAME, 
										 (SELECT /*+ INDEX_DESC(B IX_MIN_DATA_02) */ MIN_TIME
										  FROM T_MIN_DATA B
										  WHERE B.FACT_CODE = A.FACT_CODE
										  	AND B.MIN_TIME = B.MIN_TIME
											AND B.MIN_DCD = '0'
											AND ROWNUM = 1) MIN_TIME
									FROM T_FACT_INFO A 
									WHERE A.SYS_KIND = 'A') A,
									T_MIN_DATA B,
									ALARMHIST_TB C	 
								WHERE A.MIN_TIME = B.MIN_TIME
								  AND A.FACT_CODE = B.FACT_CODE
								  AND B.FACT_CODE = C.SITE_ID(+)
								  AND B.MIN_TIME = SUBSTR(C.START_ALARM_DATE(+), 0, 12)
								  AND B.ITEM_CODE = C.MSR_ID(+) 
								  AND B.MIN_DCD = '0' 
								  AND A.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI')
								  ) F11)
				 GROUP BY ITEM_CODE) D11
		 WHERE F11.CODE = D11.ITEM_CODE(+)
	</statement>
	
	
	<statement id="getAutoInsertData" parameterClass="String" resultClass="autoDataVO">
		SELECT *
		  FROM (SELECT COMMON_CODE, COMMON_CODE_NAME FROM T_COMMON_CODE WHERE COMMON_CODE_CATEGORY = '37' ORDER BY CODE_SORT) F11,
				(
				SELECT ITEM_CODE, 
						/* 한강 */
						TO_CHAR(SUM(VAL01), 'FM999,990.099') VAL01,
						TO_CHAR(SUM(VAL02), 'FM999,990.099') VAL02,
						TO_CHAR(SUM(VAL03), 'FM999,990.099') VAL03,
						TO_CHAR(SUM(VAL04), 'FM999,990.099') VAL04,
						TO_CHAR(SUM(VAL05), 'FM999,990.099') VAL05,  
						TO_CHAR(SUM(VAL06), 'FM999,990.099') VAL06,  
						TO_CHAR(SUM(VAL07), 'FM999,990.099') VAL07,  
						TO_CHAR(SUM(VAL08), 'FM999,990.099') VAL08, 
						TO_CHAR(SUM(VAL09), 'FM999,990.099') VAL09,
						TO_CHAR(SUM(VAL10), 'FM999,990.099') VAL10,
						TO_CHAR(SUM(VAL11), 'FM999,990.099') VAL11,
						TO_CHAR(SUM(VAL12), 'FM999,990.099') VAL12,
						TO_CHAR(SUM(VAL13), 'FM999,990.099') VAL13,
						TO_CHAR(SUM(VAL14), 'FM999,990.099') VAL14,
						TO_CHAR(SUM(VAL15), 'FM999,990.099') VAL15,
						TO_CHAR(SUM(VAL16), 'FM999,990.099') VAL16,
						TO_CHAR(SUM(VAL17), 'FM999,990.099') VAL17,
						TO_CHAR(SUM(VAL18), 'FM999,990.099') VAL18,
						TO_CHAR(SUM(VAL19), 'FM999,990.099') VAL19,
						/* 낙동강 */
						TO_CHAR(SUM(VAL20), 'FM999,990.099') VAL20,
						TO_CHAR(SUM(VAL21), 'FM999,990.099') VAL21,
						TO_CHAR(SUM(VAL22), 'FM999,990.099') VAL22,
						TO_CHAR(SUM(VAL23), 'FM999,990.099') VAL23,
						TO_CHAR(SUM(VAL24), 'FM999,990.099') VAL24,
						TO_CHAR(SUM(VAL25), 'FM999,990.099') VAL25,
						TO_CHAR(SUM(VAL26), 'FM999,990.099') VAL26,
						TO_CHAR(SUM(VAL27), 'FM999,990.099') VAL27,
						TO_CHAR(SUM(VAL28), 'FM999,990.099') VAL28,
						TO_CHAR(SUM(VAL29), 'FM999,990.099') VAL29,
						TO_CHAR(SUM(VAL30), 'FM999,990.099') VAL30,
						TO_CHAR(SUM(VAL31), 'FM999,990.099') VAL31,
						TO_CHAR(SUM(VAL32), 'FM999,990.099') VAL32,
						TO_CHAR(SUM(VAL33), 'FM999,990.099') VAL33,
						TO_CHAR(SUM(VAL34), 'FM999,990.099') VAL34,
						TO_CHAR(SUM(VAL35), 'FM999,990.099') VAL35,
						TO_CHAR(SUM(VAL36), 'FM999,990.099') VAL36,
						TO_CHAR(SUM(VAL37), 'FM999,990.099') VAL37,
						/* 금강 */
						TO_CHAR(SUM(VAL38), 'FM999,990.099') VAL38,
						TO_CHAR(SUM(VAL39), 'FM999,990.099') VAL39,
						TO_CHAR(SUM(VAL40), 'FM999,990.099') VAL40,
						TO_CHAR(SUM(VAL41), 'FM999,990.099') VAL41,
						TO_CHAR(SUM(VAL42), 'FM999,990.099') VAL42,
						TO_CHAR(SUM(VAL43), 'FM999,990.099') VAL43,
						TO_CHAR(SUM(VAL44), 'FM999,990.099') VAL44,
						TO_CHAR(SUM(VAL45), 'FM999,990.099') VAL45,
						TO_CHAR(SUM(VAL46), 'FM999,990.099') VAL46,
						TO_CHAR(SUM(VAL47), 'FM999,990.099') VAL47,
						TO_CHAR(SUM(VAL48), 'FM999,990.099') VAL48,
						/* 영산강 */
						TO_CHAR(SUM(VAL49), 'FM999,990.099') VAL49,
						TO_CHAR(SUM(VAL50), 'FM999,990.099') VAL50,
						TO_CHAR(SUM(VAL51), 'FM999,990.099') VAL51,
						TO_CHAR(SUM(VAL52), 'FM999,990.099') VAL52,
						TO_CHAR(SUM(VAL53), 'FM999,990.099') VAL53,
						TO_CHAR(SUM(VAL54), 'FM999,990.099') VAL54,
						TO_CHAR(SUM(VAL55), 'FM999,990.099') VAL55,
						TO_CHAR(SUM(VAL56), 'FM999,990.099') VAL56,
						/* 한강 */
						SUM(CON01) CON01,
						SUM(CON02) CON02,
						SUM(CON03) CON03,
						SUM(CON04) CON04,
						SUM(CON05) CON05,  
						SUM(CON06) CON06,  
						SUM(CON07) CON07,  
						SUM(CON08) CON08, 
						SUM(CON09) CON09,
						SUM(CON10) CON10,
						SUM(CON11) CON11,
						SUM(CON12) CON12,
						SUM(CON13) CON13,
						SUM(CON14) CON14,
						SUM(CON15) CON15,
						SUM(CON16) CON16,
						SUM(CON17) CON17,
						SUM(CON18) CON18,
						SUM(CON19) CON19,
						/* 낙동강 */
						SUM(CON20) CON20,
						SUM(CON21) CON21,
						SUM(CON22) CON22,
						SUM(CON23) CON23,
						SUM(CON24) CON24,
						SUM(CON25) CON25,
						SUM(CON26) CON26,
						SUM(CON27) CON27,
						SUM(CON28) CON28,
						SUM(CON29) CON29,
						SUM(CON30) CON30,
						SUM(CON31) CON31,
						SUM(CON32) CON32,
						SUM(CON33) CON33,
						SUM(CON34) CON34,
						SUM(CON35) CON35,
						SUM(CON36) CON36,
						SUM(CON37) CON37,
						/* 금강 */
						SUM(CON38) CON38,
						SUM(CON39) CON39,
						SUM(CON40) CON40,
						SUM(CON41) CON41,
						SUM(CON42) CON42,
						SUM(CON43) CON43,
						SUM(CON44) CON44,
						SUM(CON45) CON45,
						SUM(CON46) CON46,
						SUM(CON47) CON47,
						SUM(CON48) CON48,
						/* 영산강 */
						SUM(CON49) CON49,
						SUM(CON50) CON50,
						SUM(CON51) CON51,
						SUM(CON52) CON52,
						SUM(CON53) CON53,
						SUM(CON54) CON54,
						SUM(CON55) CON55,
						SUM(CON56) CON56
				  FROM (  
					SELECT ITEM_CODE,
							/* 한강 */
							DECODE(FACT_NAME, '가평', MIN_VL) VAL01,
							DECODE(FACT_NAME, '강천', MIN_VL) VAL02,
							DECODE(FACT_NAME, '경안천', MIN_VL) VAL03,
							DECODE(FACT_NAME, '구리', MIN_VL) VAL04,
							DECODE(FACT_NAME, '단양', MIN_VL) VAL05,  
							DECODE(FACT_NAME, '달천', MIN_VL) VAL06,  
							DECODE(FACT_NAME, '미산', MIN_VL) VAL07,  
							DECODE(FACT_NAME, '서상', MIN_VL) VAL08, 
							DECODE(FACT_NAME, '신천', MIN_VL) VAL09,
							DECODE(FACT_NAME, '양평', MIN_VL) VAL10,
							DECODE(FACT_NAME, '여주', MIN_VL) VAL11,
							DECODE(FACT_NAME, '원주', MIN_VL) VAL12,
							DECODE(FACT_NAME, '의암호', MIN_VL) VAL13,
							DECODE(FACT_NAME, '인제', MIN_VL) VAL14,
							DECODE(FACT_NAME, '충주', MIN_VL) VAL15,
							DECODE(FACT_NAME, '평창강', MIN_VL) VAL16,
							DECODE(FACT_NAME, '포천', MIN_VL) VAL17,
							DECODE(FACT_NAME, '한탄강', MIN_VL) VAL18,
							DECODE(FACT_NAME, '화천', MIN_VL) VAL19,
							/* 낙옹강 */
							DECODE(FACT_NAME, '강창', MIN_VL) VAL20,
							DECODE(FACT_NAME, '고령', MIN_VL) VAL21,
							DECODE(FACT_NAME, '남천', MIN_VL) VAL22,
							DECODE(FACT_NAME, '봉화', MIN_VL) VAL23,
							DECODE(FACT_NAME, '상동', MIN_VL) VAL24,
							DECODE(FACT_NAME, '성서', MIN_VL) VAL25,
							DECODE(FACT_NAME, '성주', MIN_VL) VAL26,
							DECODE(FACT_NAME, '예천', MIN_VL) VAL27,
							DECODE(FACT_NAME, '왜관', MIN_VL) VAL28,
							DECODE(FACT_NAME, '임하호', MIN_VL) VAL29,
							DECODE(FACT_NAME, '적포', MIN_VL) VAL30,
							DECODE(FACT_NAME, '진주', MIN_VL) VAL31,
							DECODE(FACT_NAME, '창암', MIN_VL) VAL32,
							DECODE(FACT_NAME, '청암', MIN_VL) VAL33,
							DECODE(FACT_NAME, '칠곡', MIN_VL) VAL34,
							DECODE(FACT_NAME, '칠서', MIN_VL) VAL35,
							DECODE(FACT_NAME, '풍양', MIN_VL) VAL36,
							DECODE(FACT_NAME, '해평', MIN_VL) VAL37,
							/* 금강 */
							DECODE(FACT_NAME, '갑천', MIN_VL) VAL38,
							DECODE(FACT_NAME, '공주', MIN_VL) VAL39,
							DECODE(FACT_NAME, '대청호', MIN_VL) VAL40,
							DECODE(FACT_NAME, '미호천', MIN_VL) VAL41,
							DECODE(FACT_NAME, '봉황천', MIN_VL) VAL42,
							DECODE(FACT_NAME, '부여', MIN_VL) VAL43,
							DECODE(FACT_NAME, '옥천천', MIN_VL) VAL44,
							DECODE(FACT_NAME, '용담호', MIN_VL) VAL45,
							DECODE(FACT_NAME, '이원', MIN_VL) VAL46,
							DECODE(FACT_NAME, '장계', MIN_VL) VAL47,
							DECODE(FACT_NAME, '현도', MIN_VL) VAL48,
							/* 영산강 */
							DECODE(FACT_NAME, '구례', MIN_VL) VAL49,
							DECODE(FACT_NAME, '나주', MIN_VL) VAL50,
							DECODE(FACT_NAME, '동복호', MIN_VL) VAL51,
							DECODE(FACT_NAME, '서창교', MIN_VL) VAL52,
							DECODE(FACT_NAME, '옥정호', MIN_VL) VAL53,
							DECODE(FACT_NAME, '주암호', MIN_VL) VAL54,
							DECODE(FACT_NAME, '탐진호', MIN_VL) VAL55,
							DECODE(FACT_NAME, '황룡강', MIN_VL) VAL56,
							/* 한강 */
							DECODE(FACT_NAME, '가평', MIN_ST) CON01,
							DECODE(FACT_NAME, '강천', MIN_ST) CON02,
							DECODE(FACT_NAME, '경안천', MIN_ST) CON03,
							DECODE(FACT_NAME, '구리', MIN_ST) CON04,
							DECODE(FACT_NAME, '단양', MIN_ST) CON05,  
							DECODE(FACT_NAME, '달천', MIN_ST) CON06,  
							DECODE(FACT_NAME, '미산', MIN_ST) CON07,  
							DECODE(FACT_NAME, '서상', MIN_ST) CON08, 
							DECODE(FACT_NAME, '신천', MIN_ST) CON09,
							DECODE(FACT_NAME, '양평', MIN_ST) CON10,
							DECODE(FACT_NAME, '여주', MIN_ST) CON11,
							DECODE(FACT_NAME, '원주', MIN_ST) CON12,
							DECODE(FACT_NAME, '의암호', MIN_ST) CON13,
							DECODE(FACT_NAME, '인제', MIN_ST) CON14,
							DECODE(FACT_NAME, '충주', MIN_ST) CON15,
							DECODE(FACT_NAME, '평창강', MIN_ST) CON16,
							DECODE(FACT_NAME, '포천', MIN_ST) CON17,
							DECODE(FACT_NAME, '한탄강', MIN_ST) CON18,
							DECODE(FACT_NAME, '화천', MIN_ST) CON19,
							/* 낙옹강 */
							DECODE(FACT_NAME, '강창', MIN_ST) CON20,
							DECODE(FACT_NAME, '고령', MIN_ST) CON21,
							DECODE(FACT_NAME, '남천', MIN_ST) CON22,
							DECODE(FACT_NAME, '봉화', MIN_ST) CON23,
							DECODE(FACT_NAME, '상동', MIN_ST) CON24,
							DECODE(FACT_NAME, '성서', MIN_ST) CON25,
							DECODE(FACT_NAME, '성주', MIN_ST) CON26,
							DECODE(FACT_NAME, '예천', MIN_ST) CON27,
							DECODE(FACT_NAME, '왜관', MIN_ST) CON28,
							DECODE(FACT_NAME, '임하호', MIN_ST) CON29,
							DECODE(FACT_NAME, '적포', MIN_ST) CON30,
							DECODE(FACT_NAME, '진주', MIN_ST) CON31,
							DECODE(FACT_NAME, '창암', MIN_ST) CON32,
							DECODE(FACT_NAME, '청암', MIN_ST) CON33,
							DECODE(FACT_NAME, '칠곡', MIN_ST) CON34,
							DECODE(FACT_NAME, '칠서', MIN_ST) CON35,
							DECODE(FACT_NAME, '풍양', MIN_ST) CON36,
							DECODE(FACT_NAME, '해평', MIN_ST) CON37,
							/* 금강 */
							DECODE(FACT_NAME, '갑천', MIN_ST) CON38,
							DECODE(FACT_NAME, '공주', MIN_ST) CON39,
							DECODE(FACT_NAME, '대청호', MIN_ST) CON40,
							DECODE(FACT_NAME, '미호천', MIN_ST) CON41,
							DECODE(FACT_NAME, '봉황천', MIN_ST) CON42,
							DECODE(FACT_NAME, '부여', MIN_ST) CON43,
							DECODE(FACT_NAME, '옥천천', MIN_ST) CON44,
							DECODE(FACT_NAME, '용담호', MIN_ST) CON45,
							DECODE(FACT_NAME, '이원', MIN_ST) CON46,
							DECODE(FACT_NAME, '장계', MIN_ST) CON47,
							DECODE(FACT_NAME, '현도', MIN_ST) CON48,
							/* 영산강 */
							DECODE(FACT_NAME, '구례', MIN_ST) CON49,
							DECODE(FACT_NAME, '나주', MIN_ST) CON50,
							DECODE(FACT_NAME, '동복호', MIN_ST) CON51,
							DECODE(FACT_NAME, '서창교', MIN_ST) CON52,
							DECODE(FACT_NAME, '옥정호', MIN_ST) CON53,
							DECODE(FACT_NAME, '주암호', MIN_ST) CON54,
							DECODE(FACT_NAME, '탐진호', MIN_ST) CON55,
							DECODE(FACT_NAME, '황룡강', MIN_ST) CON56
					FROM (
							SELECT F1.FACT_CODE, D1.FACT_NAME, F1.MIN_TIME,
									F1.ITEM_CODE, 
									F1.MIN_VL, F1.MIN_OR, 
									DECODE(D2.MSR_ID, NULL, F1.MIN_ST, '10') MIN_ST 
							  FROM T_MIN_DATA F1,
									T_FACT_INFO D1,
									ALARMHIST_TB D2
							 WHERE D1.SYS_KIND = 'A'
								AND F1.FACT_CODE = D1.FACT_CODE
								AND F1.FACT_CODE = D2.SITE_ID(+)
								AND F1.MIN_TIME = SUBSTR(D2.START_ALARM_DATE(+),0,12)
								AND F1.ITEM_CODE = D2.MSR_ID(+)
								AND F1.MIN_TIME = #time#
					) F11
					)	
				 GROUP BY ITEM_CODE
				) D11
		 WHERE F11.COMMON_CODE = D11.ITEM_CODE(+)
	</statement>
	
	<statement id="getDepts" resultClass="HashMap">
		SELECT DEPT_NAME AS CAPTION, DEPT_CODE AS VALUE
			  FROM T_DEPT_INFO
		 WHERE USE_FLAG = 'Y'
			 AND UPPER_DEPT_CODE = '0'
		 ORDER BY DEPT_SORT ASC
	</statement>	
	
	
	<statement id="getHighDamInfo" parameterClass="seqInfoVO" resultClass="seqInfoVO">
		SELECT A.ID,
				A.NAME,
				A.ADDRESS,
				A.DO_CODE as doCode,
				A.CTY_CODE as ctyCode,
				A.MANAGE,
				A.RIVER_NM as riverName,
				A.RIVER_DIV as riverDiv,
				A.LONGITUDE,
				A.LATITUDE,
				A.NGI_MANAGE as ngiManage,
				A.NGI_PHONE as ngiPhone,
				A.ETC_MANAGE as etcManage,
				A.ETC_PHONE as etcPhone,
				A.USE_YN as useYn,
				C.YMDH,
				TO_CHAR(C.SWL, 'FM999,990.00') AS SWL,
				TO_CHAR(C.INF, 'FM999,990.00') AS INF,
				TO_CHAR(C.OTF, 'FM999,990.00') AS OTF,
				TO_CHAR(C.SFW, 'FM999,990.00') AS SFW,
				TO_CHAR(C.ECPC, 'FM999,990.00') AS ECPC,
				C.ITEM_CODE as itemCode,
				B.SEQ,
				B.SEQ2
		  FROM T_DAM A,
				(
				  SELECT 
						*
				  FROM
				  (
					  SELECT AAA.ID, AAA.SEQ, AAA.RIVER_DIV, BBB.SEQ as SEQ2
					  FROM T_LOC_SEQ AAA,
							(
							  SELECT SEQ, RIVER_DIV
							  FROM T_LOC_SEQ
							  WHERE ID LIKE '%' || #factCode# || '%'
									AND BRANCH_NO LIKE '%' || #branchNo# || '%'
							  ORDER BY SEQ ASC
							) BBB
					 WHERE	
					 <![CDATA[ 
							AAA.SEQ < BBB.SEQ
							AND AAA.TYPE = 'D'
							AND AAA.RIVER_DIV = BBB.RIVER_DIV
							AND AAA.STREAM_CODE = 'M'
					 ]]>
					  ORDER BY AAA.SEQ ASC
					)
					WHERE
					  rownum = 1
				) B,
				(SELECT TDM.DMOBSCD,
						TDM.YMDH,
						SWL/100 AS SWL,
						INF,
						OTF,
						SFW,
						ECPC,
						ITEM_CODE,
						ID
				  FROM T_DMHR TDM, (  SELECT DMOBSCD ID, MAX (YMDH) YMDH
										FROM T_DMHR
									GROUP BY DMOBSCD) TDMAX
				 WHERE TDM.DMOBSCD = TDMAX.ID AND TDM.YMDH = TDMAX.YMDH) C
		 WHERE A.ID = B.ID AND A.ID = C.ID(+)
	</statement>
	
	<statement id="getLowWaterDCCenter" parameterClass="seqInfoVO" resultClass="seqInfoVO">
		SELECT 
			*
		FROM
		(
			SELECT AA.ID,
					AA.NAME,
					AA.ADDRESS,
					AA.DO_CODE as doCode,
					AA.CTY_CODE as ctyCode,
					AA.LONGITUDE,
					AA.LATITUDE,
					AA.TYPE,
					AA.MANAGE,
					AA.MANAGER,
					AA.PHONE,
					AA.USE_YN as useYn,
					AA.RIVER_DIV as riverDiv,
					TO_CHAR(AA.PROC_QTY, 'FM999,990.00') as procQty,
					AA.RIVER_NM as riverName,
					AA.CONT_TERM as contTerm,
					BB.SEQ as seq1,
					BB.SEQ1 as seq2
			  FROM T_WATERDC_CENTER AA,
					(	
						SELECT A.ID,
								A.RIVER_DIV,
								A.SEQ as SEQ,
								B.SEQ as SEQ1,
								B.RIVER_DIV as river_div2
						  FROM T_LOC_SEQ A,
								(
								SELECT SEQ, RIVER_DIV
								  FROM T_LOC_SEQ
								 WHERE ID LIKE '%' || #factCode# || '%'
										AND BRANCH_NO LIKE '%' || #branchNo# || '%'
							  ) B
						 WHERE 
								A.SEQ > B.SEQ
								AND B.RIVER_DIV = A.RIVER_DIV 
								AND TYPE = 'C' AND STREAM_CODE = 'M'
				  ) BB
			 WHERE 
				AA.ID = BB.ID
				AND AA.RIVER_DIV = BB.RIVER_DIV
			ORDER BY
				BB.SEQ
		)
		WHERE	
			ROWNUM = 1
	</statement>
	
	<statement id="getWaterMobilesysMntMainDetail" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO" remapResults="true">
		SELECT  TO_CHAR(TO_DATE($time_type$_TIME, 'YYYYMMDDHH24MI'), 'MM/DD HH24:MI') MIN_TIME
				, TO_CHAR(SUM(CON), 'FM999,990.00') CON 
				, TO_CHAR(SUM(DOW), 'FM999,990.00') DOW 
				, TO_CHAR(SUM(TMP), 'FM999,990.00') TMP 
				, TO_CHAR(SUM(PHY), 'FM999,990.00') PHY 
				, SUM(CON_OR) CON_OR 
				, SUM(DOW_OR) DOW_OR 
				, SUM(TMP_OR) TMP_OR 
				, SUM(PHY_OR) PHY_OR 
<!-- 				/* 일반 항목 외부 */  -->
				, TO_CHAR(SUM(TMP2), 'FM999,990.00') TMP2 
				, TO_CHAR(SUM(TMP3), 'FM999,990.00') TMP3 
				, TO_CHAR(SUM(PHY2), 'FM999,990.00') PHY2 
				, TO_CHAR(SUM(PHY3), 'FM999,990.00') PHY3 
				, TO_CHAR(SUM(DOW2), 'FM999,990.00') DOW2 
				, TO_CHAR(SUM(DOW3), 'FM999,990.00') DOW3 
				, TO_CHAR(SUM(CON2), 'FM999,990.00') CON2 
				, TO_CHAR(SUM(CON3), 'FM999,990.00') CON3 
				, TO_CHAR(SUM(TUR), 'FM999,990.00') TUR 
				, TO_CHAR(SUM(TOF), 'FM999,990.00') TOF 
				, SUM(TOF_OR) TOF_OR 
				, SUM(TMP2_OR) TMP2_OR 
				, SUM(TMP3_OR) TMP3_OR 
				, SUM(PHY2_OR) PHY2_OR 
				, SUM(PHY3_OR) PHY3_OR 
				, SUM(DOW2_OR) DOW2_OR 
				, SUM(DOW3_OR) DOW3_OR 
				, SUM(CON2_OR) CON2_OR 
				, SUM(CON3_OR) CON3_OR 
				, SUM(TUR_OR) TUR_OR 
				<isEqual compareValue="BIO1" property="auto">
<!-- 				/* 생물 독성 (물고기)*/  -->
				, TO_CHAR(SUM(IMP), 'FM999,990.00') IMP 
				, SUM(IMP_OR) IMP_OR 
				</isEqual>
				<isEqual compareValue="BIO2" property="auto">
<!-- 				/* 생물 독성 (물벼룩1) */  -->
				, TO_CHAR(SUM(LIM), 'FM999,990.00') LIM 
				, TO_CHAR(SUM(RIM), 'FM999,990.00') RIM 
				, SUM(LIM_OR) LIM_OR 
				, SUM(RIM_OR) RIM_OR 
				</isEqual>
				<isEqual compareValue="BIO3" property="auto">
<!-- 				/* 생물 독성 (물벼룩2) */  -->
				, TO_CHAR(SUM(LTX), 'FM999,990.00') LTX 
				, TO_CHAR(SUM(RTX), 'FM999,990.00') RTX 
				, SUM(LTX_OR) LTX_OR 
				, SUM(RTX_OR) RTX_OR 
				</isEqual>
				<isEqual compareValue="BIO4" property="auto">
<!-- 				/* 생물 독성 (미생물) */  -->
				, TO_CHAR(SUM(TOX), 'FM999,990.00') TOX 
				, SUM(TOX_OR) TOX_OR 
				</isEqual>
				<isEqual compareValue="BIO5" property="auto">
<!-- 				/* 생물 독성 (조류) */  -->
				, TO_CHAR(SUM(EVN), 'FM999,990.00') EVN 
				, SUM(EVN_OR) EVN_OR 
				</isEqual>
				<isEqual compareValue="VOCS" property="auto">
<!-- 				/* 휘발성 유기화합물 */  -->
				, TO_CHAR(SUM(VOC1), 'FM999,990.00') VOC1 
				, TO_CHAR(SUM(VOC2), 'FM999,990.00') VOC2 
				, TO_CHAR(SUM(VOC3), 'FM999,990.00') VOC3 
				, TO_CHAR(SUM(VOC4), 'FM999,990.00') VOC4 
				, TO_CHAR(SUM(VOC5), 'FM999,990.00') VOC5 
				, TO_CHAR(SUM(VOC6), 'FM999,990.00') VOC6 
				, TO_CHAR(SUM(VOC7), 'FM999,990.00') VOC7 
				, TO_CHAR(SUM(VOC8), 'FM999,990.00') VOC8 
				, TO_CHAR(SUM(VOC9), 'FM999,990.00') VOC9 
				, TO_CHAR(SUM(VOC10), 'FM999,990.00') VOC10 
				, TO_CHAR(SUM(VOC11), 'FM999,990.00') VOC11 
				, TO_CHAR(SUM(VOC12), 'FM999,990.00') VOC12 
				, TO_CHAR(SUM(VOC13), 'FM999,990.00') VOC13 
				, TO_CHAR(SUM(VOC14), 'FM999,990.00') VOC14 
				, TO_CHAR(SUM(VOC15), 'FM999,990.00') VOC15 
				, SUM(VOC1_OR) VOC1_OR 
				, SUM(VOC2_OR) VOC2_OR 
				, SUM(VOC3_OR) VOC3_OR 
				, SUM(VOC4_OR) VOC4_OR 
				, SUM(VOC5_OR) VOC5_OR 
				, SUM(VOC6_OR) VOC6_OR 
				, SUM(VOC7_OR) VOC7_OR 
				, SUM(VOC8_OR) VOC8_OR 
				, SUM(VOC9_OR) VOC9_OR 
				, SUM(VOC10_OR) VOC10_OR 
				, SUM(VOC11_OR) VOC11_OR 
				, SUM(VOC12_OR) VOC12_OR 
				, SUM(VOC13_OR) VOC13_OR 
				, SUM(VOC14_OR) VOC14_OR 
				, SUM(VOC15_OR) VOC15_OR 
				</isEqual>
				<isEqual compareValue="METL" property="auto">
<!-- 				/* 중금속 */  -->
				, TO_CHAR(SUM(COP), 'FM999,990.00') COP 
				, TO_CHAR(SUM(PLU), 'FM999,990.00') PLU 
				, TO_CHAR(SUM(ZIN), 'FM999,990.00') ZIN 
				, TO_CHAR(SUM(CAD), 'FM999,990.00') CAD 
				, SUM(COP_OR) COP_OR 
				, SUM(PLU_OR) PLU_OR 
				, SUM(ZIN_OR) ZIN_OR 
				, SUM(CAD_OR) CAD_OR 
				</isEqual>
				<isEqual compareValue="PHEN" property="auto">
<!-- 				/* 페놀 */  -->
				, TO_CHAR(SUM(PHE), 'FM999,990.00') PHE 
				, TO_CHAR(SUM(PHL), 'FM999,990.00') PHL 
				, SUM(PHE_OR) PHE_OR 
				, SUM(PHL_OR) PHL_OR 
				</isEqual>
				<isEqual compareValue="PHEN" property="auto">
<!-- 				/* 유기물질 */  -->
				, TO_CHAR(SUM(TOC), 'FM999,990.00') TOC 
				, SUM(TOC_OR) TOC_OR 
				</isEqual>
				<isEqual compareValue="NUTR" property="auto">
<!-- 				/* 영양염류 */  -->
				, TO_CHAR(SUM(TON), 'FM999,990.00') TON 
				, TO_CHAR(SUM(TOP), 'FM999,990.00') TOP 
				, TO_CHAR(SUM(NH4), 'FM999,990.00') NH4 
				, TO_CHAR(SUM(NO3), 'FM999,990.00') NO3 
				, TO_CHAR(SUM(PO4), 'FM999,990.00') PO4 
				, SUM(TON_OR) TON_OR 
				, SUM(TOP_OR) TOP_OR 
				, SUM(NH4_OR) NH4_OR 
				, SUM(NO3_OR) NO3_OR 
				, SUM(PO4_OR) PO4_OR 
				</isEqual>
				<isEqual compareValue="RAIN" property="auto">
<!-- 				/* 강수량계 */  -->
				, TO_CHAR(SUM(RIN), 'FM999,990.00') RIN 
				, SUM(RIN_OR) RIN_OR 
				</isEqual>
			  FROM (         
				SELECT   
					$time_type$_TIME  
<!-- 					/*  일반항목 내부 */  -->
					, DECODE(VL.ITEM_CODE, 'CON00', $time_type$_VL) CON 
					, DECODE(VL.ITEM_CODE, 'DOW00', $time_type$_VL) DOW 
					, DECODE(VL.ITEM_CODE, 'TMP00', $time_type$_VL) TMP 
					, DECODE(VL.ITEM_CODE, 'PHY00', $time_type$_VL) PHY 
					, DECODE(VL.ITEM_CODE, 'CON00', $time_type$_OR) CON_OR 
					, DECODE(VL.ITEM_CODE, 'DOW00', $time_type$_OR) DOW_OR 
					, DECODE(VL.ITEM_CODE, 'TMP00', $time_type$_OR) TMP_OR 
					, DECODE(VL.ITEM_CODE, 'PHY00', $time_type$_OR) PHY_OR 
<!-- 					/* 일반 항목 외부 */  -->
					, DECODE(VL.ITEM_CODE, 'TMP01', $time_type$_VL) TMP2 
					, DECODE(VL.ITEM_CODE, 'TMP02', $time_type$_VL) TMP3 
					, DECODE(VL.ITEM_CODE, 'PHY01', $time_type$_VL) PHY2 
					, DECODE(VL.ITEM_CODE, 'PHY02', $time_type$_VL) PHY3 
					, DECODE(VL.ITEM_CODE, 'DOW01', $time_type$_VL) DOW2 
					, DECODE(VL.ITEM_CODE, 'DOW01', $time_type$_VL) DOW3 
					, DECODE(VL.ITEM_CODE, 'CON01', $time_type$_VL) CON2 
					, DECODE(VL.ITEM_CODE, 'CON02', $time_type$_VL) CON3 
					, DECODE(VL.ITEM_CODE, 'TUR00', $time_type$_VL) TUR 
					, DECODE(VL.ITEM_CODE, 'TMP01', $time_type$_OR) TMP2_OR 
					, DECODE(VL.ITEM_CODE, 'TMP02', $time_type$_OR) TMP3_OR 
					, DECODE(VL.ITEM_CODE, 'PHY01', $time_type$_OR) PHY2_OR 
					, DECODE(VL.ITEM_CODE, 'PHY02', $time_type$_OR) PHY3_OR 
					, DECODE(VL.ITEM_CODE, 'DOW01', $time_type$_OR) DOW2_OR 
					, DECODE(VL.ITEM_CODE, 'DOW01', $time_type$_OR) DOW3_OR 
					, DECODE(VL.ITEM_CODE, 'CON01', $time_type$_OR) CON2_OR 
					, DECODE(VL.ITEM_CODE, 'CON02', $time_type$_OR) CON3_OR 
					, DECODE(VL.ITEM_CODE, 'TUR00', $time_type$_OR) TUR_OR 
					, DECODE(VL.ITEM_CODE, 'TOF00', $time_type$_VL) TOF 
					, DECODE(VL.ITEM_CODE, 'TOF00', $time_type$_OR) TOF_OR 
					<isEqual compareValue="BIO1" property="auto">
<!-- 					/* 생물 독성 (물고기)*/  -->
					, DECODE(VL.ITEM_CODE, 'IMP00', $time_type$_VL) IMP 
					, DECODE(VL.ITEM_CODE, 'IMP00', $time_type$_OR) IMP_OR 
					</isEqual>
					<isEqual compareValue="BIO2" property="auto">
<!-- 					/* 생물 독성 (물벼룩1) */  -->
					, DECODE(VL.ITEM_CODE, 'LIM00', $time_type$_VL) LIM 
					, DECODE(VL.ITEM_CODE, 'RIM00', $time_type$_VL) RIM 
					, DECODE(VL.ITEM_CODE, 'LIM00', $time_type$_OR) LIM_OR 
					, DECODE(VL.ITEM_CODE, 'RIM00', $time_type$_OR) RIM_OR 
					</isEqual>
					<isEqual compareValue="BIO3" property="auto">
<!-- 					/* 생물 독성 (물벼룩2) */  -->
					, DECODE(VL.ITEM_CODE, 'LTX00', $time_type$_VL) LTX 
					, DECODE(VL.ITEM_CODE, 'RTX00', $time_type$_VL) RTX 
					, DECODE(VL.ITEM_CODE, 'LTX00', $time_type$_OR) LTX_OR 
					, DECODE(VL.ITEM_CODE, 'RTX00', $time_type$_OR) RTX_OR 
					</isEqual>
					<isEqual compareValue="BIO4" property="auto">
<!-- 					/* 생물 독성 (미생물) */  -->
					, DECODE(VL.ITEM_CODE, 'TOX00', $time_type$_VL) TOX 
					, DECODE(VL.ITEM_CODE, 'TOX00', $time_type$_OR) TOX_OR 
					</isEqual>
					<isEqual compareValue="BIO5" property="auto">
<!-- 					/* 생물 독성 (조류) */  -->
					, DECODE(VL.ITEM_CODE, 'EVN00', $time_type$_VL) EVN 
					, DECODE(VL.ITEM_CODE, 'EVN00', $time_type$_OR) EVN_OR 
					</isEqual>
					<isEqual compareValue="VOCS" property="auto">
<!-- 					/* 휘발성 유기화합물 */  -->
					, DECODE(VL.ITEM_CODE, 'VOC01', $time_type$_VL) VOC1 
					, DECODE(VL.ITEM_CODE, 'VOC02', $time_type$_VL) VOC2 
					, DECODE(VL.ITEM_CODE, 'VOC03', $time_type$_VL) VOC3 
					, DECODE(VL.ITEM_CODE, 'VOC04', $time_type$_VL) VOC4 
					, DECODE(VL.ITEM_CODE, 'VOC05', $time_type$_VL) VOC5 
					, DECODE(VL.ITEM_CODE, 'VOC06', $time_type$_VL) VOC6 
					, DECODE(VL.ITEM_CODE, 'VOC07', $time_type$_VL) VOC7 
					, DECODE(VL.ITEM_CODE, 'VOC08', $time_type$_VL) VOC8 
					, DECODE(VL.ITEM_CODE, 'VOC09', $time_type$_VL) VOC9 
					, DECODE(VL.ITEM_CODE, 'VOC10', $time_type$_VL) VOC10 
					, DECODE(VL.ITEM_CODE, 'VOC11', $time_type$_VL) VOC11 
					, DECODE(VL.ITEM_CODE, 'VOC12', $time_type$_VL) VOC12 
					, DECODE(VL.ITEM_CODE, 'VOC13', $time_type$_VL) VOC13 
					, DECODE(VL.ITEM_CODE, 'VOC14', $time_type$_VL) VOC14 
					, DECODE(VL.ITEM_CODE, 'VOC15', $time_type$_VL) VOC15 
					, DECODE(VL.ITEM_CODE, 'VOC01', $time_type$_OR) VOC1_OR 
					, DECODE(VL.ITEM_CODE, 'VOC02', $time_type$_OR) VOC2_OR 
					, DECODE(VL.ITEM_CODE, 'VOC03', $time_type$_OR) VOC3_OR 
					, DECODE(VL.ITEM_CODE, 'VOC04', $time_type$_OR) VOC4_OR 
					, DECODE(VL.ITEM_CODE, 'VOC05', $time_type$_OR) VOC5_OR 
					, DECODE(VL.ITEM_CODE, 'VOC06', $time_type$_OR) VOC6_OR 
					, DECODE(VL.ITEM_CODE, 'VOC07', $time_type$_OR) VOC7_OR 
					, DECODE(VL.ITEM_CODE, 'VOC08', $time_type$_OR) VOC8_OR 
					, DECODE(VL.ITEM_CODE, 'VOC09', $time_type$_OR) VOC9_OR 
					, DECODE(VL.ITEM_CODE, 'VOC10', $time_type$_OR) VOC10_OR 
					, DECODE(VL.ITEM_CODE, 'VOC11', $time_type$_OR) VOC11_OR 
					, DECODE(VL.ITEM_CODE, 'VOC12', $time_type$_OR) VOC12_OR 
					, DECODE(VL.ITEM_CODE, 'VOC13', $time_type$_OR) VOC13_OR 
					, DECODE(VL.ITEM_CODE, 'VOC14', $time_type$_OR) VOC14_OR 
					, DECODE(VL.ITEM_CODE, 'VOC15', $time_type$_OR) VOC15_OR 
					</isEqual>
					<isEqual compareValue="METL" property="auto">
<!-- 					/* 중금속 */  -->
					, DECODE(VL.ITEM_CODE, 'COP00', $time_type$_VL) COP 
					, DECODE(VL.ITEM_CODE, 'PLU00', $time_type$_VL) PLU 
					, DECODE(VL.ITEM_CODE, 'ZIN00', $time_type$_VL) ZIN 
					, DECODE(VL.ITEM_CODE, 'CAD00', $time_type$_VL) CAD 
					, DECODE(VL.ITEM_CODE, 'COP00', $time_type$_OR) COP_OR 
					, DECODE(VL.ITEM_CODE, 'PLU00', $time_type$_OR) PLU_OR 
					, DECODE(VL.ITEM_CODE, 'ZIN00', $time_type$_OR) ZIN_OR 
					, DECODE(VL.ITEM_CODE, 'CAD00', $time_type$_OR) CAD_OR 
					</isEqual>
					<isEqual compareValue="PHEN" property="auto">
<!-- 					/* 페놀 */  -->
					, DECODE(VL.ITEM_CODE, 'PHE00', $time_type$_VL) PHE 
					, DECODE(VL.ITEM_CODE, 'PHL00', $time_type$_VL) PHL 
					, DECODE(VL.ITEM_CODE, 'PHE00', $time_type$_OR) PHE_OR 
					, DECODE(VL.ITEM_CODE, 'PHL00', $time_type$_OR) PHL_OR 
					</isEqual>
					<isEqual compareValue="PHEN" property="auto">
<!-- 					/* 유기물질 */  -->
					, DECODE(VL.ITEM_CODE, 'TOC00', $time_type$_VL) TOC 
					, DECODE(VL.ITEM_CODE, 'TOC00', $time_type$_OR) TOC_OR 
					</isEqual>
					<isEqual compareValue="NUTR" property="auto">
<!-- 					/* 영양염류 */  -->
					, DECODE(VL.ITEM_CODE, 'TON00', $time_type$_VL) TON 
					, DECODE(VL.ITEM_CODE, 'TOP00', $time_type$_VL) TOP 
					, DECODE(VL.ITEM_CODE, 'NH400', $time_type$_VL) NH4 
					, DECODE(VL.ITEM_CODE, 'NO300', $time_type$_VL) NO3 
					, DECODE(VL.ITEM_CODE, 'PO400', $time_type$_VL) PO4 
					, DECODE(VL.ITEM_CODE, 'TON00', $time_type$_OR) TON_OR 
					, DECODE(VL.ITEM_CODE, 'TOP00', $time_type$_OR) TOP_OR 
					, DECODE(VL.ITEM_CODE, 'NH400', $time_type$_OR) NH4_OR 
					, DECODE(VL.ITEM_CODE, 'NO300', $time_type$_OR) NO3_OR 
					, DECODE(VL.ITEM_CODE, 'PO400', $time_type$_OR) PO4_OR 
					</isEqual>
					<isEqual compareValue="RAIN" property="auto">
					, DECODE(VL.ITEM_CODE, 'RIN00', $time_type$_VL) RIN 
					, DECODE(VL.ITEM_CODE, 'RIN00', $time_type$_OR) RIN_OR 
					</isEqual>
				FROM T_$time_type$_DATA VL 
				WHERE VL.FACT_CODE =  #fact_code# 
					AND VL.BRANCH_NO = #branch_no#
					AND VL.$time_type$_TIME BETWEEN TO_CHAR(SYSDATE-1, 'YYYYMMDD')||'0000' AND TO_CHAR(SYSDATE, 'YYYYMMDD')||'2359' 
			 ) 
			 GROUP BY $time_type$_TIME 
			 ORDER BY $time_type$_TIME DESC 
	</statement>
	
	<statement id="IndexWaterSysMainDetail" parameterClass="watersysMntMainDetailSearchTSVO" resultClass="watersysMntMainDetailTSVO" remapResults="true">
	    	SELECT MAX(A.FACT_CODE) FACT_CODE, 
			       TO_CHAR(MAX(DECODE(A.ITEM_CODE, 'TON00', MIN_VL)), 'FM999,990.00') TUR, 
			       TO_CHAR(MAX(DECODE(DECODE(A.ITEM_CODE, 'PHY01', MIN_VL), NULL, DECODE(A.ITEM_CODE, 'PHY00', MIN_VL), DECODE(A.ITEM_CODE, 'PHY01', MIN_VL))), 'FM999,990.00') PHY, 
			       TO_CHAR(MAX(DECODE(DECODE(A.ITEM_CODE, 'DOW01', MIN_VL), NULL, DECODE(A.ITEM_CODE, 'DOW00', MIN_VL), DECODE(A.ITEM_CODE, 'DOW01', MIN_VL))), 'FM999,990.00') DOW, 
			       TO_CHAR(MAX(DECODE(DECODE(A.ITEM_CODE, 'CON01', MIN_VL), NULL, DECODE(A.ITEM_CODE, 'CON00', MIN_VL), DECODE(A.ITEM_CODE, 'CON01', MIN_VL))), 'FM999,990.000') CON, 
			       TO_CHAR(MAX(DECODE(DECODE(A.ITEM_CODE, 'TMP01', MIN_VL), NULL, DECODE(A.ITEM_CODE, 'TMP00', MIN_VL), DECODE(A.ITEM_CODE, 'TMP01', MIN_VL))), 'FM999,990.00') TMP , 
			       TO_CHAR(MAX(DECODE(A.ITEM_CODE, 'TOC00', MIN_VL)), 'FM999,990.00') TOC , 
			       TO_CHAR(MAX(DECODE(A.ITEM_CODE, 'TOF00', MIN_VL)), 'FM999,990.00') TOF , 
			       TO_CHAR(MAX(DECODE(A.ITEM_CODE, 'TON00', MIN_VL)), 'FM999,990.00') TON 
			  FROM 
			       (SELECT ROW_NUMBER() OVER(PARTITION BY ITEM_CODE ORDER BY A.MIN_TIME DESC) RNUM, 
			              A.* 
			         FROM T_MIN_DATA A 
			        WHERE A.min_time = A.min_time 
			              AND A.FACT_CODE = #fact_code# 
			              AND A.BRANCH_NO = A.BRANCH_NO 
			              AND A.MIN_TIME BETWEEN TO_CHAR(SYSDATE-1,'YYYYMMDDHH24MI') AND TO_CHAR(SYSDATE,'YYYYMMDDHH24MI') 
			              AND A.ITEM_CODE IN ('TON00', 'PHY01', 'DOW01', 'CON01', 'TMP01', 'TOC00', 'TOF00', 'TON00', 'PHY00', 'DOW00', 'CON00', 'TMP00') 
			       ) A 
			 WHERE A.RNUM = '1'  
	</statement>
</sqlMap>