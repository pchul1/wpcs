<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml">
  <head>
    <title>Google Maps + ArcGIS</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<link rel="stylesheet" type="text/css" href="/css/content.css" />
<!--##############################################################################-->
<!--## 시작:구글과 ESRI에서 관련 js파일을 가져오기위해 반드시 필요한 스크립트입니다.    ##-->
<!--## 포팅시에 실제 도메인네임과 GIS서버를 사용하기 위한 키, IP변경이 필요합니다.      ##-->
<!--## 해당키와 IP는 하단의 스크립트내에 주석으로 처리되어있으며 포팅시점에 변경바랍니다.##-->
<!--##############################################################################-->
    <script src="http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAAAUqzKskvQXw_UTKpILtz0BRqs7OO1Tb_cumvo_a2JFiOp5iBHRSME5u3O-Ts911e0yjTpD4PjiNW5g" type="text/javascript"></script>
    <script src="http://serverapi.arcgisonline.com/jsapi/gmaps/?v=1.6" type="text/javascript" ></script>
    <!--포팅시 아래의 도메인별 구글키의 변경이 필요합니다. -->
    <!--http://www.watertms.or.kr:8080 : ABQIAAAAAUqzKskvQXw_UTKpILtz0BSiOMSd4UtbBOzDpvG2FihVLiCnJRTRZTnPp7LJJwNnfiOH7iRZT97aLg-->
    <!--http://www.watertms.or.kr : ABQIAAAAAUqzKskvQXw_UTKpILtz0BRh65fw2Kxj1BIR7J7H70cBjtzx7hSqIHfLy7XBbpwf_EdihwInIGtqCw-->
    <!--http://www.waterkorea.or.kr:8080 : ABQIAAAAAUqzKskvQXw_UTKpILtz0BRqs7OO1Tb_cumvo_a2JFiOp5iBHRSME5u3O-Ts911e0yjTpD4PjiNW5g-->
    <!--http://www.waterkorea.or.kr : ABQIAAAAAUqzKskvQXw_UTKpILtz0BQXHMXAZIIXSp0UaSHdDYhAeGul3BQy7aUdJ-XNu3Mp0zfHROBvN2NJpQ-->
    
    <!-- <script src="http://gmaps-utility-library.googlecode.com/svn/trunk/progressbarcontrol/1.0/src/progressbarcontrol.js" type="text/javascript" ></script> -->
		
    <script type="text/javascript">
    var hostIP = "115.93.37.67";//포팅시 변경해주십시오.//GIS서버:10.101.164.223:8399
    var gmap = null;
    var dynMapOv = null;
    var queryTask;
    var geocoder = null;
    var dynamicMap = null;
    var layers = null ;
    var showLayerArray = [1,2,3,4,8,11];
    
    var mapExtension, identifyTask, layers, overlays;
    
    function initialize() {
      //Load Google Maps
      gmap = new GMap2(document.getElementById("gmap"));
	  gmap.setMapType(G_PHYSICAL_MAP);//G_NORMAL_MAP, G_SATELLITE_MAP, G_HYBRID_MAP, G_PHYSICAL_MAP
	  gmap.addMapType(G_PHYSICAL_MAP);
	  gmap.addControl(new GLargeMapControl());
      var topRight = new GControlPosition(G_ANCHOR_TOP_RIGHT, new GSize(5,5));
      gmap.addControl(new GMenuMapTypeControl(),topRight);
      gmap.addControl(new GOverviewMapControl());
      gmap.setCenter(new GLatLng(36.635412,128.287354),7);
      gmap.enableScrollWheelZoom();

      //create custom dynamic layer
      //esri.arcgis.gmaps.DynamicMapServiceLayer(url,esri.arcgis.gmaps.ImageParameters?,opacity?,callback?);
      dynamicMap = new esri.arcgis.gmaps.DynamicMapServiceLayer("http://"+hostIP+"/arcgis/rest/services/test1/MapServer", null, 0.75, dynmapcallback);
      geocoder = new GClientGeocoder();
      
      
      layers=dynamicMap.getVisibleLayers() ;
	  
	  mapExtension = new esri.arcgis.gmaps.MapExtension(gmap);
	  identifyTask = new esri.arcgis.gmaps.IdentifyTask("http://"+hostIP+"/arcgis/rest/services/test1/MapServer");
	  GEvent.addListener(gmap, "click", identify);

	  function legend() {}
	  legend.prototype = new GControl;
	  legend.prototype.initialize = function(gmap) {
	    var me = this;
	    me.panel = document.getElementById("legend");
	    me.panel.style.border = "1px solid gray";
	    me.panel.style.background = "white";
	    gmap.getContainer().appendChild(me.panel);
	    return me.panel;
	  };

	  legend.prototype.getDefaultPosition = function() {
	    return new GControlPosition(
	        G_ANCHOR_TOP_RIGHT, new GSize(100, 5));
	  };

	  legend.prototype.getPanel = function() {
	    return me.panel;
	  }
	  gmap.addControl(new legend());

	  function legendDetail() {}
	  legendDetail.prototype = new GControl;
	  legendDetail.prototype.initialize = function(gmap) {
	    var me = this;
	    me.panel = document.getElementById("legendDetail");
	    me.panel.style.border = "1px solid gray";
	    me.panel.style.background = "white";
	    gmap.getContainer().appendChild(me.panel);
	    return me.panel;
	  };

	  legendDetail.prototype.getDefaultPosition = function() {
	    return new GControlPosition(
	        G_ANCHOR_TOP_RIGHT, new GSize(100, 30));
	  };

	  legendDetail.prototype.getPanel = function() {
	    return me.panel;
	  }
	  gmap.addControl(new legendDetail());

	  getAreaMoveDisable(34.07086232376631,125.70556640625,38.58252615935333,129.55078125);
	  getAreaLevelDisable(7,15);
      
      executeQueryinit();

    }
    
	
    function dynmapcallback(groundov) {
      //Add groundoverlay to map using gmap.addOverlay()
      gmap.addOverlay(groundov);
      dynMapOv = groundov;
    }

    function executeQuery(minorVal) {
        gmap.clearOverlays();
        //gmap.removeOverlay(geom);
        dynamicMap = new esri.arcgis.gmaps.DynamicMapServiceLayer("http://"+ hostIP +"/arcgis/rest/services/test1/MapServer", null, 0.75, dynmapcallback);
		if(minorVal == '-1'){}
		else{
	        queryTask = new esri.arcgis.gmaps.QueryTask("http://"+ hostIP +"/arcgis/rest/services/test1/MapServer/2");
	        if(minorVal){
		        // create the query
		        var query = new esri.arcgis.gmaps.Query();
		        query.where = "MIN_OR = '" + minorVal + "'";
		        query.outFields = ["taksu.NAME", "MIN_OR"];
		
		        // execute the query
		        queryTask.execute(query, false, function(featureSet, error) { // callback
		          // display error message (if any)
		          if (error) {
		            alert("Error " + error.code + ": " + (error.message || (error.details && error.details.join(" ")) || "Unknown error" ));
		            return;
		          }
		
		          // add the feature set to the map
		          var features = featureSet.features, geometry, attributes;
		          for (var i = 0; i < features.length; i++) { // process each county in the feature set
		            geometry = features[i].geometry;
		            attributes = features[i].attributes;
		            for (var j = 0; j < geometry.length; j++) { // Feature.geometry is an array of GPolygon/GPolyline/GMarker
		              var geom = geometry[j];
		              GEvent.addListener(geom, "mouseover", GEvent.callbackArgs(geom, onMouseOverFunc, attributes));
		              GEvent.addListener(geom, "mouseout", onMouseOutFunc);
		              
		              gmap.addOverlay(geom);
		            }
		          }
		          // Note that we are not using the MapExtension class here to add the FeatureSet
		          // to the map as it supports only "click-to-open-infowindow" workflow
		        });
	        }else{};
		}
      }

    function executeQueryinit() {
        var tinyIcon = new GIcon();
        tinyIcon.image = "/images/map/gong.png";
        tinyIcon.shadow = null;
        tinyIcon.iconSize = new GSize(10, 10);
        tinyIcon.iconAnchor = new GPoint(0, 0);
        tinyIcon.infoWindowAnchor = new GPoint(0, 0);
        
	        queryTask = new esri.arcgis.gmaps.QueryTask("http://"+ hostIP +"/arcgis/rest/services/test1/MapServer/2");
		        // create the query
		        var query = new esri.arcgis.gmaps.Query();
		        query.where = "1=1";
			    query.outFields = ["NAME", "MIN_OR", "MIN_VL", "MIN_TIME"];
		        // execute the query
		        queryTask.execute(query, false, function(featureSet, error) { // callback
		          // display error message (if any)
		          if (error) {
		            alert("Error " + error.code + ": " + (error.message || (error.details && error.details.join(" ")) || "Unknown error" ));
		            return;
		          }
		          // add the feature set to the map
		          var features = featureSet.features, geometry, attributes;
		          for (var i = 0; i < features.length; i++) { // process each county in the feature set
		            geometry = features[i].geometry;
		            attributes = features[i].attributes;
		            for (var j = 0; j < geometry.length; j++) { // Feature.geometry is an array of GPolygon/GPolyline/GMarker
		              var geom = geometry[j];
					  var initSym = new GMarker(new GLatLng(geom.getLatLng().y, geom.getLatLng().x), {icon:tinyIcon});
					  GEvent.addListener(initSym, "mouseover", GEvent.callbackArgs(geom, onMouseOverFunc, attributes));
		              GEvent.addListener(initSym, "mouseout", onMouseOutFunc);  
		              gmap.addOverlay(initSym);
		            }
		          }
		        });

		        queryTask = new esri.arcgis.gmaps.QueryTask("http://"+ hostIP +"/arcgis/rest/services/test1/MapServer/3");
		        // create the query
		        var query = new esri.arcgis.gmaps.Query();
		        query.where = "1=1";
			    query.outFields = ["NAME", "MIN_OR", "MIN_VL", "MIN_TIME"];
		        // execute the query
		        queryTask.execute(query, false, function(featureSet, error) { // callback
		          // display error message (if any)
		          if (error) {
		            alert("Error " + error.code + ": " + (error.message || (error.details && error.details.join(" ")) || "Unknown error" ));
		            return;
		          }
		          // add the feature set to the map
		          var features = featureSet.features, geometry, attributes;
		          for (var i = 0; i < features.length; i++) { // process each county in the feature set
		            geometry = features[i].geometry;
		            attributes = features[i].attributes;
		            for (var j = 0; j < geometry.length; j++) { // Feature.geometry is an array of GPolygon/GPolyline/GMarker
		              var geom = geometry[j];
					  var initSym = new GMarker(new GLatLng(geom.getLatLng().y, geom.getLatLng().x), {icon:tinyIcon});
					  GEvent.addListener(initSym, "mouseover", GEvent.callbackArgs(geom, onMouseOverFunc, attributes));
		              GEvent.addListener(initSym, "mouseout", onMouseOutFunc);  
		              gmap.addOverlay(initSym);
		            }
		          }
		        });

		        queryTask = new esri.arcgis.gmaps.QueryTask("http://"+ hostIP +"/arcgis/rest/services/test1/MapServer/1");
		        // create the query
		        var query = new esri.arcgis.gmaps.Query();
		        query.where = "1=1";
			    query.outFields = ["BASIN","STATION", "MIN_OR", "MIN_VL", "MIN_TIME"];
		        // execute the query
		        queryTask.execute(query, false, function(featureSet, error) { // callback
		          // display error message (if any)
		          if (error) {
		            alert("Error " + error.code + ": " + (error.message || (error.details && error.details.join(" ")) || "Unknown error" ));
		            return;
		          }
		          // add the feature set to the map
		          var features = featureSet.features, geometry, attributes;
		          for (var i = 0; i < features.length; i++) { // process each county in the feature set
		            geometry = features[i].geometry;
		            attributes = features[i].attributes;
		            for (var j = 0; j < geometry.length; j++) { // Feature.geometry is an array of GPolygon/GPolyline/GMarker
		              var geom = geometry[j];
					  var initSym = new GMarker(new GLatLng(geom.getLatLng().y, geom.getLatLng().x), {icon:tinyIcon});
					  GEvent.addListener(initSym, "mouseover", GEvent.callbackArgs(geom, onMofa, attributes));
		              GEvent.addListener(initSym, "mouseout", onMouseOutFunc);  
		              gmap.addOverlay(initSym);
		            }
		          }
		        });
      }
    
      // show info window for the county when the user moves the mouse over it
      function onMouseOverFunc(attributes) {
        var point = this;
        var stateVal;

        if (attributes["MIN_OR"] == '0'){stateVal = "정상";}
        else if (attributes["MIN_OR"] == '1'){stateVal = "관심";}
        else if (attributes["MIN_OR"] == '2'){stateVal = "주의";}
        else if (attributes["MIN_OR"] == '3'){stateVal = "경계";}
        else if (attributes["MIN_OR"] == '4'){stateVal = "심각";}
        else {stateVal = "미수집";}
				var html = "<table class='GISTable' border='1' width=\"170px\"><tr><td><b>명칭:</b> </td><td>" + attributes["NAME"] + "</td></tr><tr><td><b>상태값:</b> </td><td>" + stateVal+"</td></tr><tr><td><b>측정값:</b> </td><td>"+attributes["MIN_VL"]+"</td></tr></table>";
        gmap.openInfoWindowHtml(point.getPoint(), html);//nw
      }

   // show info window for the county when the user moves the mouse over it
      function onMofa(attributes) {
        var point = this;
        var stateVal;

        if (attributes["MIN_OR"] == '0'){stateVal = "정상";}
        else if (attributes["MIN_OR"] == '1'){stateVal = "관심";}
        else if (attributes["MIN_OR"] == '2'){stateVal = "주의";}
        else if (attributes["MIN_OR"] == '3'){stateVal = "경계";}
        else if (attributes["MIN_OR"] == '4'){stateVal = "심각";}
        else {stateVal = "미수집";}
				var html = "<table class='GISTable' border='1' width=\"170px\"><tr><td><b>명칭:</b> </td><td>" + attributes["BASIN"] + "_" + attributes["STATION"] + "</td></tr><tr><td><b>상태값:</b> </td><td>" + stateVal+"</td></tr><tr><td><b>측정값:</b> </td><td>"+attributes["MIN_VL"]+"</td></tr></table>";
        gmap.openInfoWindowHtml(point.getPoint(), html);//nw
      }
      
      // close info window when the user moves the mouse out of a county
      function onMouseOutFunc() {
        var point = this;
        gmap.closeInfoWindow();
      }

      function identify(overlay, latLng) {
          if (overlay) return;
          //clearResults();

          // set the identify parameters
          var identifyParameters = new esri.arcgis.gmaps.IdentifyParameters();
          identifyParameters.geometry = latLng; // location where the user clicked on the map
          identifyParameters.tolerance = 3;
          identifyParameters.layerIds = [ 1, 2, 3, 9, 10 ];
          identifyParameters.layerOption = "all";
          identifyParameters.bounds = gmap.getBounds();
          var mapSize = gmap.getSize();
          identifyParameters.width = mapSize.width;
          identifyParameters.height = mapSize.height;

          // execute the identify operation
          identifyTask.execute(identifyParameters, function(response, error) { // function to be called when the result is available
            // display error message (if any) and return
            if (hasErrorOccurred(error)) return;

            // note that the location where the user clicked on the map (latLng) is visible in this function through closure
            addResultToMap(response, latLng);
          });
        }
      function addResultToMap(response, point) {
          // aggregate the result per map service layer
          var idResults = response.identifyResults;
          if (idResults.length > 0 ){
	          var selectLayerID = idResults[0].layerId;
	          if (selectLayerID == '1'){
	        	  layers = { "1": []};
	          }else if (selectLayerID == '2'){
	        	  layers = { "2": []};
	          }else if (selectLayerID == '3'){
	        	  layers = { "3": []};
	          }else if (selectLayerID == '9'){
	        	  layers = { "9": []};
	          }else if (selectLayerID == '10'){
	        	  layers = { "10": []};
	          }else{};

	          //for (var i = 0; i < idResults.length; i++) {
	            var result = idResults[0];
	            layers[result.layerId].push(result);
	          //}

	          // create and show the info-window with tabs, one for each map service layer
	          var tabs = [];
	          for (var layerId in layers) {
	            var results = layers[layerId];
	            var count = results.length;
	            var label = "", content = "";
	            switch(layerId) {
	            case "1":
	                label = "수질측정망";
	                content = "결과항목 : <b>" + count + "</b>";
	                if (count == 0) break;
	                content += "<table class='GISTable' border='1' width=\"15px\"><colgroup><col width=\"50px\" /><col width=\"80px\" /><col width=\"50px\"/></colgroup><th scope=\"col\">수질측정망명</th><th scope=\"col\">최종수집시간</th><th scope=\"col\">측정값</th>";
	                for (var j = 0; j < count; j++) {
	                  var attributes = results[j].feature.attributes;
	                  var selMinVl, selMinTime;
	                  content += "<tr>";
	                  content += "<td><a href='#' onclick='showFeature(" + layerId + "," + j + ")'>" + attributes["BASIN"]  + "_" + attributes["STATION"]  +"</a></td>";
	                  if(attributes["MIN_TIME"] == "" || attributes["MIN_TIME"] == null ||attributes["MIN_TIME"] == "Null"){selMinTime="미수집";}else{selMinTime = attributes["MIN_TIME"].substring(0,4)+"."+attributes["MIN_TIME"].substring(4,6)+"."+attributes["MIN_TIME"].substring(6,8)+"."+attributes["MIN_TIME"].substring(8,10)+":"+attributes["MIN_TIME"].substring(10,12);};
	                  content += "<td>" + selMinTime  + "</td>";
	                  if(attributes["MIN_VL"] == "" || attributes["MIN_VL"] == null ||attributes["MIN_VL"] == "Null"){selMinVl="미수집";}else{selMinVl = attributes["MIN_VL"];};
	                  content += "<td>" + selMinVl + "</td>";
	                  content += "</tr>";
	                }
	                content += "</table>";
	                break;
	              case "2":
	                label = "탁수";
	                content = "결과항목 : <b>" + count + "</b>";
	                if (count == 0) break;
	                content += "<table class='GISTable' border='1'  width=\"150px\"><colgroup><col width=\"50px\" /><col width=\"100px\" /><col width=\"50px\"/></colgroup><th scope=\"col\">탁수명</th><th scope=\"col\">최종수집시간</th><th scope=\"col\">측정값</th>";
	                for (var j = 0; j < count; j++) {
	                  var attributes = results[j].feature.attributes;
	                  var selMinVl, selMinTime;
	                  content += "<tr>";
	                  content += "<td><a href='#' onclick='showFeature(" + layerId + "," + j + ")'>" + attributes["NAME"]  + "</a></td>";
	                  if(attributes["MIN_TIME"] == "" || attributes["MIN_TIME"] == null ||attributes["MIN_TIME"] == "Null"){selMinTime="미수집";}else{selMinTime = attributes["MIN_TIME"].substring(0,4)+"."+attributes["MIN_TIME"].substring(4,6)+"."+attributes["MIN_TIME"].substring(6,8)+"."+attributes["MIN_TIME"].substring(8,10)+":"+attributes["MIN_TIME"].substring(10,12);};
	                  content += "<td>" + selMinTime  + "</td>";
	                  if(attributes["MIN_VL"] == "" || attributes["MIN_VL"] == null ||attributes["MIN_VL"] == "Null"){selMinVl="미수집";}else{selMinVl = attributes["MIN_VL"];};
	                  content += "<td>" + selMinVl + "</td>";
	                  content += "</tr>";
	                }
	                content += "</table>";
	                break;
	              case "3":
	                label = "이동형측정기기";
	                content = "결과항목 : <b>" + count + "</b>";
	                if (count == 0) break;
	                content += "<table class='GISTable'  border='1'  width=\"150px\"><colgroup><col width=\"70px\" /><col width=\"80px\" /><col width=\"50px\"/></colgroup><th scope=\"col\">이동형측정기기명</th><th scope=\"col\">최종수집시간</th><th scope=\"col\">측정값</th>";
	                for (var j = 0; j < count; j++) {
	                  var attributes = results[j].feature.attributes;
	                  var selMinVl, selMinTime;
	                  content += "<tr>";
	                  content += "<td><a href='#' onclick='showFeature(" + layerId + "," + j + ")'>" + attributes["NAME"]  + "</td>";
	                  if(attributes["MIN_TIME"] == "" || attributes["MIN_TIME"] == null ||attributes["MIN_TIME"] == "Null"){selMinTime="미수집";}else{selMinTime = attributes["MIN_TIME"].substring(0,4)+"."+attributes["MIN_TIME"].substring(4,6)+"."+attributes["MIN_TIME"].substring(6,8)+"."+attributes["MIN_TIME"].substring(8,10)+":"+attributes["MIN_TIME"].substring(10,12);};
	                  content += "<td>" + selMinTime  + "</td>";
	                  if(attributes["MIN_VL"] == "" || attributes["MIN_VL"] == null ||attributes["MIN_VL"] == "Null"){selMinVl="미수집";}else{selMinVl = attributes["MIN_VL"];};
	                  content += "<td>" + selMinVl + "</td>";
	                  content += "</tr>";
	                }
	                content += "</table>";
	                break;
	              case "9":
	                label = "산업단지업체";
	                content = "결과항목 : <b>" + count + "</b>";
	                if (count == 0) break;
	                content += "<table class='GISTable'  border='1'  width=\"140px\"><colgroup><col width=\"80px\" /><col width=\"60px\" /></colgroup><th scope=\"col\">업체명</th><th scope=\"col\">설립년도</th>";
	                for (var j = 0; j < count; j++) {
	                  var attributes = results[j].feature.attributes;
	                  content += "<tr>";
	                  content += "<td><a href='#' onclick='showFeature(" + layerId + "," + j + ")'>" + attributes["TI_CO_NM"]  + "</td>";
	                  content += "<td>" + attributes["UP_YMD"]  + "</td>";
	                  content += "</tr>";
	                }
	                content += "</table>";
	                break;
	              case "10":
	                  label = "화학단지업체";
	                  content = "결과항목 : <b>" + count + "</b>";
	                  if (count == 0) break;
	                  content += "<table class='GISTable'  border='1'><colgroup><col width=\"80px\" /><col width=\"60px\" /></colgroup><th scope=\"col\">업체명</th><th scope=\"col\">설립년도</th>";
	                  for (var j = 0; j < count; j++) {
	                    var attributes = results[j].feature.attributes;
	                    content += "<tr>";
	                    content += "<td><a href='#' onclick='showFeature(" + layerId + "," + j + ")'>" + attributes["CO_NM"]  + "</td>";
	                    content += "<td>" + attributes["UP_YMD"]  + "</td>";
	                    content += "</tr>";
	                  }
	                  content += "</table>";
	                  break;
	            }
	            tabs.push(new GInfoWindowTab(label, content));
	          }
	          gmap.openInfoWindowTabsHtml(point, tabs);
          }else{};
      }
      
      function showFeature(layerId, index) {
          mapExtension.removeFromMap(overlays);
          var idResult = layers[layerId][index];
          overlays = mapExtension.addToMap(idResult, {polygonOptions: { clickable: false}});
        }

        function addMapServiceLayer(layer, error) {
          // display error message (if any) and return
          if (hasErrorOccurred(error)) return;

          // add layer to the map
          mapExtension.addToMap(layer);
        }
        
      function hasErrorOccurred(error) {
          if (error) {
            alert("Error " + error.code + ": " + (error.message || (error.details && error.details.join(" ")) || "Unknown error" ));
            return true;
          }
          return false;
        }
      
	function mov2(lat, lng){
		gmap.setZoom(14);//setZoom must be 1st.
		gmap.panTo(new GLatLng(lat, lng));
	}

	function mov2level(str){
		if(str){
			var fstr = str.split(",");
			var lat = fstr[0];
			var lng = fstr[1];
			var lvl = fstr[2];
			gmap.setZoom(Number(lvl));//setZoom must be 1st.
			gmap.panTo(new GLatLng(lat, lng));
		}
	}

	function mov2levelHtml(str, html){
		if(str){
			var fstr = str.split(",");
			var lat = fstr[0];
			var lng = fstr[1];
			var lvl = fstr[2];
			gmap.setZoom(Number(lvl));//setZoom must be 1st.
			gmap.panTo(new GLatLng(lat, lng));
		    
			var marker = new GMarker(new GLatLng(lat, lng), {draggable: true});
          	gmap.addOverlay(marker);
          	GEvent.addListener(marker, "dragend", function() {
            	marker.openInfoWindowHtml(html);
        	});
        	GEvent.addListener(marker, "click", function() {
        		marker.openInfoWindowHtml(html);
       		});
      		GEvent.trigger(marker, "click");
		}
	}

	function mov2levelHtmlIcon(str, html, iconUrl){
		if(str){
			var fstr = str.split(",");
			var lat = fstr[0];
			var lng = fstr[1];
			var lvl = fstr[2];
			gmap.setZoom(Number(lvl));//setZoom must be 1st.
			gmap.panTo(new GLatLng(lat, lng));

			var iconMole = new GIcon(); 
		    iconMole.image = iconUrl;
		    iconMole.iconAnchor = new GPoint(16,11);
		    iconMole.infoWindowAnchor = new GPoint(5, 1);

		    var marker = new GMarker(new GLatLng(lat, lng), {draggable: false, icon: iconMole});
          	gmap.addOverlay(marker);
          	GEvent.addListener(marker, "dragend", function() {
            	marker.openInfoWindowHtml(html);
        	});
        	GEvent.addListener(marker, "click", function() {
        		marker.openInfoWindowHtml(html);
       		});
      		GEvent.trigger(marker, "click");
		}
	}
	
	function mov2address(address){
		if (geocoder) {
	        geocoder.getLatLng(
	          address,
	          function(point) {
	            if (!point) {
	              	alert(address + " not found");
	            } else {
	            	gmap.setCenter(point, 15);
	            }
	          }
	        );
	   }
	}

	function mov2addressHtml(address, html){
		if (geocoder) {
	        geocoder.getLatLng(
	          address,
	          function(point) {
	            if (!point) {
	              	alert(address + " not found");
	            } else {
	            	gmap.setCenter(point, 15);
	              	var marker = new GMarker(point, {draggable: false});
	              	gmap.addOverlay(marker);
	              	GEvent.addListener(marker, "dragend", function() {
	                	marker.openInfoWindowHtml(html);
	            	});
	            	GEvent.addListener(marker, "click", function() {
	            		marker.openInfoWindowHtml(html);
	           		});
		      		GEvent.trigger(marker, "click");
	            }
	          }
	        );
	   }
	}

	function mov2addressHtmlIcon(address, html, iconUrl){
		if (geocoder) {
	        geocoder.getLatLng(
	          address,
	          function(point) {
	            if (!point) {
	              	alert(address + " not found");
	            } else {
	            	gmap.setCenter(point, 15);
	            	var iconMole = new GIcon(); 
	    		    iconMole.image = iconUrl;
	    		    iconMole.iconAnchor = new GPoint(16,11);
	    		    iconMole.infoWindowAnchor = new GPoint(5, 1);
	              	var marker = new GMarker(point, {draggable: false, icon:iconMole});
	              	gmap.addOverlay(marker);
	              	GEvent.addListener(marker, "dragend", function() {
	                	marker.openInfoWindowHtml(html);
	            	});
	            	GEvent.addListener(marker, "click", function() {
	            		marker.openInfoWindowHtml(html);
	           		});
		      		GEvent.trigger(marker, "click");
	            }
	          }
	        );
	   }
	}

	function getLatLngFromMap(onOff){
		var xIcon = new GIcon();
		xIcon.image = "images/map/blue-circle.png";
		xIcon.shadow = "images/map/blue-circle-shadow.png";
		xIcon.iconSize = new GSize(34, 34);
		xIcon.shadowSize = new GSize(34, 34);
		xIcon.iconAnchor = new GPoint(15, 15);
		xIcon.infoWindowAnchor = new GPoint(15, 5);
		
		this.counter = 0;
		this.map = gmap;
		var myEventListener = GEvent.bind(this.map, "click", this, function(marker,point) {
			if (marker) {
				this.map.removeOverlay(marker);
			}else{
				if (this.counter == 0) {
					if (point) {
						var marker = new GMarker(point, xIcon);
						this.map.setCenter(point, 14);
						this.map.addOverlay(marker);
						this.counter++;
						document.getElementById("lngx").value = point.x;
						document.getElementById("laty").value = point.y;
						geocoder.getLocations(point, showAddress);
						return point.x, point.y;
					} else {
						this.removeOverlay(marker)
					}
				} else {
					GEvent.removeListener(myEventListener);
				}
			}
		}); 
		
	}

	function getAreaMoveDisable(swY, swX, neY, neX){//need repair
		GEvent.addListener(gmap, "move", function() {
			checkBounds();
		});
		var allowedBounds = new GLatLngBounds(new GLatLng(swY,swX), new GLatLng(neY,neX));
		function checkBounds() {
	        if (allowedBounds.contains(gmap.getCenter())) {
	          return;
	        }
	        var C = gmap.getCenter();
	        var X = C.lng();
	        var Y = C.lat();
	 
	        var AmaxX = allowedBounds.getNorthEast().lng();
	        var AmaxY = allowedBounds.getNorthEast().lat();
	        var AminX = allowedBounds.getSouthWest().lng();
	        var AminY = allowedBounds.getSouthWest().lat();
	 
	        if (X < AminX) {X = AminX;}
	        if (X > AmaxX) {X = AmaxX;}
	        if (Y < AminY) {Y = AminY;}
	        if (Y > AmaxY) {Y = AmaxY;}
	        gmap.setCenter(new GLatLng(Y,X));
	      }
	    }

	function getAreaLevelDisable(minLevel, maxLevel){//need repair
		var mt = gmap.getMapTypes();
		for (var i=0; i<mt.length; i++) {
	        mt[i].getMinimumResolution = function() {return minLevel;}
	        mt[i].getMaximumResolution = function() {return maxLevel;}
      	}
		gmap.addControl(new GLargeMapControl());
	}

	function getLayerDisable(layerNum){
			dynamicMap.setVisibleLayers(showLayerArray);
			dynamicMap.refresh();
	}

	function legendDetailCont(){
		var valDis=document.getElementById("legendDetail");
		if(valDis.style.display == "inline"){
			valDis.style.display = "none";
		}else if(valDis.style.display == "none"){
			valDis.style.display = "inline";
		};
	}

	function layerControl(){
			if(document.getElementById("selAuto").checked && document.getElementById("selTaksu").checked && document.getElementById("selIpusn").checked){
				showLayerArray = [1,2,3,4,8,11];
			}else if(document.getElementById("selAuto").checked == false && document.getElementById("selTaksu").checked && document.getElementById("selIpusn").checked ){
				showLayerArray = [2,3,4,8,11];
			}else if(document.getElementById("selAuto").checked && document.getElementById("selTaksu").checked == false && document.getElementById("selIpusn").checked ){
				showLayerArray = [1,3,4,8,11];
			}else if(document.getElementById("selAuto").checked && document.getElementById("selTaksu").checked && document.getElementById("selIpusn").checked == false ){
				showLayerArray = [1,2,4,8,11];
			}else if(document.getElementById("selAuto").checked == false && document.getElementById("selTaksu").checked == false && document.getElementById("selIpusn").checked ){
				showLayerArray = [3,4,8,11];
			}else if(document.getElementById("selAuto").checked == false && document.getElementById("selTaksu").checked && document.getElementById("selIpusn").checked == false ){
				showLayerArray = [2,4,8,11];
			}else if(document.getElementById("selAuto").checked && document.getElementById("selTaksu").checked == false && document.getElementById("selIpusn").checked == false ){
				showLayerArray = [1,4,8,11];
			}else if(document.getElementById("selAuto").checked && document.getElementById("selTaksu").checked == false && document.getElementById("selIpusn").checked == false ){
				showLayerArray = [1,4,8,11];
			}else if(document.getElementById("selAuto").checked == false && document.getElementById("selTaksu").checked == false && document.getElementById("selIpusn").checked == false ){
				showLayerArray = [4,8,11];
			}else{};
			dynamicMap.setVisibleLayers(showLayerArray);
			dynamicMap.refresh();
	}

	function addTransIcon(lat, lng, iconUrl){
			var iconMole = new GIcon(); 
		    iconMole.image = iconUrl;
		    var marker = new GMarker(new GLatLng(lat, lng), {draggable: false, icon: iconMole});
          	gmap.addOverlay(marker);
	}
	
	function layerControlByVal(strType){
		if(strType == "A"){
			showLayerArray = [1,4,8,11];
		}else if(strType == "T"){
			showLayerArray = [2,4,8,11];
		}else if(strType == "U"){
			showLayerArray = [3,4,8,11];
		}else{showLayerArray = [1,2,3,4,8,11];};
		dynamicMap.setVisibleLayers(showLayerArray);
		dynamicMap.refresh();
	}
	
	function showAndStoreAddress(response){
		if (response && response.Status.code == 200 && store_geocode) {
			store_geocode = false;
			if (debugging){
				document.getElementById("debugging").innerHTML = "In showAndStoreAddress."+"<br />"+document.getElementById("debugging").innerHTML;
			}
			var xmlhttp = create_xmlhttp();
			var d = new Date();
			if (document.getElementById("working")) {
				document.getElementById("working").src = "http://"+host+"/images/waiting-16.gif";
			}
			serverPage = "http://"+host+"/processors/store-reverse-geocode.php?lat_in="+lat+"&lon_in="+lon+"&lat_out="+response.Placemark[0].Point.coordinates[1]+"&lon_out="+response.Placemark[0].Point.coordinates[0]+"&accuracy="+response.Placemark[0].AddressDetails.Accuracy+"&sescod="+document.load_location.sescod.value+"&status="+response.Status.code+"&address="+escape(response.Placemark[0].address)+"&time="+d.getTime();
			if (debugging){
				document.getElementById("debugging").innerHTML = "serverPage: "+serverPage+"<br />"+document.getElementById("debugging").innerHTML;
				serverPage = serverPage+"&debugging=1"
			}
			xmlhttp.open("GET", serverPage, true); 
			xmlhttp.onreadystatechange = function() {
				if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
					if (xmlhttp.responseText.length > 0){
						if (debugging){
							document.getElementById("debugging").innerHTML = xmlhttp.responseText+"<br />"+document.getElementById("debugging").innerHTML;
						}
						eval(xmlhttp.responseText);
					} else {
					}
					if (debugging){
						document.getElementById("debugging").innerHTML = "xmlhttp.responseText: "+xmlhttp.responseText+"<br />"+document.getElementById("debugging").innerHTML;
					}
				} else if (xmlhttp.readyState == 4 && xmlhttp.status != 200){
					if (debugging){
						document.getElementById("debugging").innerHTML = "xmlhttp.status: "+xmlhttp.status+"<br />"+document.getElementById("debugging").innerHTML;
					}
				}
				if (document.getElementById("working")) {
					document.getElementById("working").src = "http://"+host+"/images/pix.gif";
					document.getElementById("working").width = 16;
					document.getElementById("working").height = 16;
				}
			}
	
			xmlhttp.send(null);
		}
		showAddress(response);
	}

function showAddress(response) {
	  if (!response || response.Status.code != 200) {
		} else {
		place = response.Placemark[0];
			document.getElementById("addressPoint").value = place.address;	
			return place.address;	
	  }
	}
function mov2multiLanlng(latA, lngA, latB, lngB){
		gmap.setZoom(10);//setZoom must be 1st.
		gmap.panTo(new GLatLng((latA+latB)/2, (lngA+lngB)/2));
	}
  </script>
<!--#######################################################################-->
<!--##끝:구글과 esri에서 관련 js파일을 가져오기위해 반드시 필요한 스크립트입니다.##-->
<!--#######################################################################-->
</head>

<!--#######################################################################-->
<!--##body의 onload="initialize();" onunload="GUnload();"는 필수사항입니다.##-->
<!--#######################################################################-->
	<body onload="initialize();" onunload="GUnload();">

<!--###########################################################################-->
<!--### 맵상단의 수계선택 예입니다. 그대로 적용하셔도 되고 ctrl+c,v를 하셔도 됩니다.###-->
<!--### 임시시스템을 이용하기 위한 예이며 차후 플래쉬맵이 적용될경우 기본기능으로         ###-->
<!--### 포함될 예정입니다.                                                   ###-->
<!--###########################################################################-->
	<div class="roundBox roundBox1">
		<div class="top_l"><div class="top_r"><div class="top"></div></div></div>
		<div class="con">
			<div class="con_r">
				<ul> 
					<li class="first">
						수계선택 :
					</li>
					<li>
						<input type="radio" name="selRiver" value="36.635412,128.287354, 7" onclick="javascript:mov2level('36.635412,128.287354, 7');"/>전체
					</li>
					<li>
						<input type="radio" name="selRiver" value="37.5258497, 127.3081805, 9" onclick="javascript:mov2level('37.5258497, 127.3081805, 9');"/>한강
					</li>
					<li>
						<input type="radio" name="selRiver" value="35.8759486, 128.5950195, 8" onclick="javascript:mov2level('35.8759486, 128.5950195, 8');"/>낙동강
					</li>
					<li>
						<input type="radio" name="selRiver" value="36.1888999, 127.0926905, 9" onclick="javascript:mov2level('36.1888999, 127.0926905, 9');"/>금강
					</li>
					<li>
						<input type="radio" name="selRiver" value="35.0817827, 126.8315419, 10" onclick="javascript:mov2level('35.0817827, 126.8315419, 10');"/>영산강
					</li>
				</ul>
			</div>
		</div>
		<div class="bot_l"><div class="bot_r"><div class="bot"></div></div></div>
	</div>
<!--###맵상단의 수계선택 예입니다. 그대로 적용하셔도 되고 ctrl+c,v를 하셔도 됩니다.###-->




<!--#######################################################################-->
<!--## 페이지내에서 실제 맵div를 선언하는 파트로 id의 변경이 불가합니다.         ##-->
<!--#######################################################################-->	
		<div id="gmap" style="width: 100%; height: 575px;"></div><!--div : gmap sytle.height must need to be setted-->
		<!-- <div id="gmap" style="width: 100%; height: 472px;"></div>-->
		
<!--#######################################################################-->
<!--## 범례DIV : 변경 금지                                                                                                                                  ##-->
<!--#######################################################################-->
<div id="legend"><input type="button" value="범례" style="width:80px;height:17px;border:0;" onClick="javascript:legendDetailCont();"></input></div>
<div id="legendDetail" style="display:none"><font size="2"><input type="checkbox" id="selAuto" onClick="javascript:layerControl();" checked>자동수질측정망</input> <input type="checkbox" id="selIpusn" onClick="javascript:layerControl();" checked>이동형측정기기</input>  <input type="checkbox" id="selTaksu" onClick="javascript:layerControl();" checked>탁수모니터링</input><br/><img src="<c:url value='/images/map/legend.png'/>"/></font></div>

<!--############              맵 컨트롤 예제입니다.        ###################-->	
<!-- 	-->	<div>좌표이동 : <input type="button" value="좌표" onClick="javascript:mov2(37.673837, 127.38515);"/>
					   <input type="button" value="좌표 + 레벨" onClick="javascript:mov2level('35.0817827, 126.8315419, 14');"/>
					   <input type="button" value="좌표 + 레벨 + html" onClick="javascript:mov2levelHtml('35.0817827, 126.8315419, 14', '<b>충남(탁수)</b><br>126.7mg');"/>
					   <input type="button" value="좌표 + 레벨 + html + icon" onClick="javascript:mov2levelHtmlIcon('35.0817827, 126.8315419, 14', '<b>충남(탁수)</b><br>126.7mg', 'map/map_observe.png');"/>
					   <input type="button" value="좌표이동(multi)" onClick="javascript:mov2multiLanlng(36.2319418, 127.6014097,36.1550002, 127.5816337);"/>
		</div>
		<div>주소이동 : <input type="text" value="충남 청양군 청양읍 학당리 260-4" id="mov2addressText" name="mov2addressText"><input type="button" value="주소이동" onClick="javascript:mov2address(document.getElementById('mov2addressText').value);"/>
					   <input type="button" value="주소 + html" onClick="javascript:mov2addressHtml('충남 청양군 청양읍 학당리 260-4','<b>충남(탁수)</b><br>126.7mg');"/>
					   <input type="button" value="주소 + html + icon" onClick="javascript:mov2addressHtmlIcon('충남 청양군 청양읍 학당리 260-4','<b>충남(탁수)</b><br>126.7mg', 'map/map_observe.png');"/>
		</div>
		<div>좌표얻기 : <input type="button" value="좌표얻기모드" onClick="javascript:getLatLngFromMap('on');"/>  y=<input id="laty" type="text" value="" />, x=<input id="lngx" type="text" value="" />, 주소=<input id="addressPoint" type="text" value="" /></div>
		<div>제한 : <input type="button" value="영역제한" onClick="javascript:getAreaMoveDisable(32.9902355,124.453125,38.891032,130.979003);"/>
				   <input type="button" value="레벨제한" onClick="javascript:getAreaLevelDisable(7,15);"/>
				   <input type="button" value="TOC제어" onClick="javascript:layerControlByVal('T');"/>
		</div> 
	</body>
</html>
<!--must be inserted up for including map page-->