<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="mockDAO">

	<typeAlias alias="mockVO" type="daewooInfo.mock.bean.MockVO"/>
	<typeAlias alias="analysisVO" type="daewooInfo.mock.bean.AnalysisVO"/>
	<typeAlias alias="errorCodeVO" type="daewooInfo.mock.bean.ErrorCodeVO"/>
	
	<statement id="getPointList" parameterClass="mockVO" resultClass="mockVO">
	<![CDATA[
		SELECT A.SECTION_ID AS sectionId,
				A.RIVER_ID AS riverID,
				DECODE (RIVER_ID,
						'01', '한강',
						'02', '낙동강',
						'03', '금강',
						'04', '영산강')
				  AS riverName,
				A.S_SECTION_NAME || ' - ' || A.E_SECTION_NAME AS sectionName,
				B.POINT_ID as pointId,
				B.POINT_NAME as pointName
		  FROM t_section a, t_point b
		 WHERE a.section_id = b.section_id
		 AND A.RIVER_ID = #riverId#
		 ORDER BY A.S_ORDER, B.P_ORDER
	]]>					
	</statement>		
	
	<statement id="getFlow" parameterClass="mockVO" resultClass="mockVO">
	<![CDATA[
		SELECT A.FLOW_ID AS flowId,
				A.SECTION_ID AS sectionId,
				B.RIVER_ID AS riverId,
				DECODE (B.RIVER_ID,
						'01', '한강',
						'02', '낙동강',
						'03', '금강',
						'04', '영산강')
				  AS riverName,
				B.S_SECTION_NAME || ' - ' || B.E_SECTION_NAME  AS sectionName,
				A.FLOW AS flow,
				#flow# AS newFlow,
				A.END_TIME AS endTime,
				ROUND(((#flow#/ FLOW) * END_TIME), 1) AS newEndTime
		  FROM (  SELECT FLOW_ID,
						 SECTION_ID,
						 FLOW,
						 END_TIME,
						 DECODE (SIGN (FLOW - #flow#),
								 -1, ( (FLOW - #flow#) * -1),
								 1, (FLOW - #flow#),
								 0)
							AS NFLOW
					FROM T_FLOW
					WHERE SECTION_ID = #sectionId#
				ORDER BY NFLOW) A, T_SECTION B
		 WHERE ROWNUM = 1
		 AND A.SECTION_ID = B.SECTION_ID
	]]>
	</statement>
	
	<statement id="getPointFlow" parameterClass="mockVO" resultClass="mockVO">
	<![CDATA[
		SELECT A.POINT_ID as pointId,
				A.SECTION_ID AS sectionId,
				A.POINT_NAME AS pointName,
				ROUND((#newEndTime# /  (B.WAY / A.WAY)),1) AS newEndTime
		  FROM T_POINT A, T_SECTION B
		 WHERE A.SECTION_ID = B.SECTION_ID
		 AND	A.POINT_ID = #pointId#
	]]>
	</statement>
	
	<statement id="getMockTestList" parameterClass="mockVO" resultClass="mockVO">
	<![CDATA[
		SELECT *
		FROM (
				SELECT ROWNUM RNUM, T.*
				FROM (
						SELECT	MOCK_ID as mockId,
								TO_CHAR(TO_DATE(REG_DATE, 'yyyymmddhh24miss'), 'yyyy-mm-dd') as regDate,
								MOCK_TITLE AS mockTitle,
								DECODE(RIVER_ID, '01', '한강', '02', '낙동강', '03', '금강', '04', '영산강') as riverName,
								(SELECT MEMBER_NAME FROM T_MEMBER WHERE MEMBER_ID = A.MEMBER_ID) as memberId
						FROM T_MOCK_TEST A
						WHERE 1 = 1
	]]>
	<isNotEmpty property="riverId">
						AND RIVER_ID = #riverId#
	</isNotEmpty>	
	<isNotEmpty property="mockTitle">
						AND MOCK_TITLE LIKE #mockTitle# || '%'
	</isNotEmpty>
	<![CDATA[
						ORDER BY REG_DATE DESC ) T )
		WHERE  RNUM  > #firstIndex#
		AND  RNUM <= #firstIndex# + #recordCountPerPage#
	]]>
	</statement>		

	<statement id="getMockTest" parameterClass="mockVO" resultClass="mockVO">
	<![CDATA[
		SELECT	MOCK_ID as mockId,
				TO_CHAR(TO_DATE(REG_DATE, 'yyyymmddhh24miss'), 'yyyy-mm-dd') as regDate,
				MOCK_TITLE AS mockTitle,
				DECODE(RIVER_ID, '01', '한강', '02', '낙동강', '03', '금강', '04', '영산강') as riverName,
				(SELECT MEMBER_NAME FROM T_MEMBER WHERE MEMBER_ID = A.MEMBER_ID) as memberId,
				MOCK_ETC AS mockEtc
		FROM T_MOCK_TEST A
		WHERE MOCK_ID = #mockId#
	]]>					
	</statement>		
	
	<statement id="getMockSection" parameterClass="mockVO" resultClass="mockVO">
	<![CDATA[
		SELECT	A.MOCK_SECTION_ORDER AS "order",
				 A.MOCK_ID AS mockId,
				 A.SECTION_ID AS sectionId,
				 DECODE(RIVER_ID, '01', '한강', '02', '낙동강', '03', '금강', '04', '영산강') AS riverName,
				 B.S_SECTION_NAME || ' - ' || B.E_SECTION_NAME AS sectionName,
				 A.FLOW as flow,
				 A.FLOW_TIME as flowTime
		FROM T_MOCK_SECTION A, T_SECTION B
		WHERE A.SECTION_ID = B.SECTION_ID
		AND A.MOCK_ID = #mockId#
		ORDER BY A.MOCK_SECTION_ORDER
	]]>					
	</statement>
	
	<statement id="getMockPoint" parameterClass="mockVO" resultClass="mockVO">
	<![CDATA[
		SELECT	A.MOCK_POINT_ORDER AS "order",
				 A.MOCK_ID AS mockId,
				 A.POINT_ID AS pointId,
				 B.POINT_NAME AS pointName,
				 A.FLOW_TIME AS flowTime
		FROM T_MOCK_POINT A, T_POINT B
		WHERE A.POINT_ID = B.POINT_ID
		AND A.MOCK_ID = #mockId#
		ORDER BY A.MOCK_POINT_ORDER
	]]>					
	</statement>		
	
	<select id="getMockTestPk" resultClass="java.lang.Integer">
		SELECT SEQ_MOCK.NEXTVAL FROM DUAL
	</select>
		
	<select id="getMockTestCnt" parameterClass="mockVO" resultClass="java.lang.Integer">
		SELECT COUNT(*) as CNT FROM T_MOCK_TEST
		WHERE 1 = 1
	<isNotEmpty property="riverId">
		AND RIVER_ID = #riverId#	
	</isNotEmpty>	
	<isNotEmpty property="mockTitle">
		AND MOCK_TITLE LIKE #mockTitle# || '%'
	</isNotEmpty>
	</select>
	
	<update id="saveMockTest" parameterClass="mockVO">
		INSERT INTO T_MOCK_TEST (MOCK_ID, MOCK_TITLE, MOCK_ETC, MEMBER_ID, RIVER_ID, REG_DATE)
		VALUES (#mockId#, #mockTitle#, #mockEtc#, #memberId#, #riverId#, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI'))
	</update>	
	
	<update id="saveMockSection" parameterClass="mockVO">
		INSERT INTO T_MOCK_SECTION (MOCK_ID, SECTION_ID, MOCK_SECTION_ORDER, FLOW, FLOW_TIME)
		VALUES (#mockId#, #sectionId#, #mockSectionOrder#, #flow#, #flowTime#)
	</update>
	
	<update id="saveMockPoint" parameterClass="mockVO">
		INSERT INTO T_MOCK_POINT (MOCK_ID, POINT_ID, MOCK_POINT_ORDER, FLOW_TIME)
		VALUES (#mockId#, #pointId#, #mockPointOrder#, #flowTime#)
	</update>	
	
	<update id="delMockTest" parameterClass="mockVO">
		DELETE FROM T_MOCK_Test
		WHERE MOCK_ID = #mockId#
	</update>		
	
	<update id="delMockSection" parameterClass="mockVO">
		DELETE FROM T_MOCK_SECTION
		WHERE MOCK_ID = #mockId#
	</update>	
	
	<update id="delMockPoint" parameterClass="mockVO">
		DELETE FROM T_MOCK_POINT
		WHERE MOCK_ID = #mockId#
	</update>
	
	
	<update id="updateDayLog" parameterClass="analysisVO">
		UPDATE
			T_WRK_DAYLOG
		SET
			WORKER1 = #worker1#,
			WORKER2 = #worker2#,
			WORKER3 = #worker3#,
			WORKER4 = #worker4#,
			DAYLOG_CONTENT1 = #content1#,
			DAYLOG_CONTENT2 = #content2#,
			DAYLOG_CONTENT3 = #content3#,
			WRK_NOTE = #wrkNote#,
			WRK_TIME1 = #wrkTime1#,
			WRK_TIME2 = #wrkTime2#,
			WRK_CONTENT = #wrkContent#,
			MOD_DATE = (SELECT SYSDATE FROM DUAL)
		 WHERE
			DAYLOG_NO = #daylogNo#
	</update>
	
	<insert id="insertDayLog" parameterClass="analysisVO">
		<selectKey resultClass="java.lang.String" keyProperty="log_num">
			SELECT NVL(MAX(DAYLOG_NO),0)+1 AS log_num  FROM T_WRK_DAYLOG
		</selectKey>
		INSERT INTO T_WRK_DAYLOG
		(
			DAYLOG_NO,
			DAYLOG_MAKE_DATE,
			WEATHER,
			WORKER1,
			WORKER2,
			WORKER3,
			WORKER4,
			DAYLOG_CONTENT1,
			DAYLOG_CONTENT2,
			DAYLOG_CONTENT3,
			WRK_NOTE,
			WRK_TIME1,
			WRK_TIME2,
			WRK_CONTENT,
			REG_DATE,
			REG_ID
		)
		VALUES
		(
			#log_num#,
			#daylogMakeTime#,
			#weather#,
			#worker1#,
			#worker2#,
			#worker3#,
			#worker4#,
			#content1#,
			#content2#,
			#content3#,
			#wrkNote#,
			#wrkTime1#,
			#wrkTime2#,
			#wrkContent#,
			(SELECT SYSDATE FROM DUAL),
			#regId#
		)
	</insert>
	
	<statement id="getDayLogList" parameterClass="analysisVO" resultClass="analysisVO">
			SELECT 
				* 
			 FROM
			( 
				 SELECT 
					 ROWNUM RNUM, T.*
					FROM
					(
						SELECT
							DAYLOG_NO daylogNo,
							TO_CHAR(REG_DATE, 'YYYY/MM/DD HH24:MI')  regDate,
							TO_CHAR(TO_DATE(DAYLOG_MAKE_DATE, 'YYYYMMDDHH24'), 'YYYY/MM/DD')  daylogMakeTime,
							WORKER1 worker1,
							WORKER2 worker2,
							WORKER3 worker3,
							WORKER4 worker4,
							DAYLOG_CONTENT1 content1,
							DAYLOG_CONTENT2 content2,
							DAYLOG_CONTENT3 content3,
							WRK_TIME1 wrkTime1,
							WRK_TIME2 wrkTime2,
							WRK_CONTENT wkrContent,
							WRK_NOTE wkrNote,
							WEATHER weather,
							REG_ID regId,
							TO_CHAR(MOD_DATE, 'YYYY/MM/DD HH24:MI') modDate,
							MOD_DATE isMod,
							COMP_FLAG compFlag
						FROM 
							T_WRK_DAYLOG
						WHERE
							DAYLOG_MAKE_DATE BETWEEN #frDate#||#frTime# AND #toDate#||#toTime#
						ORDER BY DAYLOG_NO DESC
					) T
			)
			WHERE
		<![CDATA[  
			RNUM  > #firstIndex#
			AND  RNUM <= #firstIndex# + #recordCountPerPage#
		]]>
	</statement>
	
	<statement id="getDayLogList_cnt" parameterClass="analysisVO" resultClass="java.lang.Integer">
		SELECT
			count(*)
		FROM 
			T_WRK_DAYLOG
		WHERE
			DAYLOG_MAKE_DATE BETWEEN #frDate#||#frTime# AND #toDate#||#toTime#
	</statement>
	
	<statement id="getDayLogDetail" parameterClass="analysisVO" resultClass="analysisVO">
		SELECT
			DAYLOG_NO daylogNo,
			TO_CHAR(REG_DATE, 'YYYY/MM/DD HH24:MI')  regDate,
			TO_CHAR(TO_DATE(DAYLOG_MAKE_DATE, 'YYYYMMDDHH24'), 'YYYY/MM/DD')  daylogMakeTime,
			TO_CHAR(TO_DATE(DAYLOG_MAKE_DATE, 'YYYYMMDDHH24'), 'YYYYMMDD') daylogMakeTime2,
			WORKER1 worker1,
			WORKER2 worker2,
			WORKER3 worker3,
			WORKER4 worker4,
			DAYLOG_CONTENT1 content1,
			DAYLOG_CONTENT2 content2,
			DAYLOG_CONTENT3 content3,
			WRK_TIME1 wrkTime1,
			WRK_TIME2 wrkTime2,
			WRK_CONTENT wrkContent,
			WRK_NOTE wrkNote,
			DECODE(WEATHER, 'S', '맑음', 'C', '흐림', 'R', '비', 'M', '안개', 'N', '눈') weather,
			REG_ID regId,
			TO_CHAR(MOD_DATE, 'YYYY/MM/DD HH24:MI') modDate,
			MOD_DATE isMod,
			COMP_FLAG compFlag
		FROM 
			T_WRK_DAYLOG
		WHERE
			DAYLOG_NO = #daylogNo#
	</statement>
	
	<statement id="getTrans" parameterClass="analysisVO" resultClass="analysisVO">
		SELECT 
			F.FACT_CODE factCode,
			replace(F.FACT_NAME,  DECODE(F.RIVER_DIV, 'R01', '한강', 'R02', '낙동강', 'R03', '금강', 'R04', '영산강'), '') factName,
			B.BRANCH_NO branchNo,
			B.BRANCH_NAME||'-'||B.BRANCH_NO as branchName,
			DECODE(F.RIVER_DIV, 'R01', '한강', 'R02', '낙동강', 'R03', '금강', 'R04', '영산강') AS riverDiv,
			SUM(DECODE(M.BRANCH_NO, NULL, 0, 1)) AS rxCnt,
			D.EDATA_CODE edataCode,
			NVL(E.EDATA_NAME,'-') edataName,
			NVL(D.WARNING_OC,'-') warningOc
		FROM
			T_FACT_BRANCH_INFO B
			,T_FACT_INFO F
			,T_MIN_DATA M
			,T_WRK_DAYLOG_DET D
			,T_EDATA_CODE E
		WHERE
			B.FACT_CODE = F.FACT_CODE
			AND M.FACT_CODE(+) = B.FACT_CODE
			AND M.BRANCH_NO(+) = B.BRANCH_NO
			AND F.SYS_KIND = #sysKind#
			AND M.MIN_TIME(+) BETWEEN #frDate#||'0000' AND #toDate#||'2359'
			AND M.ITEM_CODE(+) = 'TUR00'
			AND B.BRANCH_USE_FLAG = 'Y'
			<isEqual prepend="AND" property="sysKind" compareValue="T">
				F.RIVER_DIV = #paramRiverDiv#
			</isEqual>
			AND D.FACT_CODE(+) = B.FACT_CODE
			AND D.BRANCH_NO(+) = B.BRANCH_NO
			AND E.EDATA_CODE(+) = D.EDATA_CODE
			AND D.DAYLOG_NO(+) = #daylogNo#
		GROUP BY
			F.FACT_CODE,
			F.FACT_NAME,
			B.BRANCH_NO,
			B.BRANCH_NAME,
			F.RIVER_DIV,
			D.EDATA_CODE,
			D.WARNING_OC,
			E.EDATA_NAME
		ORDER BY
			F.RIVER_DIV ASC, F.FACT_NAME ASC, B.BRANCH_NO ASC
	</statement>
	
	
	<statement id="getRainfall" parameterClass="analysisVO" resultClass="analysisVO">
		SELECT
			A.REG_NAME regName, 
			TO_CHAR(SUM(NVL(R.HOUR_RAINFALL, 0)), 'FM999,990.0') rainFall
		FROM	
			T_WEATHER_HOUR_RAINFALL R,
			T_WEATHER_AREA A
		WHERE
			R.BRANCH_NO(+) = A.BRANCH_NO
			AND R.FACT_CODE(+) = A.FACT_CODE
			AND R.MEASU_DATE(+) LIKE #frDate#||'%'
			AND A.REG_NAME IN ('여주', '충주', '부여', '공주', '연기', '나주', '광주', '부산', '창녕', '합천', '대구', '구미', '안동')
			AND A.FACT_CODE IN ('41T1006', '43T1007', '44T3005', '44T3007','47T3091', '46T4005', 'S04003', '26T2003', 'S02006', '48T2020', 'S02004', '47T2026', 'S02016' )
		GROUP BY
			A.REG_NAME,
			A.RIVER_DIV,
			A.RIVER_SEQ
		ORDER BY A.RIVER_DIV, A.RIVER_SEQ
	</statement>
	
	<statement id="getTransCnt" parameterClass="analysisVO" resultClass="java.lang.Integer">
		SELECT
			COUNT(*)
		FROM
		(
			SELECT 
				F.FACT_CODE factCode,
				replace(F.FACT_NAME,  DECODE(F.RIVER_DIV, 'R01', '한강', 'R02', '낙동강', 'R03', '금강', 'R04', '영산강'), ''),
				B.BRANCH_NO branchNo,
				B.BRANCH_NAME as branchName,
				DECODE(F.RIVER_DIV, 'R01', '한강', 'R02', '낙동강', 'R03', '금강', 'R04', '영산강') AS riverDiv,
				SUM(DECODE(M.BRANCH_NO, NULL, 0, 1)) AS rxCnt
			FROM
				T_FACT_BRANCH_INFO B
				,T_FACT_INFO F
				,T_MIN_DATA M
			WHERE
				B.FACT_CODE = F.FACT_CODE
				AND M.FACT_CODE(+) = B.FACT_CODE
				AND M.BRANCH_NO(+) = B.BRANCH_NO
				AND F.SYS_KIND = 'T'
				AND M.MIN_TIME(+) BETWEEN #frDate#||'0000' AND #toDate#||'2359'
				AND M.ITEM_CODE(+) = 'TUR00'
				AND B.BRANCH_USE_FLAG = 'Y'
				AND F.RIVER_DIV = #riverDiv#
			GROUP BY
				F.FACT_NAME,
				F.FACT_CODE,
				B.BRANCH_NO,
				B.BRANCH_NAME,
				F.RIVER_DIV
		)
		WHERE rxCnt >= 24
	</statement>
	
	<statement id="getSpread" parameterClass="analysisVO" resultClass="analysisVO">
		  SELECT  
				TO_CHAR(TO_DATE(AD_ACT_DATE, 'YYYYMMDDHH24MI'), 'HH24:MI') spreadTime,
				SMS_CONTENT smsContent
			FROM
				T_WARNING_SMS_CONTENT
			WHERE
				AD_ACT_DATE BETWEEN #frDate#||'0000' AND #toDate#||'2359'
				<isEqual property="adActKind" compareValue="W">
					AND AD_ACT_KIND = 'W'
				</isEqual>
				<isNotEqual property="adActKind" compareValue="W">
					AND AD_ACT_KIND != 'W'
				</isNotEqual>
			ORDER BY AD_ACT_DATE ASC
	</statement>
	
	
	<statement id="getErrorCode" resultClass="errorCodeVO">
		SELECT
			EDATA_CODE edataCode,
			EDATA_CODE_NAME edataCodeName,
			EDATA_NAME edataName
		FROM
			T_EDATA_CODE
		ORDER BY EDATA_NAME
	</statement>
	
	<delete id="deleteDaylogDet" parameterClass="analysisVO">
		DELETE FROM T_WRK_DAYLOG_DET
		WHERE
			DAYLOG_NO = #daylogNo#
			AND FACT_CODE = #factCode#
			AND BRANCH_NO = #branchNo#
	</delete>
	
	<insert id="saveDaylogDet" parameterClass="analysisVO">
		<selectKey resultClass="java.lang.Integer" keyProperty="isSave">
			SELECT COUNT(*) FROM T_WRK_DAYLOG_DET 
				WHERE 
					DAYLOG_NO = #daylogNo#
				AND FACT_CODE = #factCode#
				AND BRANCH_NO = #branchNo#
		</selectKey>
		<isEqual property="isSave" compareValue="0">
			INSERT INTO T_WRK_DAYLOG_DET
			(
				DAYLOG_NO,
				FACT_CODE,
				BRANCH_NO,
				EDATA_CODE,
				WARNING_OC
			)
			VALUES
			(
				#daylogNo#,
				#factCode#,
				#branchNo#,
				#edataCode#,
				#warningOc#
			)
		</isEqual>
		<isNotEqual property="isSave" compareValue="0">
			UPDATE 
				T_WRK_DAYLOG_DET
			SET
				EDATA_CODE = #edataCode#
				,WARNING_OC = #warningOc#
			WHERE
				DAYLOG_NO = #daylogNo# 
				AND FACT_CODE = #factCode#
				AND BRANCH_NO = #branchNo#
		</isNotEqual>
	</insert>
	
	<insert id="saveDaylogSpread" parameterClass="analysisVO">
		<selectKey resultClass="java.lang.Integer" keyProperty="isSave">
			SELECT 
				COUNT(*) 
			FROM 
				T_WRK_DAYLOG_SPREAD
			WHERE 
				DAYLOG_NO = #daylogNo#
				AND SPREAD_TIME = #spreadTime#
		</selectKey>
		<isEqual property="isSave" compareValue="0">
		INSERT INTO T_WRK_DAYLOG_SPREAD(
			DAYLOG_NO,
			SPREAD_DEPT,
			SPREAD_CONTENT,
			SPREAD_TIME,
			SPREAD_TYPE
		)
		VALUES
		(
			#daylogNo#,
			#spreadDept#,
			#spreadContent#,
			#spreadTime#,
			#spreadType#
		)
		</isEqual>
		<isNotEqual property="isSave" compareValue="0">
			UPDATE
				T_WRK_DAYLOG_SPREAD
			SET
				SPREAD_CONTENT = #spreadContent#,
				SPREAD_DEPT = #spreadDept#
			WHERE
				SPREAD_TIME = #spreadTime#
				AND DAYLOG_NO = #daylogNo#
		</isNotEqual>
	</insert>
	
	<statement id="getDaylogSpreadCnt" parameterClass="analysisVO" resultClass="java.lang.Integer">
		SELECT
			COUNT(*)
		FROM
			T_WRK_DAYLOG_SPREAD
		WHERE
			DAYLOG_NO = #daylogNo#
	</statement>
	
	<update id="updateDaylogSpread" parameterClass="analysisVO">
		UPDATE
			T_WRK_DAYLOG_SPREAD
		SET
			SPREAD_CONTENT = #spreadContent#
		WHERE
			DAYLOG_NO = #daylogNo#
			AND SPREAD_TIME = #spreadTime#
	</update>
	
	<statement id="getDaylogSpreadList" parameterClass="analysisVO" resultClass="analysisVO">
		SELECT
			DAYLOG_NO daylogNo,
			SPREAD_TIME spreadTime,
			SPREAD_CONTENT spreadContent,
			SPREAD_CONTENT smsContent,
			SPREAD_DEPT spreadDept,
			SPREAD_TYPE spreadType
		FROM
			T_WRK_DAYLOG_SPREAD
		WHERE
			DAYLOG_NO = #daylogNo#
			AND SPREAD_TYPE = #spreadType#
		ORDER BY
			SPREAD_TIME DESC
	</statement>
	
	<update id="completeDaylog" parameterClass="analysisVO">
		UPDATE
			T_WRK_DAYLOG
		SET
			COMP_FLAG = 'Y'
		WHERE
			DAYLOG_NO = #daylogNo#
	</update>
</sqlMap>