<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="WareHouseManageDAO">

	<typeAlias  alias="egovMap"						type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="wareHouseVO"					type="daewooInfo.warehouse.bean.WareHouseVO"/>
	<typeAlias  alias="wareHouseSearchVO"			type="daewooInfo.warehouse.bean.WareHouseSearchVO"/>
	<typeAlias  alias="WareHouseManageSearchVO"		type="daewooInfo.warehouse.bean.WareHouseManageSearchVO"/>
	<typeAlias  alias="wareSearchVO"				type="daewooInfo.warehouse.bean.SearchVO"/>
	<typeAlias  alias="itemCodeVO"					type="daewooInfo.warehouse.bean.ItemCodeVO"/>
	<typeAlias  alias="itemCodeSearchVO"			type="daewooInfo.warehouse.bean.ItemCodeSearchVO"/>
	<typeAlias  alias="cmmnCode"					type="daewooInfo.admin.cmmncode.bean.CmmnCode"/>
	<typeAlias  alias="itemCalcVO"					type="daewooInfo.warehouse.bean.ItemCalcVO"/>
	<typeAlias  alias="itemCalcSearchVO"			type="daewooInfo.warehouse.bean.ItemCalcSearchVO"/>
	<typeAlias  alias="itemCalcPreVO"				type="daewooInfo.warehouse.bean.ItemCalcPreVO"/>
	<typeAlias  alias="wareHouseCalcTotalListVO"	type="daewooInfo.warehouse.bean.wareHouseCalcTotalListVO"/>
	<typeAlias  alias="deptVO"						type="daewooInfo.cmmn.bean.DeptVO"/>
	<typeAlias  alias="memberVO"					type="daewooInfo.common.login.bean.MemberVO"/>
	<typeAlias  alias="ItemManageSearchVO"			type="daewooInfo.warehouse.bean.ItemManageSearchVO"/>
	<typeAlias  alias="itemCodeGroupVO"				type="daewooInfo.warehouse.bean.ItemCodeGroupVO"/>
	<typeAlias  alias="ItemGroupSearchVO"			type="daewooInfo.warehouse.bean.ItemGroupSearchVO"/>
	<typeAlias  alias="itemConditionSearchVO"		type="daewooInfo.warehouse.bean.ItemConditionManageSearchVO"/>
	<typeAlias  alias="warehouseZipcodeVO"			type="daewooInfo.warehouse.bean.WareHouseZipcodeVO"/>
	<typeAlias  alias="memberSearchVO"				type="daewooInfo.admin.member.bean.MemberSearchVO"/>
	<typeAlias  alias="ItemHoldConditionVO"		    type="daewooInfo.warehouse.bean.ItemHoldConditionVO"/>
	
	<!-- 창고 리스트 -->
	<select id="selectWareHouseList" parameterClass="wareHouseVO" resultClass="wareHouseVO">
		SELECT wh_code		AS "whCode",
				wh_name		AS "whName",
				admin_dept	AS "adminDept",
				admin_name	AS "adminName",
				admin_telno	AS "adminTelno",
				addr		AS "addr",
				lon			AS "lon",
				lat			AS "lat",
				cty_code	AS "ctyCode",
				river_div	AS "riverDiv",
				USE_FLAG	AS "useFlag"
		  FROM t_warehouse
		  WHERE 1 = 1
		  <isNotEmpty property="riverDiv">
			AND RIVER_DIV = #riverDiv#
		  </isNotEmpty>
		  <isNotEmpty property="adminDept">
			AND ADMIN_DEPT = #adminDept#
		  </isNotEmpty>
		  <isNotEmpty property="adminDeptSub">
			AND ADMIN_DEPT_SUB = #adminDeptSub#
		  </isNotEmpty>
		  <isNotEmpty property="doCode">
			AND CTY_CODE LIKE #doCode#||'%'
		  </isNotEmpty>
		  ORDER BY wh_code asc
	</select>
	
	<!-- 창고 물품 간단 조회 (전체) -->
	<select id="selectWareHouseItemListSimpleAll" parameterClass="wareSearchVO" resultClass="itemCodeVO">
		select 
			a.item_code as itemCode,
			a.item_code_num as itemCodeNum, 
			c.item_name as itemName, 
			c.item_unit as itemUnit, 
			c.item_stan as itemStan, 
			nvl(amt1,0) - nvl(amt2,0) AS amt 
		from 
		(select 
			item_code, sum(stor_amt) as amt1 ,item_code_num
		from t_item_stor
		group by item_code, ITEM_CODE_NUM) a,
		(select 
			item_code, sum(rele_amt) as amt2 ,item_code_num
		from t_item_rele
		group by item_code, ITEM_CODE_NUM) b,
		(select 
			item_code, item_name, item_unit, item_stan,item_code_num
		from t_item_code) c 
		where a.item_code=b.item_code(+)
        AND a.item_code_num=b.item_code_num(+)
		and a.item_code=c.item_code(+)
        and a.item_code_num=c.item_code_num(+)
		<isNotEmpty property="itemCode">
			and a.item_code=#itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and a.item_code_num=#itemCodeNum#
		</isNotEmpty>
	</select>
	<!-- 창고 물품 간단 조회 (특정 창고) -->
	<select id="selectWareHouseItemListSimpleOne" parameterClass="wareSearchVO" resultClass="itemCodeVO">
		select 
				a.item_code as itemCode, 
				a.item_code_num as itemCodeNum,
				c.item_name as itemName, 
				c.item_unit as itemUnit, 
				c.item_stan as itemStan, 
				nvl(amt1,0)-nvl(amt2,0) as amt 
				A.item_code_num as itemCodeNum
			from 
			(select 
				wh_code,item_code, sum(stor_amt) as amt1 ,item_code_num 
			from t_item_stor
			group by wh_code,item_code, item_code_num) a,
			(select 
				item_code, sum(rele_amt) as amt2 ,item_code_num 
			from t_item_rele
			group by item_code, item_code_num) b,
			(select 
				item_code, item_name, item_unit, item_stan, item_code_num
			from t_item_code) c 
			,(select wh_code
			from t_warehouse	
			) d
			where a.item_code=b.item_code(+)
			and a.item_code_num=b.item_code_num(+)
			and a.item_code=c.item_code(+)
			and a.item_code_num=c.item_code_num(+)
			and a.wh_code=d.wh_code(+)
			<isNotEmpty property="itemCode">
				and a.item_code=#itemCode#
			</isNotEmpty>
			<isNotEmpty property="itemCodeNum">
				and a.item_code_num=#itemCodeNum#
			</isNotEmpty>
			and a.wh_code=#whCode#
	</select>
	<!-- 창고 물품 상세 조회 - 입고 -->
	<select id="selectWareHouseItemListDetail_store" parameterClass="wareSearchVO" resultClass="itemCodeVO">
		select
			rownum as num,
			a.stor_date as itemDate, 
			b.wh_name as whName,
			c.item_name as itemName,
			c.item_unit as itemUnit,
			c.item_stan as itemStan,
			a.stor_amt as amt,
			a.item_code_num as itemCodeNum
		from t_item_stor a, t_warehouse b, t_item_code c
		where a.item_code=c.item_code(+)
		and a.item_code_num=c.item_code_num(+)
		and a.wh_code=b.wh_code(+)
		<isNotEmpty property="whCode">
			and b.wh_code=#whCode#
		</isNotEmpty>
		<isNotEmpty property="itemCode">
			and a.item_code=#itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and a.item_code_num=#itemCodeNum#
		</isNotEmpty>
		<isNotEmpty property="startDate">
			and stor_date &gt;= #startDate#
		</isNotEmpty>
		<isNotEmpty property="endDate">
			and stor_date &lt;= #endDate#
		</isNotEmpty>
		order by stor_date desc
	</select>
	<!-- 창고 물품 상세 조회 - 출고 -->
	<select id="selectWareHouseItemListDetail_rele" parameterClass="wareSearchVO" resultClass="itemCodeVO">
		select
			rownum as num,
			a.rele_date as itemDate, 
			b.wh_name as whName,
			c.item_name as itemName,
			c.item_unit as itemUnit,
			c.item_stan as itemStan,
			a.rele_amt as amt,
			a.item_code_num as itemCodeNum
		from t_item_rele a, t_warehouse b, t_item_code c
		where a.item_code=c.item_code(+)
		and a.wh_code=b.wh_code(+)
		<isNotEmpty property="whCode">
			and b.wh_code=#whCode#
		</isNotEmpty>
		<isNotEmpty property="itemCode">
			and a.item_code=#itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and a.item_code_num=#itemCodeNum#
		</isNotEmpty>
		<isNotEmpty property="startDate">
			and rele_date &gt;= #startDate#
		</isNotEmpty>
		<isNotEmpty property="endDate">
			and rele_date &lt;= #endDate#
		</isNotEmpty>
		order by rele_date desc
	</select>
	
	<select id="selectWareHouseItemCodeList" resultClass="itemCodeVO" parameterClass="wareSearchVO">
		select 
			rownum as num,
			item_code || '-' || item_code_num as itemCode,
			item_name as itemName,
			item_code_num as itemCodeNum,
			item_unit as itemUnit,
			item_stan as itemStan,
			nvl(type1_appl_flag,'N') as type1ApplFlag,
			nvl(type2_appl_flag,'N') as type2ApplFlag,
			nvl(type3_appl_flag,'N') as type3ApplFlag,
			nvl(type4_appl_flag,'N') as type4ApplFlag,
			nvl(type5_appl_flag,'N') as type5ApplFlag,
			nvl(type6_appl_flag,'N') as type6ApplFlag,
			nvl(type7_appl_flag,'N') as type7ApplFlag,
			nvl(type8_appl_flag,'N') as type8ApplFlag,
			nvl(type9_appl_flag,'N') as type9ApplFlag,
			nvl(type10_appl_flag,'N') as type10ApplFlag,
			nvl(type11_appl_flag,'N') as type11ApplFlag,
			nvl(type12_appl_flag,'N') as type12ApplFlag,
			use_flag as useFlag  
		from t_item_code
		where item_code is not null
		<isNotEmpty property="itemCode">
		and item_code=#itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and item_code_num=#itemCodeNum#
		</isNotEmpty>
		order by item_code asc
	</select>
	
	<insert id="insertWareHouseItemCode" parameterClass="itemCodeVO">
		INSERT INTO T_ITEM_CODE (
			ITEM_CODE, ITEM_NAME, 
			ITEM_UNIT, ITEM_STAN, TYPE1_APPL_FLAG, 
			TYPE2_APPL_FLAG, TYPE3_APPL_FLAG, TYPE4_APPL_FLAG, 
			TYPE5_APPL_FLAG, TYPE6_APPL_FLAG, TYPE7_APPL_FLAG, 
			TYPE8_APPL_FLAG, TYPE9_APPL_FLAG, TYPE10_APPL_FLAG, 
			TYPE11_APPL_FLAG, TYPE12_APPL_FLAG, USE_FLAG,ITEM_CODE_NUM) 
		VALUES ( #itemCode#,
			#itemName#,
			#itemUnit#,
			#itemStan#,
			#type1ApplFlag#,
			#type2ApplFlag#,
			#type3ApplFlag#,
			#type4ApplFlag#,
			#type5ApplFlag#,
			#type6ApplFlag#,
			#type7ApplFlag#,
			#type8ApplFlag#,
			#type9ApplFlag#,
			#type10ApplFlag#,
			#type11ApplFlag#,
			#type12ApplFlag#,
			#useFlag#,
			(select COUNT(*)+1 from T_ITEM_CODE WHERE ITEM_CODE = #itemCode#)
		 )
	</insert>
	
	<update id="updateWareHouseItemCode" parameterClass="itemCodeVO">
		<![CDATA[
		UPDATE T_ITEM_CODE
		SET	ITEM_NAME		= #itemName#,
				ITEM_UNIT		= #itemUnit#,
				ITEM_STAN		= #itemStan#,
				TYPE1_APPL_FLAG  = #type1ApplFlag#,
				TYPE2_APPL_FLAG  = #type2ApplFlag#,
				TYPE3_APPL_FLAG  = #type3ApplFlag#,
				TYPE4_APPL_FLAG  = #type4ApplFlag#,
				TYPE5_APPL_FLAG  = #type5ApplFlag#,
				TYPE6_APPL_FLAG  = #type6ApplFlag#,
				TYPE7_APPL_FLAG  = #type7ApplFlag#,
				TYPE8_APPL_FLAG  = #type8ApplFlag#,
				TYPE9_APPL_FLAG  = #type9ApplFlag#,
				TYPE10_APPL_FLAG = #type10ApplFlag#,
				TYPE11_APPL_FLAG = #type11ApplFlag#,
				TYPE12_APPL_FLAG = #type12ApplFlag#,
				USE_FLAG		 = #useFlag#
		WHERE  ITEM_CODE		= #itemCode#
		AND ITEM_CODE_NUM = #itemCodeNum#
		]]>
	</update>
	
	<select id="selectWareHouseItemStorList" parameterClass="wareSearchVO" resultClass="itemCodeVO">
		SELECT 
			rownum as num,
			STOR_DATE as itemDate, 
			STOR_AMT as amt, 
			WH_CODE as whCode, 
			a.ITEM_CODE as itemCode, 
			item_name as itemName,
			item_stan as itemStan,
			item_unit as itemUnit,
			(select wh_name from t_warehouse where wh_code=a.wh_code) as whName
		FROM T_ITEM_STOR a, t_item_code b
		where a.item_code=b.item_code(+)
		and a.item_code_num=b.item_code_num(+)
		<isNotEmpty property="startDate">
			and stor_date &gt;= #startDate#
		</isNotEmpty>
		<isNotEmpty property="endDate">
			and stor_date &lt;= #endDate#
		</isNotEmpty>
		order by stor_date desc
	</select>
	
	<insert id="insertWareHouseItemStor" parameterClass="itemCodeVO">
		INSERT INTO T_ITEM_STOR (
			STOR_DATE, 
			STOR_AMT, 
			REG_ID, 
			WH_CODE, 
			ITEM_CODE, 
			ITEM_CODE_NUM
		) VALUES (
			#itemDate#,
			#amt#,
			#regId#,
			#whCode#,
			#itemCode#,
			#itemCodeNum#
			)
	</insert>
	
	<update id="updateWareHouseItemStor" parameterClass="itemCodeVO">
		UPDATE T_ITEM_STOR
			SET 
				STOR_AMT = #amt#,
				REG_ID = #regId#
		 WHERE STOR_DATE = #itemDate#
				AND WH_CODE = #whCode#
				AND ITEM_CODE = #itemCode#
				AND ITEM_CODE_NUM = #itemCodeNum#
	</update>
	
	<delete id="deleteWareHouseItemStor" parameterClass="itemCodeVO">
		DELETE FROM T_ITEM_STOR
		WHERE WH_CODE = #whCode#
				AND ITEM_CODE = #itemCode#
				AND ITEM_CODE_NUM = #itemCodeNum#
	</delete>
	
	<select id="selectWareHouseItemReleList" parameterClass="wareSearchVO" resultClass="itemCodeVO">
		SELECT 
			rownum as num,
			rele_DATE as itemDate, 
			rele_AMT as amt, 
			WH_CODE as whCode, 
			a.ITEM_CODE as itemCode, 
			item_name as itemName,
			item_unit as itemUnit,
			item_stan as itemStan,
			(select wh_name from t_warehouse where wh_code=a.wh_code) as whName
		FROM T_ITEM_RELE a  , t_item_code b
		where a.item_code=b.item_code(+)
		and a.item_code_num=b.item_code_num(+)
		<isNotEmpty property="startDate">
			and rele_date &gt;= #startDate#
		</isNotEmpty>
		<isNotEmpty property="endDate">
			and rele_date &lt;= #endDate#
		</isNotEmpty>
		order by rele_date desc
	</select>
	
	<insert id="insertWareHouseItemRele" parameterClass="itemCodeVO">
		INSERT INTO T_ITEM_RELE (
			RELE_DATE, 
			RELE_AMT, 
			REG_ID, 
			WH_CODE, 
			ITEM_CODE, 
			ITEM_CODE_NUM
		) VALUES (
			#itemDate#,
			#amt#,
			#regId#,
			#whCode#,
			#itemCode#,
			#itemCodeNum#
			)
	</insert>
	
	<update id="updateWareHouseItemRele" parameterClass="itemCodeVO">
		UPDATE T_ITEM_RELE
			SET 
				RELE_AMT = #amt#,
				REG_ID = #regId#
		 WHERE RELE_DATE = #itemDate#
				AND WH_CODE = #whCode#
				AND ITEM_CODE = #itemCode#
				AND ITEM_CODE_NUM = #itemCodeNum#
	</update>
	
	<delete id="deleteWareHouseItemRele" parameterClass="itemCodeVO">
		DELETE T_ITEM_RELE
		WHERE RELE_DATE = #itemDate#
				AND WH_CODE = #whCode#
				AND ITEM_CODE = #itemCode#
				AND ITEM_CODE_NUM = #itemCodeNum# 
	</delete>
	
	
	
	<!-- 여기서 부터는 JSP에서 사용되는... -->
	
	<!-- 입고 목록 -->
	<select id="itemStoreDataList" parameterClass="itemCodeSearchVO" resultClass="itemCodeSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				SELECT 
					STOR_DATE as itemDate, 
					STOR_AMT as amt, 
					WH_CODE as whCode, 
					a.ITEM_CODE as itemCode, 
					item_name as itemName,
					item_stan as itemStan,
					item_unit as itemUnit,
					b.item_code_num as itemCodeNum,
					(select wh_name from t_warehouse where wh_code=a.wh_code) as whName
				FROM T_ITEM_STOR a, t_item_code b
				where a.item_code=b.item_code(+)
				and a.item_code_num=b.item_code_num(+)
				<isNotEmpty property="whCode">
					and wh_code = #whCode#
				</isNotEmpty>
				<isNotEmpty property="itemCode">
					and a.item_code = #itemCode#
				</isNotEmpty>
				<isNotEmpty property="itemCodeNum">
					and a.item_code_num=#itemCodeNum#
				</isNotEmpty>
				<isNotEmpty property="startDate">
					and stor_date &gt;= #startDate#
				</isNotEmpty>
				<isNotEmpty property="endDate">
					and stor_date &lt;= #endDate#
				</isNotEmpty>
				order by stor_date desc
			/* 구현 Sql */
				) ALL_LIST
				)
		 WHERE  RNUM  &gt; #firstIndex#
			AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 입고목록 카운트 -->
	<select id="itemStoreDataListCnt" parameterClass="itemCodeSearchVO" resultClass="int">
		SELECT 
			count(*) as totcnt
		FROM T_ITEM_STOR a, t_item_code b
		where a.item_code=b.item_code(+)
		and a.item_code_num=b.item_code_num(+)
		<isNotEmpty property="whCode">
			and wh_code = #whCode#
		</isNotEmpty>
		<isNotEmpty property="itemCode">
			and a.item_code = #itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and a.item_code_num=#itemCodeNum#
		</isNotEmpty>
		<isNotEmpty property="startDate">
			and stor_date &gt;= #startDate#
		</isNotEmpty>
		<isNotEmpty property="endDate">
			and stor_date &lt;= #endDate#
		</isNotEmpty>
	</select>
	
	<!-- 출고 목록 -->
	<select id="itemReleDataList" parameterClass="itemCodeSearchVO" resultClass="itemCodeSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				SELECT 
					RELE_DATE as itemDate, 
					RELE_AMT as amt, 
					WH_CODE as whCode, 
					a.ITEM_CODE as itemCode, 
					item_name as itemName,
					item_stan as itemStan,
					item_unit as itemUnit,
					b.item_code_num as itemCodeNum,
					(select wh_name from t_warehouse where wh_code=a.wh_code) as whName
				FROM T_ITEM_RELE a, t_item_code b
				where a.item_code=b.item_code(+)
				and a.item_code_num=b.item_code_num(+)
				<isNotEmpty property="whCode">
					and wh_code = #whCode#
				</isNotEmpty>
				<isNotEmpty property="itemCode">
					and a.item_code = #itemCode#
				</isNotEmpty>
				<isNotEmpty property="itemCodeNum">
					and a.item_code_num=#itemCodeNum#
				</isNotEmpty>
				<isNotEmpty property="startDate">
					and rele_date &gt;= #startDate#
				</isNotEmpty>
				<isNotEmpty property="endDate">
					and rele_date &lt;= #endDate#
				</isNotEmpty>
				order by rele_date desc
			/* 구현 Sql */
				) ALL_LIST
				)
		 WHERE  RNUM  &gt; #firstIndex#
			AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 출고목록 카운트 -->
	<select id="itemReleDataListCnt" parameterClass="itemCodeSearchVO" resultClass="int">
		SELECT 
			count(*) as totcnt
		FROM T_ITEM_RELE a, t_item_code b
		where a.item_code=b.item_code(+)
		and a.item_code_num=b.item_code_num(+)
		<isNotEmpty property="whCode">
			and wh_code = #whCode#
		</isNotEmpty>
		<isNotEmpty property="itemCode">
			and a.item_code = #itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and a.item_code_num=#itemCodeNum#
		</isNotEmpty>
		<isNotEmpty property="startDate">
			and rele_date &gt;= #startDate#
		</isNotEmpty>
		<isNotEmpty property="endDate">
			and rele_date &lt;= #endDate#
		</isNotEmpty>
	</select>
	
	<!-- 정산 목록 -->
	<select id="itemCalcDataList" parameterClass="itemCalcSearchVO" resultClass="itemCalcSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				SELECT 
					calc_date as calcDate, 
					calc_seq as calcSeq,
					calc_org as calcOrg,
					lab_cost as labCost,
					fule_cost as fuleCost,
					item_cost as itemCost,
					equ_use_cost as equUseCost,
					tran_cost as tranCost,
					etc_cost as etcCost,
					tot_cost as totCost
				FROM T_ITEM_CALC a
				where calc_seq is not null
				<isNotEmpty property="calcOrg">
					and calc_org like '%'||#calcOrg#||'%'
				</isNotEmpty>
				<isNotEmpty property="startDate">
					and calc_date &gt;= #startDate#
				</isNotEmpty>
				<isNotEmpty property="endDate">
					and calc_date &lt;= #endDate#
				</isNotEmpty>
				order by calc_date desc, calc_seq desc
			/* 구현 Sql */
				) ALL_LIST
				)
		 WHERE  RNUM  &gt; #firstIndex#
			AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 정산 목록 카운트 -->
	<select id="itemCalcDataListCnt" parameterClass="itemCalcSearchVO" resultClass="int">
		SELECT 
			count(*) as totcnt
		FROM T_ITEM_CALC a
		where a.calc_seq is not null
		<isNotEmpty property="calcOrg">
			and calc_org like '%'||#calcOrg#||'%'
		</isNotEmpty>
		<isNotEmpty property="startDate">
			and calc_date &gt;= #startDate#
		</isNotEmpty>
		<isNotEmpty property="endDate">
			and calc_date &lt;= #endDate#
		</isNotEmpty>
	</select>		
	
	<!-- merge into 정산 -->
	<statement id="mergeItemCalc" parameterClass="itemCalcSearchVO">
		MERGE INTO T_ITEM_CALC A
		USING ( SELECT #calcDate# AS CALC_DATE, #calcSeq# AS CALC_SEQ, #calcOrg# as CALC_ORG, 
					#labCost# AS LAB_COST, #fuleCost# AS FULE_COST, #itemCost# AS ITEM_COST, 
					#equUseCost# AS EQU_USE_COST, #tranCost# as TRAN_COST, #etcCost# as ETC_COST, #totCost# as TOT_COST 
				FROM DUAL) B
		ON (A.CALC_DATE = B.CALC_DATE and A.CALC_SEQ = B.CALC_SEQ)
		WHEN MATCHED THEN
			UPDATE SET
				A.CALC_ORG = B.CALC_ORG,
				A.LAB_COST = B.LAB_COST,
				A.FULE_COST = B.FULE_COST,
				A.ITEM_COST = B.ITEM_COST,
				A.EQU_USE_COST = B.EQU_USE_COST,
				A.TRAN_COST = B.TRAN_COST,
				A.ETC_COST = B.ETC_COST,
				A.TOT_COST = B.TOT_COST
		WHEN NOT MATCHED THEN
			INSERT (A.CALC_DATE, A.CALC_SEQ, A.CALC_ORG, A.LAB_COST, A.FULE_COST, A.ITEM_COST, A.EQU_USE_COST, A.TRAN_COST, A.ETC_COST, A.TOT_COST)
			VALUES (B.CALC_DATE, 
					(select nvl(max(calc_seq)+1,1) from t_item_calc where calc_date=#calcDate#),
					B.CALC_ORG, B.LAB_COST, B.FULE_COST, B.ITEM_COST, B.EQU_USE_COST, B.TRAN_COST, B.ETC_COST, B.TOT_COST)
	</statement>
	
	<!-- 물품 조회 (전체) -->
	<select id="itemSearchDataListALL" parameterClass="itemCodeSearchVO" resultClass="itemCodeSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				select 
					a.item_code as itemCode, 
					c.item_name as itemName, 
					c.item_unit as itemUnit, 
					c.item_stan as itemStan, 
					nvl(amt1,0) - nvl(amt2,0) AS amt,
					a.item_code_num as itemCodeNum, 
				from 
				(select 
					 item_code, sum(stor_amt) as amt1 ,item_code_num
				from t_item_stor
				group by item_code, item_code_num) a,
				(select 
					item_code, sum(rele_amt) as amt2,item_code_num 
				from t_item_rele
				group by item_code, item_code_num) b,
				(select 
					item_code, item_name, item_unit, item_stan,item_code_num
				from t_item_code) c 
				where a.item_code=b.item_code(+)
				and a.item_code_num=b.item_code_num(+)
				and a.item_code=c.item_code(+)
				and a.item_code_num=c.item_code_num(+)
				<isNotEmpty property="itemCode">
					and a.item_code = #itemCode#
				</isNotEmpty>
				<isNotEmpty property="itemCodeNum">
					and a.item_code_num=#itemCodeNum#
				</isNotEmpty>
				order by a.item_code asc
			/* 구현 Sql */
				) ALL_LIST
				)
		 WHERE  RNUM  &gt; #firstIndex#
			AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 물품 조회 카운트 (전체) -->
	<select id="itemSearchDataListCntALL" parameterClass="itemCodeSearchVO" resultClass="int">
		select 
			  count(*) totcnt 
				from 
				(select 
					item_code, sum(stor_amt) as amt1,item_code_num 
				from t_item_stor
				group by item_code, item_code_num) a,
				(select 
					item_code, sum(rele_amt) as amt2 ,item_code_num
				from t_item_rele
				group by item_code, item_code_num) b,
				(select 
					item_code, item_name, item_unit, item_stan,item_code_num
				from t_item_code) c 
				where a.item_code=b.item_code(+)
				and a.item_code_num=b.item_code_num(+)
				and a.item_code=c.item_code(+)
				and a.item_code_num=c.item_code_num(+)
		<isNotEmpty property="itemCode">
			and a.item_code = #itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and a.item_code_num=#itemCodeNum#
		</isNotEmpty>
	</select>
	
	<!-- 물품 조회 (특정 창고) -->
	<select id="itemSearchDataList" parameterClass="itemCodeSearchVO" resultClass="itemCodeSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				select 
					a.item_code as itemCode, 
					c.item_name as itemName, 
					c.item_unit as itemUnit, 
					c.item_stan as itemStan, 
					nvl(amt1,0)-nvl(amt2,0) as amt,
					a.wh_code whCode 
				from 
				(select 
					wh_code,item_code, sum(stor_amt) as amt1,item_code_num 
				from t_item_stor
				group by wh_code,item_code, item_code_num) a,
				(select 
					item_code, sum(rele_amt) as amt2,item_code_num 
				from t_item_rele
				group by item_code, item_code_num) b,
				(select 
					item_code, item_name, item_unit, item_stan,item_code_num
				from t_item_code) c 
				,(select wh_code
				from t_warehouse	
				) d
				where a.item_code=b.item_code(+)
				and a.item_code_num=b.item_code_num(+)
				and a.item_code=c.item_code(+)
				and a.item_code_num=c.item_code_num(+)
				and a.wh_code=d.wh_code(+)
				and a.wh_code=#whCode#
				<isNotEmpty property="itemCode">
					and a.item_code = #itemCode#
				</isNotEmpty>
				<isNotEmpty property="itemCodeNum">
					and a.item_code_num=#itemCodeNum#
				</isNotEmpty>
				order by a.item_code asc
			/* 구현 Sql */
				) ALL_LIST
				)
		 WHERE  RNUM  &gt; #firstIndex#
			AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 물품 조회 카운트 (특정 창고) -->
	<select id="itemSearchDataListCnt" parameterClass="itemCodeSearchVO" resultClass="int">
		select 
			count(*) totcnt 
		from 
		(select 
			wh_code,item_code, sum(stor_amt) as amt1 ,item_code_num
		from t_item_stor
		group by wh_code,item_code, item_code_num) a,
		(select 
			item_code, sum(rele_amt) as amt2 ,item_code_num
		from t_item_rele
		group by item_code, item_code_num) b,
		(select 
			item_code, item_name, item_unit, item_stan,item_code_num
		from t_item_code) c 
		,(select wh_code
		from t_warehouse	
		) d
		where a.item_code=b.item_code(+)
		and a.item_code_num=b.item_code_num(+)
		and a.item_code=c.item_code(+)
		and a.item_code_num=c.item_code_num(+)
		and a.wh_code=d.wh_code(+)
		and a.wh_code=#whCode#
		<isNotEmpty property="itemCode">
			and a.item_code = #itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and a.item_code_num=#itemCodeNum#
		</isNotEmpty>
	</select>
	
	<!-- 창고정보 -->
	<select id="wareHouseInfo" resultClass="wareHouseVO" parameterClass="java.lang.String">
		SELECT wh_code AS "whCode",
				wh_name AS "whName",
				admin_dept AS "adminDept",
				admin_name AS "adminName",
				admin_telno AS "adminTelno",
				addr AS "addr",
				lon AS "lon",
				lat AS "lat",
				cty_code as "ctyCode"
		  FROM t_warehouse			
		  WHERE wh_code = #whCode# 
	</select>
	
	<!-- 방제물품 아이템 코드 목록 -->
	<select id="itemCodeDataList" resultClass="itemCodeSearchVO" parameterClass="itemCodeSearchVO">
	SELECT	/* WareHouseManageDAO.itemCodeDataList */ 
	 * 
      FROM  (
	    SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
	      FROM  (
	        select 
	            item_code as itemCode,
	            item_name as itemName,
	            item_code_num as itemCodeNum,
	            item_unit as itemUnit,
	            item_stan as itemStan,
	            price	 as itemCost,
	            nvl(type1_appl_flag,'N') as type1ApplFlag,
	            nvl(type2_appl_flag,'N') as type2ApplFlag,
	            nvl(type3_appl_flag,'N') as type3ApplFlag,
	            nvl(type4_appl_flag,'N') as type4ApplFlag,
	            nvl(type5_appl_flag,'N') as type5ApplFlag,
	            nvl(type6_appl_flag,'N') as type6ApplFlag,
	            nvl(type7_appl_flag,'N') as type7ApplFlag,
	            nvl(type8_appl_flag,'N') as type8ApplFlag,
	            nvl(type9_appl_flag,'N') as type9ApplFlag,
	            nvl(type10_appl_flag,'N') as type10ApplFlag,
	            nvl(type11_appl_flag,'N') as type11ApplFlag,
	            nvl(type12_appl_flag,'N') as type12ApplFlag,
	            use_flag as useFlag,
	            atch_file_id as atchFileId,
	            ITEM_DETAIL AS itemDetail, 
	            ITEM_PURPOSE AS itemPurpose, 
	            ITEM_STOCK_TYPE AS itemStock 
	        from t_item_code
	        where 1=1
	        <isNotEmpty property="itemCode">
	            and item_code=#itemCode#
	        </isNotEmpty>
	        <isNotEmpty property="itemCodeNum">
	            and item_code_num=#itemCodeNum#
	        </isNotEmpty>
	        order by item_name asc
	        ) ALL_LIST
	        )
	 WHERE  RNUM  &gt; #firstIndex#
	    AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 방제물품 아이템 코드 목록 카운트-->
	<select id="itemCodeDataListCnt" parameterClass="itemCodeSearchVO" resultClass="int">
		select 
			count(*) totcnt
		from t_item_code
		<isNotEmpty property="itemCode">
		where item_code=#itemCode#
		</isNotEmpty>
		<isNotEmpty property="itemCodeNum">
			and item_code_num=#itemCodeNum#
		</isNotEmpty>
	</select>
	
	<!-- merge into 방제물품 현황 -->
	<statement id="mergeWareHouseItemStor" parameterClass="itemCodeSearchVO">
	
		<isNotEmpty property="calcOption">
			<isEqual property="calcOption" compareValue="itemRele">
				INSERT INTO T_ITEM_RELE
				(RELE_DATE,WH_CODE,ITEM_CODE,RELE_TIME,RELE_AMT,REG_ID,RELE_DESC,ITEM_CODE_NUM )
			</isEqual>
			<isNotEqual property="calcOption" compareValue="itemRele">
				INSERT INTO T_ITEM_STOR
				(STOR_DATE,WH_CODE,ITEM_CODE,STOR_TIME,STOR_AMT,REG_ID,STOR_DESC,ITEM_CODE_NUM )
			</isNotEqual>
			VALUES(
				  TO_CHAR(SYSDATE,'yyyymmdd')
				, #whCode#
				, #itemCode#
				, TO_CHAR(SYSDATE,'hh24miss')
				, #amt#
				, #regId#
				, #itemDesc#
				, #itemCodeNum#
			)
			  
		</isNotEmpty>
	</statement>
	
	<!-- 방제물품 코드 중복체크 -->
	<select id="duplicateItemCode" resultClass="int" parameterClass="itemCodeSearchVO">
		SELECT count(*) as totcnt
		FROM T_ITEM_CODE
		WHERE ITEM_CODE = #itemCode#
		<isNotEmpty property="itemCodeNum">
			AND item_code_num = #itemCodeNum#
		</isNotEmpty>
		<isEmpty property="itemCodeNum">
			AND item_code_num = (select COUNT(*)+1 from T_ITEM_CODE WHERE ITEM_CODE =	#itemCode#)
		</isEmpty>
	</select>
	
	<!-- merge into 방제물품 코드 -->
	<statement id="mergeWarseItemCode" parameterClass="itemCodeSearchVO">
		MERGE INTO T_ITEM_CODE A
		USING ( SELECT #itemCode# AS ITEM_CODE, #itemName# AS ITEM_NAME, #itemStan# AS ITEM_STAN, #itemUnit# AS ITEM_UNIT, #itemCost# AS ITEM_COST,	
						#type1ApplFlag# AS TYPE1_APPL_FLAG,  
						#type2ApplFlag# AS TYPE2_APPL_FLAG,
						#type3ApplFlag# AS TYPE3_APPL_FLAG,
						#type4ApplFlag# AS TYPE4_APPL_FLAG,
						#type5ApplFlag# AS TYPE5_APPL_FLAG,
						#type6ApplFlag# AS TYPE6_APPL_FLAG,
						#type7ApplFlag# AS TYPE7_APPL_FLAG,
						#type8ApplFlag# AS TYPE8_APPL_FLAG,
						#type9ApplFlag# AS TYPE9_APPL_FLAG,
						#type10ApplFlag# AS TYPE10_APPL_FLAG,
						#type11ApplFlag# AS TYPE11_APPL_FLAG,
						#type12ApplFlag# AS TYPE12_APPL_FLAG,
						#useFlag# AS USE_FLAG,
						#groupCode# AS GROUP_CODE,
						#upperGroupCode# AS UPPER_GROUP_CODE,
						<isNotEmpty property="itemCodeNum">
							#itemCodeNum# item_code_num
						</isNotEmpty>
						<isEmpty property="itemCodeNum">
							(select COUNT(*)+1 from T_ITEM_CODE WHERE ITEM_CODE =	#itemCode#) item_code_num
						</isEmpty>
				FROM DUAL) B
		ON (A.ITEM_CODE = B.ITEM_CODE AND A.ITEM_CODE_NUM = B.ITEM_CODE_NUM)
		WHEN MATCHED THEN 
			UPDATE SET 
				A.ITEM_NAME = B.ITEM_NAME,
				A.ITEM_UNIT = B.ITEM_UNIT,
				A.ITEM_STAN = B.ITEM_STAN,
				A.PRICE	 = B.ITEM_COST,
				A.TYPE1_APPL_FLAG = B.TYPE1_APPL_FLAG,
				A.TYPE2_APPL_FLAG = B.TYPE2_APPL_FLAG,
				A.TYPE3_APPL_FLAG = B.TYPE3_APPL_FLAG,
				A.TYPE4_APPL_FLAG = B.TYPE4_APPL_FLAG,
				A.TYPE5_APPL_FLAG = B.TYPE5_APPL_FLAG,
				A.TYPE6_APPL_FLAG = B.TYPE6_APPL_FLAG,
				A.TYPE7_APPL_FLAG = B.TYPE7_APPL_FLAG,
				A.TYPE8_APPL_FLAG = B.TYPE8_APPL_FLAG,
				A.TYPE9_APPL_FLAG = B.TYPE9_APPL_FLAG,
				A.TYPE10_APPL_FLAG = B.TYPE10_APPL_FLAG,
				A.TYPE11_APPL_FLAG = B.TYPE11_APPL_FLAG,
				A.TYPE12_APPL_FLAG = B.TYPE12_APPL_FLAG,
				A.USE_FLAG = B.USE_FLAG,
				A.UPT_DT = SYSDATE
		WHEN NOT MATCHED THEN
			INSERT (A.ITEM_CODE, A.ITEM_NAME, A.ITEM_UNIT, A.ITEM_STAN, A.PRICE ,
					A.TYPE1_APPL_FLAG,
					A.TYPE2_APPL_FLAG,
					A.TYPE3_APPL_FLAG,
					A.TYPE4_APPL_FLAG,
					A.TYPE5_APPL_FLAG,
					A.TYPE6_APPL_FLAG,
					A.TYPE7_APPL_FLAG,
					A.TYPE8_APPL_FLAG,
					A.TYPE9_APPL_FLAG,
					A.TYPE10_APPL_FLAG,
					A.TYPE11_APPL_FLAG,
					A.TYPE12_APPL_FLAG,
					A.USE_FLAG,
					A.REG_DT,
					A.UPT_DT,
					A.GROUP_CODE,
					A.UPPER_GROUP_CODE,
					A.ITEM_CODE_NUM
					)
			VALUES (B.ITEM_CODE, B.ITEM_NAME, B.ITEM_UNIT, B.ITEM_STAN,B.ITEM_COST ,
					B.TYPE1_APPL_FLAG,
					B.TYPE2_APPL_FLAG,
					B.TYPE3_APPL_FLAG,
					B.TYPE4_APPL_FLAG,
					B.TYPE5_APPL_FLAG,
					B.TYPE6_APPL_FLAG,
					B.TYPE7_APPL_FLAG,
					B.TYPE8_APPL_FLAG,
					B.TYPE9_APPL_FLAG,
					B.TYPE10_APPL_FLAG,
					B.TYPE11_APPL_FLAG,
					B.TYPE12_APPL_FLAG,
					B.USE_FLAG,
					SYSDATE,
					SYSDATE,
					B.GROUP_CODE,
					B.UPPER_GROUP_CODE,
					B.ITEM_CODE_NUM
					)
	</statement>
	
	<!-- merge into 방제물품 코드 '20170101' AS  대,중분류 사용 안함으로 값을 고정-->
	<statement id="mergeWareHouseItemCodeN" parameterClass="itemCodeSearchVO">
		MERGE INTO T_ITEM_CODE A
		USING ( SELECT #itemCodeN# AS ITEM_CODE, #itemName# AS ITEM_NAME, #itemStan# AS ITEM_STAN, #itemUnit# AS ITEM_UNIT, #itemCost# AS ITEM_COST,	
						#type1ApplFlagYN# AS TYPE1_APPL_FLAG,  
						#type2ApplFlagYN# AS TYPE2_APPL_FLAG,
						#type3ApplFlagYN# AS TYPE3_APPL_FLAG,
						#type4ApplFlagYN# AS TYPE4_APPL_FLAG,
						#type5ApplFlagYN# AS TYPE5_APPL_FLAG,
						#type6ApplFlagYN# AS TYPE6_APPL_FLAG,
						#type7ApplFlagYN# AS TYPE7_APPL_FLAG,
						#type8ApplFlagYN# AS TYPE8_APPL_FLAG,
						#type9ApplFlagYN# AS TYPE9_APPL_FLAG,
						#type10ApplFlagYN# AS TYPE10_APPL_FLAG,
						#type11ApplFlagYN# AS TYPE11_APPL_FLAG,
						#type12ApplFlagYN# AS TYPE12_APPL_FLAG,
						#useFlag# AS USE_FLAG,
						#groupCodeN# AS GROUP_CODE,
						#upperGroupCodeN# AS UPPER_GROUP_CODE,
						#atchFileId# AS ATCH_FILE_ID,
						#itemDetail# AS ITEM_DETAIL,
                     	#itemPurpose# AS ITEM_PURPOSE,
                     	#itemStockType# AS ITEM_STOCK_TYPE
						<isNotEmpty property="itemCodeNum">
							,#itemCodeNum# item_code_num
						</isNotEmpty>
						<isEmpty property="itemCodeNum">
							,(SELECT MAX(ITEM_CODE_NUM)+1 FROM T_ITEM_CODE WHERE ITEM_CODE = #itemCodeN#) item_code_num
						</isEmpty>
				FROM DUAL) B
		ON (A.ITEM_CODE = B.ITEM_CODE AND A.ITEM_CODE_NUM = B.ITEM_CODE_NUM)
		WHEN MATCHED THEN 
			UPDATE SET 
				A.ITEM_NAME = B.ITEM_NAME,
				A.ITEM_UNIT = B.ITEM_UNIT,
				A.ITEM_STAN = B.ITEM_STAN,
				A.PRICE	 = B.ITEM_COST,
				A.TYPE1_APPL_FLAG = B.TYPE1_APPL_FLAG,
				A.TYPE2_APPL_FLAG = B.TYPE2_APPL_FLAG,
				A.TYPE3_APPL_FLAG = B.TYPE3_APPL_FLAG,
				A.TYPE4_APPL_FLAG = B.TYPE4_APPL_FLAG,
				A.TYPE5_APPL_FLAG = B.TYPE5_APPL_FLAG,
				A.TYPE6_APPL_FLAG = B.TYPE6_APPL_FLAG,
				A.TYPE7_APPL_FLAG = B.TYPE7_APPL_FLAG,
				A.TYPE8_APPL_FLAG = B.TYPE8_APPL_FLAG,
				A.TYPE9_APPL_FLAG = B.TYPE9_APPL_FLAG,
				A.TYPE10_APPL_FLAG = B.TYPE10_APPL_FLAG,
				A.TYPE11_APPL_FLAG = B.TYPE11_APPL_FLAG,
				A.TYPE12_APPL_FLAG = B.TYPE12_APPL_FLAG,
				A.USE_FLAG = B.USE_FLAG,
				A.ATCH_FILE_ID = B.ATCH_FILE_ID,
				A.UPT_DT = SYSDATE,
				A.ITEM_DETAIL = B.ITEM_DETAIL,
                A.ITEM_PURPOSE = B.ITEM_PURPOSE,
                A.ITEM_STOCK_TYPE = B.ITEM_STOCK_TYPE
		WHEN NOT MATCHED THEN
			INSERT (A.ITEM_CODE, A.ITEM_NAME, A.ITEM_UNIT, A.ITEM_STAN, A.PRICE ,
					A.TYPE1_APPL_FLAG,
					A.TYPE2_APPL_FLAG,
					A.TYPE3_APPL_FLAG,
					A.TYPE4_APPL_FLAG,
					A.TYPE5_APPL_FLAG,
					A.TYPE6_APPL_FLAG,
					A.TYPE7_APPL_FLAG,
					A.TYPE8_APPL_FLAG,
					A.TYPE9_APPL_FLAG,
					A.TYPE10_APPL_FLAG,
					A.TYPE11_APPL_FLAG,
					A.TYPE12_APPL_FLAG,
					A.USE_FLAG,
					A.REG_DT,
					A.UPT_DT,
					A.GROUP_CODE,
					A.UPPER_GROUP_CODE,
					A.ATCH_FILE_ID,
					A.ITEM_CODE_NUM,
					A.ITEM_DETAIL,
					A.ITEM_PURPOSE,
					A.ITEM_STOCK_TYPE
					)
			VALUES (B.ITEM_CODE, B.ITEM_NAME, B.ITEM_UNIT, B.ITEM_STAN,B.ITEM_COST ,
					B.TYPE1_APPL_FLAG,
					B.TYPE2_APPL_FLAG,
					B.TYPE3_APPL_FLAG,
					B.TYPE4_APPL_FLAG,
					B.TYPE5_APPL_FLAG,
					B.TYPE6_APPL_FLAG,
					B.TYPE7_APPL_FLAG,
					B.TYPE8_APPL_FLAG,
					B.TYPE9_APPL_FLAG,
					B.TYPE10_APPL_FLAG,
					B.TYPE11_APPL_FLAG,
					B.TYPE12_APPL_FLAG,
					B.USE_FLAG,
					SYSDATE,
					SYSDATE,
					B.GROUP_CODE,
					B.UPPER_GROUP_CODE,
					B.ATCH_FILE_ID,
					B.ITEM_CODE_NUM,
					B.ITEM_DETAIL,
					B.ITEM_PURPOSE,
					B.ITEM_STOCK_TYPE
					)
	</statement>	
	
	<!-- 창고정보 데이터 리스트-->
	<select id="wareHouseDataList" resultClass="wareHouseSearchVO" parameterClass="wareHouseSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				SELECT wh_code AS "whCode",
						wh_name AS "whName",
						admin_dept AS "adminDept",
						admin_name AS "adminName",
						admin_telno AS "adminTelno",
						addr AS "addr",
						lon AS "lon",
						lat AS "lat",
						cty_code as "ctyCode",
						use_flag as "useFlag"
				  FROM t_warehouse			
				  WHERE wh_code is not null
				  <isNotEmpty property="whName">
				  AND wh_name like '%'||#whName#||'%'
				  </isNotEmpty>
				order by to_number(wh_code) asc
			/* 구현 Sql */
				) ALL_LIST
				)
		 WHERE  RNUM  &gt; #firstIndex#
			AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#	
	</select>
	
	<!-- 창고정보 데이터 리스트 카운트-->
	<select id="wareHouseDataListCnt" resultClass="int" parameterClass="wareHouseSearchVO">
		SELECT count(*) as totcnt
		  FROM t_warehouse			
		  WHERE wh_code is not null
		  <isNotEmpty property="whName">
		  AND wh_name like '%'||#whName#||'%'
		  </isNotEmpty>
	</select>
	
	<!-- 지역코드를 가져온다. -->
	<select id="ctyCode" resultClass="java.util.HashMap">
		select do_code VALUE, 
			  cty_code as CTYCODE,
				do_name||' '||cty_name CAPTION 
		from t_area
		where cty_use='Y'
		order by do_code asc
	</select>
	
	<!-- 지역코드를 가져온다. -->
	<select id="wareHousectyCode" resultClass="java.util.HashMap">
		select cty_code VALUE, 
			  do_name||' '||cty_name CAPTION 
		 from t_area
		where cty_use='Y'
		order by do_code asc
	</select>
	





				
	<!-- merge into 방제물품 창고현황 -->
	<statement id="mergeWareHouse" parameterClass="wareHouseSearchVO">
		MERGE INTO T_WAREHOUSE A
		USING ( 
			SELECT  #whCode# AS WH_CODE, 
					#whName# AS WH_NAME, 
					#adminDept# AS ADMIN_DEPT, 
					#adminName# as ADMIN_NAME, 
					#adminTelno# as ADMIN_TELNO, 
					#addr# AS ADDR,
					#lon# AS LON, 
					#lat# as LAT, 
					#ctyCode# as CTY_CODE, 
					#useFlag# as USE_FLAG,
					#riverDiv# as RIVER_DIV,
					#adminNameSub# as ADMIN_NAME_SUB,
					#adminDeptSub# as ADMIN_DEPT_SUB
					
				FROM DUAL) B
		ON (A.WH_CODE = B.WH_CODE)
		WHEN MATCHED THEN
			UPDATE SET
				A.WH_NAME		= B.WH_NAME,
				A.ADMIN_DEPT	= B.ADMIN_DEPT,
				A.ADMIN_NAME	= B.ADMIN_NAME,
				A.ADMIN_TELNO	= B.ADMIN_TELNO,
				A.ADDR			= B.ADDR,
				A.LON			= B.LON,
				A.LAT			= B.LAT,
				A.CTY_CODE		= B.CTY_CODE,
				A.USE_FLAG		= B.USE_FLAG,
				A.ADMIN_NAME_SUB = B.ADMIN_NAME_SUB,
				A.UPT_DT		 = SYSDATE,
				A.ADMIN_DEPT_SUB = B.ADMIN_DEPT_SUB
		WHEN NOT MATCHED THEN
			INSERT (
				A.WH_CODE, 
				A.WH_NAME, 
				A.ADMIN_DEPT, 
				A.ADMIN_NAME, 
				A.ADMIN_TELNO, 
				A.ADDR, 
				A.LON, 
				A.LAT, 
				A.CTY_CODE,
				A.USE_FLAG,
				A.RIVER_DIV,
				A.ADMIN_NAME_SUB,
				A.REG_DT,
				A.ADMIN_DEPT_SUB
				)
			VALUES (
				B.WH_CODE, 
				B.WH_NAME, 
				B.ADMIN_DEPT, 
				B.ADMIN_NAME, 
				B.ADMIN_TELNO, 
				B.ADDR, 
				B.LON, 
				B.LAT, 
				B.CTY_CODE,
				B.USE_FLAG,
				B.RIVER_DIV,
				B.ADMIN_NAME_SUB,
				SYSDATE,
				B.ADMIN_DEPT_SUB
				)
	</statement>
	
	<select id="CalcTotalCost" parameterClass="itemCalcSearchVO" resultClass="itemCalcPreVO">
		SELECT 
			<isEqual property="calcOption" compareValue="itemStor">
				STOR_DATE date_
			 ,  STOR_DESC desc_
			 ,  STOR_AMT  amt
			 ,  STOR_TIME time_
			 </isEqual>
			 <isNotEqual property="calcOption" compareValue="itemStor">
				RELE_DATE  date_
			 ,  RELE_DESC  desc_
			 ,  RELE_AMT	amt
			 ,  RELE_TIME  time_
			 </isNotEqual>
			 ,  REG_ID	reg_id
			 ,  A.WH_CODE  wh_code
			 ,  A.ITEM_CODE item_code
			 , B.ITEM_NAME  item_name
			 , B.ITEM_UNIT item_unit
			 , B.USE_FLAG use_flag
			 <isEqual property="calcOption" compareValue="itemStor">
			 , ( A.STOR_AMT * B.PRICE) item_price
			 </isEqual>
			  <isNotEqual property="calcOption" compareValue="itemStor">
			 , ( A.RELE_AMT * B.PRICE) item_price
			 </isNotEqual>  
		FROM	T_ITEM_CODE B,
			  <isEqual property="calcOption" compareValue="itemStor">
				T_ITEM_STOR A
			  </isEqual>
			  <isNotEqual property="calcOption" compareValue="itemStor">
				T_ITEM_RELE A
			  </isNotEqual>
		WHERE A.ITEM_CODE = B.ITEM_CODE
		AND A.item_code_num = B.item_code_num
		<isEqual property="calcOption" compareValue="itemStor">
		AND STOR_DATE BETWEEN #costSdate# AND #costEdate#
		</isEqual>
		<isNotEqual property="calcOption" compareValue="itemStor">
		AND RELE_DATE BETWEEN #costSdate# AND #costEdate#
		</isNotEqual>
	</select>
	<insert id="insertWareHouseItemCalcSave" parameterClass="ItemCalcSearchVO">
	 INSERT INTO T_ITEM_CALC(CALC_SEQ,CALC_SDATE,CALC_EDATE,CALC_DIV,ITEM_COST,TOT_COST)
	 VALUES(
				'0' 
			 , #costSdate#
			 , #costEdate#
			 , #calcDiv#
			 , #totalCost#
			 , #totalCost#
		  )
	</insert>
	

	
	<select id="WareHouseCalcTotalList" parameterClass="ItemCalcSearchVO" resultClass="ItemCalcSearchVO">
		SELECT * 
		FROM(
			  SELECT	CALC_SEQ  calc_seq
					 , CALC_SDATE costSdate
					 , CALC_EDATE costEdate
					 , CALC_DIV costDiv
					 , ITEM_COST item_cost
					 , TOT_COST totalCost
					 , ROWNUM RN
			  FROM T_ITEM_CALC
			  WHERE CALC_DIV LIKE '%'|| #calcTitle# ||'%'
			  <![CDATA[
			  AND CALC_SDATE >= #costSdate# 
			  AND CALC_EDATE <= #costEdate# 
			  ]]>
			  ORDER BY CALC_SEQ DESC
			  ) 
		WHERE RN BETWEEN ((#pageIndex#-1)*#pageSize#) AND ((#pageIndex#-1) * #pageSize#)+#pageSize#
	</select>
	
	<select id="WareHouseCalcTotalCnt" parameterClass="ItemCalcSearchVO" resultClass="java.lang.Integer">
		 SELECT	COUNT(*)
		 FROM T_ITEM_CALC
		 WHERE CALC_DIV LIKE '%'|| #calcTitle# ||'%'
		 <![CDATA[
		 AND CALC_SDATE >= #costSdate# 
		 AND CALC_EDATE <= #costEdate# 
		 ]]>
	</select>
	
	<select id="getcalcItemPrintInfo" parameterClass="ItemCalcVO" resultClass="ItemCalcPreVO">
	  SELECT
			SUBSTR(#costSdate#,0,4) ||'/'||
			SUBSTR(#costSdate#,5,2) ||'/'||
			SUBSTR(#costSdate#,7,2) sdate
		 , SUBSTR(#costEdate#,0,4) ||'/'||
			SUBSTR(#costEdate#,5,2) ||'/'||
			SUBSTR(#costEdate#,7,2) edate
		 , ITEM_NAME  item_name
		 , PRICE price
		 , RELE_AMT amt
		 , ITEM_UNIT item_unit
		 , (RELE_AMT * PRICE) item_price
	 FROM	T_ITEM_CODE B,
			T_ITEM_RELE A
	 WHERE A.ITEM_CODE = B.ITEM_CODE
	 AND A.item_code_num = B.item_code_num
	 AND RELE_DATE BETWEEN #costSdate# AND #costEdate#
	 GROUP BY ITEM_NAME, PRICE, RELE_AMT, RELE_DESC, ITEM_UNIT, (RELE_AMT * PRICE)
	 </select>
	
	<select id="warehouseItemHistory" parameterClass="ItemCodeSearchVO" resultClass="ItemCodeSearchVO" >
		SELECT * 
		FROM (
				SELECT 
					 A.WH_CODE whCode, A.WH_NAME whName, B.RELE_DATE ordr_date, B.RELE_AMT amt, D.ITEM_CODE itemCode,D.ITEM_NAME itemName, D.ITEM_STAN itemStan,D.ITEM_UNIT itemUnit,D.PRICE price,(SELECT 'RELE' FROM DUAL) status, D.item_code_num as itemCodeNum
				FROM T_WAREHOUSE A , T_ITEM_RELE B, T_ITEM_CODE D
				WHERE A.WH_CODE = B.WH_CODE
				AND B.ITEM_CODE = D.ITEM_CODE
				AND B.item_code_num = D.item_code_num
				AND A.WH_CODE = #whCode#
				AND D.ITEM_CODE = #itemCode#
				AND D.item_code_num = #itemCodeNum#
					 UNION  ALL
				SELECT 
					 A.WH_CODE whCode, A.WH_NAME whName, B.STOR_DATE ordr_date, B.STOR_AMT amt, D.ITEM_CODE itemCode, D.ITEM_NAME itemName, D.ITEM_STAN itemStan, D.ITEM_UNIT itemUnit, D.PRICE price, (SELECT 'STOR' FROM DUAL) status, D.item_code_num as itemCodeNum,
				FROM T_WAREHOUSE A , T_ITEM_STOR B, T_ITEM_CODE D
				WHERE A.WH_CODE = B.WH_CODE
				AND B.ITEM_CODE = D.ITEM_CODE
				AND B.item_code_num = D.item_code_num
				AND A.WH_CODE = #whCode#
				AND D.ITEM_CODE = #itemCode#
				AND D.item_code_num = #itemCodeNum#
			)ORDER BY ORDR_DATE DESC	
	</select>
	
	<!-- 윤일권 수정 시작 -->
	
	<!-- 방제물품 창고관리 목록-->
	<select id="getWareHouseManageList" resultClass="WareHouseManageSearchVO" parameterClass="WareHouseManageSearchVO">
		SELECT * 
		  FROM (SELECT ROWNUM RNUM,
						ALL_LIST.* 
				  FROM (SELECT A.wh_code		AS "whCode",
								A.wh_name		AS "whName",
								B.dept_name	AS "adminDept",
								C.member_name	AS "adminName",
								A.admin_telno	AS "adminTelno",
								A.addr			AS "addr",
								A.lon			AS "lon",
								A.lat			AS "lat",
								A.cty_code		AS "ctyCode",
								A.river_div		AS "riverDiv",
								A.use_flag		AS "useFlag"
						  FROM T_WAREHOUSE_DEV A, T_DEPT_INFO B, T_MEMBER C
						 WHERE A.admin_dept = B.DEPT_CODE(+)
							AND A.admin_name = C.MEMBER_ID(+)
							AND A.wh_code is not null
							AND A.DEL_YN = 'N'
						 <isNotEmpty property="searchWhName">
							AND A.wh_name LIKE '%'||#searchWhName#||'%'
						 </isNotEmpty>
						 <isNotEmpty property="searchDeptName">
							AND B.dept_name LIKE '%'||#searchDeptName#||'%'
						 </isNotEmpty>
						 ORDER BY A.UPT_DT DESC
						) ALL_LIST
				)
		 <![CDATA[	
		 WHERE  RNUM > #firstIndex#
			AND  RNUM <= #firstIndex# + #recordCountPerPage#
		 ]]>	
	</select>
	
	<!-- 방제물품 창고관리 목록 카운트-->
	<select id="getWareHouseManageListCnt" resultClass="int" parameterClass="WareHouseManageSearchVO">
		SELECT COUNT(*) AS TOTCNT
		  FROM T_WAREHOUSE_DEV A, T_DEPT_INFO B, T_MEMBER C
		 WHERE A.admin_dept = B.DEPT_NO(+)
			AND A.admin_name = C.MEMBER_ID(+)
			AND A.wh_code is not null
			AND A.DEL_YN = 'N'
			<isNotEmpty property="searchWhName">
			AND A.wh_name LIKE '%'||#searchWhName#||'%'
			</isNotEmpty>
			<isNotEmpty property="searchDeptName">
			AND B.dept_name LIKE '%'||#searchDeptName#||'%'
			</isNotEmpty>
	</select>
	
	<!-- 방제물품 창고관리 창고등록 -->
	<insert id="insertWareHouseManage" parameterClass="wareHouseVO">
		<selectKey keyProperty="warehouseSeq" resultClass="java.lang.String">
			SELECT LPAD(SEQ_T_WAREHOUSE.NEXTVAL,3,'0') FROM DUAL
		</selectKey>
		INSERT INTO T_WAREHOUSE_DEV (
			WH_CODE
			,WH_NAME
			,ADMIN_DEPT
			,ADMIN_NAME
			,SUB_DEPT
			,SUB_NAME
			,ADMIN_TELNO
			,ZIP_CODE
			,ADDR
			,ADDR_DETAIL
			,LON
			,LAT			
			,USE_FLAG
			,RIVER_DIV
			,DEL_YN
			,REG_DT
			,UPT_DT
		)			
		VALUES ( 
			 'WH'|| (SELECT DO_CODE
						FROM ZIPCODE
					  WHERE ZIPCODE = #zipcode#
						AND ROWNUM = 1) ||#warehouseSeq#
			,#whName#
			,#adminDept#
			,#adminName#
			,#subDept#
			,#subName#
			,#adminTelno#
			,#zipcode#
			,#addr#
			,#addrDetail#
			,#lon#
			,#lat#
			,#useFlag#
			,#riverDiv#
			,'N'
			,SYSDATE
			,SYSDATE
		 )
	</insert>
	
	<select id="wareHouseManageDeptUpper" resultClass="java.util.HashMap">
		SELECT A.UPPER_DEPT_CODE AS VALUE, 
				B.DEPT_NAME	 AS CAPTION
		  FROM T_DEPT_INFO A, T_DEPT_INFO B
		 WHERE A.UPPER_DEPT_CODE IN (SELECT DEPT_CODE
									FROM T_DEPT_INFO
								  WHERE UPPER_DEPT_CODE = '0')
			AND A.UPPER_DEPT_CODE = B.DEPT_CODE
		 GROUP BY A.UPPER_DEPT_CODE, B.DEPT_NAME
		 ORDER BY A.UPPER_DEPT_CODE 
	</select>
	
	<select id="wareHouseManageDeptAdmin" parameterClass="deptVO" resultClass="java.util.HashMap">
		SELECT  A.DEPT_CODE	AS VALUE
				,A.DEPT_NAME AS CAPTION
		  FROM T_DEPT_INFO A
		 WHERE A.UPPER_DEPT_CODE != '0'
			AND A.UPPER_DEPT_CODE = #upperDeptNo#
		 ORDER BY A.DEPT_CODE ASC
	</select>
	
	
	
	<select id="wareHouseManageAdminName" parameterClass="memberVO" resultClass="java.util.HashMap">
		SELECT MEMBER_ID								  AS VALUE,
				'('||GRADE_NAME||')' || ' ' || MEMBER_NAME AS CAPTION
		  FROM T_MEMBER A
		 WHERE A.DEPT_CODE = #deptNo#
		 ORDER BY MEMBER_NAME, MEMBER_ID ASC
	</select>
	
	<select id="getWareHouseManageDetail" parameterClass="wareHouseVO" resultClass="wareHouseVO">
		SELECT A.WH_CODE			AS "whCode",
				A.WH_NAME			AS "whName",
				A.ADMIN_DEPT		 AS "adminDept",
				B.DEPT_NAME		  AS "adminDeptName",
				A.ADMIN_NAME		 AS "adminName",
				D.MEMBER_NAME		AS "adminMemberName",
				A.SUB_DEPT			AS "subDept",
				C.DEPT_NAME		  AS "subDeptName",
				A.SUB_NAME			AS "subName",
				E.MEMBER_NAME		AS "subMemberName",
				A.ADMIN_TELNO		AS "adminTelno",
				A.ZIP_CODE			AS "zipCode",
				A.ADDR				AS "addr",
				A.ADDR_DETAIL		AS "addrDetail",
				A.LON				AS "lon",
				A.LAT				AS "lat",
				A.RIVER_DIV		  AS "riverDiv",
				A.USE_FLAG			AS "useFlag"
		  FROM T_WAREHOUSE_DEV A, 
				T_DEPT_INFO B, T_DEPT_INFO C, 
				T_MEMBER D, T_MEMBER E
		 WHERE A.ADMIN_DEPT = B.DEPT_CODE(+)
			AND A.SUB_DEPT	= C.DEPT_CODE(+)
			AND A.ADMIN_NAME = D.MEMBER_ID(+)
			AND A.SUB_NAME	= E.MEMBER_ID(+)
			AND A.WH_CODE	= #whCode#
	</select>
	
	
	<!-- 창고 수정-->
	<update id="updateWareHouseManage" parameterClass="wareHouseVO" >
		UPDATE T_WAREHOUSE_DEV
		SET	WH_NAME		  = #whName#,
				ADMIN_DEPT		= #adminDept#,
				ADMIN_NAME		= #adminName#,
				SUB_DEPT		= #subDept#,
				SUB_NAME		= #subName#,
				ADMIN_TELNO		= #adminTelno#,
				ZIP_CODE		 = #zipcode#,
				ADDR			= #addr#,
				ADDR_DETAIL		= #addrDetail#,
				LON				= #lon#,
				LAT				= #lat#,
				USE_FLAG		= #useFlag#,
				RIVER_DIV		= #riverDiv#,
				UPT_DT			= SYSDATE
		WHERE  WH_CODE = #whCode#
	</update>
	
	<!-- 창고 삭제 -->
	<update id="deleteWareHouseManage" parameterClass="wareHouseVO" >
		UPDATE T_WAREHOUSE_DEV
		SET	DEL_YN = 'Y',
				UPT_DT = SYSDATE
		WHERE  WH_CODE = #deleteWhCode#
	</update>
	
	
	<!-- 방제물품 물품관리 목록-->
	<select id="getItemManageList" resultClass="ItemManageSearchVO" parameterClass="ItemManageSearchVO">
		SELECT * 
		  FROM (SELECT ROWNUM RNUM,
						ALL_LIST.* 
				  FROM (SELECT item_code							as itemCode,
								item_name							as itemName,
								item_unit							as itemUnit,
								item_stan							as itemStan,
								nvl(type1_appl_flag,'N')			as type1ApplFlag,
								nvl(type2_appl_flag,'N')			as type2ApplFlag,
								nvl(type3_appl_flag,'N')			as type3ApplFlag,
								nvl(type4_appl_flag,'N')			as type4ApplFlag,
								nvl(type5_appl_flag,'N')			as type5ApplFlag,
								nvl(type6_appl_flag,'N')			as type6ApplFlag,
								nvl(type7_appl_flag,'N')			as type7ApplFlag,
								nvl(type8_appl_flag,'N')			as type8ApplFlag,
								nvl(type9_appl_flag,'N')			as type9ApplFlag,
								nvl(type10_appl_flag,'N')			as type10ApplFlag,
								nvl(type11_appl_flag,'N')			as type11ApplFlag,
								nvl(type12_appl_flag,'N')			as type12ApplFlag,
								A.use_flag							as useFlag,
								A.price								as price,
								A.reg_dt								as regDt,
								A.upt_dt								as uptDt,
								C.GROUP_NAME || ' > ' ||B.GROUP_NAME as groupCode
						  FROM T_ITEM_CODE A, T_ITEM_GROUP B, T_ITEM_GROUP C
						 WHERE A.GROUP_CODE = B.GROUP_CODE(+)
							AND A.UPPER_GROUP_CODE = C.GROUP_CODE(+) 
							AND A.ITEM_CODE IS NOT NULL
							AND A.UPPER_GROUP_CODE IS NOT NULL
						 <isNotEmpty property="searchUpperGroupCode">
							AND A.upper_group_code = #searchUpperGroupCode#
						 </isNotEmpty>
						 <isNotEmpty property="searchGroupCode">
							AND A.group_code = #searchGroupCode#
						 </isNotEmpty>
						 ORDER BY A.UPT_DT DESC
						) ALL_LIST
				)
		 <![CDATA[	
		 WHERE  RNUM > #firstIndex#
			AND  RNUM <= #firstIndex# + #recordCountPerPage#
		 ]]>	
	</select>
	
	<!-- 방제물품 물품관리 목록 카운트-->
	<select id="getItemManageListCnt" resultClass="int" parameterClass="ItemManageSearchVO">
		SELECT COUNT(*) AS TOTCNT
		  FROM T_ITEM_CODE A, T_ITEM_GROUP B, T_ITEM_GROUP C
		 WHERE A.GROUP_CODE = B.GROUP_CODE(+)
			AND A.UPPER_GROUP_CODE = C.GROUP_CODE(+) 
			AND A.ITEM_CODE IS NOT NULL
			AND A.UPPER_GROUP_CODE IS NOT NULL
			<isNotEmpty property="searchUpperGroupCode">
			AND A.upper_group_code = #searchUpperGroupCode#
			</isNotEmpty>
			<isNotEmpty property="searchGroupCode">
			AND A.group_code = #searchGroupCode#
			</isNotEmpty>
	</select>
	
	
	<!-- 방제물품 물품관리 상세-->
	<select id="getItemManageDetail" resultClass="ItemCodeVO" parameterClass="ItemCodeVO">
		SELECT A.item_code				  as itemCode,
				A.item_name				  as itemName,
				A.item_unit				  as itemUnit,
				A.item_stan				  as itemStan,
				nvl(type1_appl_flag,'N')  as type1ApplFlag,
				nvl(type2_appl_flag,'N')  as type2ApplFlag,
				nvl(type3_appl_flag,'N')  as type3ApplFlag,
				nvl(type4_appl_flag,'N')  as type4ApplFlag,
				nvl(type5_appl_flag,'N')  as type5ApplFlag,
				nvl(type6_appl_flag,'N')  as type6ApplFlag,
				nvl(type7_appl_flag,'N')  as type7ApplFlag,
				nvl(type8_appl_flag,'N')  as type8ApplFlag,
				nvl(type9_appl_flag,'N')  as type9ApplFlag,
				nvl(type10_appl_flag,'N') as type10ApplFlag,
				nvl(type11_appl_flag,'N') as type11ApplFlag,
				nvl(type12_appl_flag,'N') as type12ApplFlag,
				A.use_flag					as useFlag,
				A.price					 as price,
				A.reg_dt					as regDt,
				A.upt_dt					as uptDt,
				B.group_name				as groupCode,
				C.group_name				as upperGroupCode,
				A.item_code_num as itemCodeNum
		  FROM T_ITEM_CODE A, T_ITEM_GROUP B, T_ITEM_GROUP C
		 WHERE A.GROUP_CODE = B.GROUP_CODE(+)
			AND A.UPPER_GROUP_CODE = C.GROUP_CODE(+)
			AND A.item_code = #itemCode#
			AND A.item_code_num = #itemCodeNum#
	</select>
	
	<statement id="getItemCodeNextCode" parameterClass="ItemCodeVO" resultClass="String">
	SELECT LPAD(SUBSTR(MAX(ITEM_CODE), 5,3) + 1 , 3, 0)
	  FROM T_ITEM_CODE
	 WHERE GROUP_CODE = #groupCode#
	</statement>
	
	<!-- 방제물품 물품관리 물품등록 -->
	<insert id="insertItemManage" parameterClass="ItemCodeVO">
		INSERT INTO T_ITEM_CODE (
			ITEM_CODE, 
			ITEM_NAME,
			ITEM_UNIT, 
			ITEM_STAN,
			TYPE1_APPL_FLAG, 
			TYPE2_APPL_FLAG, 
			TYPE3_APPL_FLAG, 
			TYPE4_APPL_FLAG, 
			TYPE5_APPL_FLAG, 
			TYPE6_APPL_FLAG, 
			TYPE7_APPL_FLAG, 
			TYPE8_APPL_FLAG, 
			TYPE9_APPL_FLAG, 
			TYPE10_APPL_FLAG, 
			TYPE11_APPL_FLAG, 
			TYPE12_APPL_FLAG, 
			USE_FLAG,
			PRICE,
			REG_DT,
			UPT_DT,
			item_code_num
		) 
		VALUES 
		(	
			#itemCode#,
			#itemName#,
			#itemUnit#,
			#itemStan#,
			#type1ApplFlag#,
			#type2ApplFlag#,
			#type3ApplFlag#,
			#type4ApplFlag#,
			#type5ApplFlag#,
			#type6ApplFlag#,
			#type7ApplFlag#,
			#type8ApplFlag#,
			#type9ApplFlag#,
			#type10ApplFlag#,
			#type11ApplFlag#,
			#type12ApplFlag#,
			#useFlag#,
			#price#,
			SYSDATE,
			SYSDATE,
			(select COUNT(*)+1 from T_ITEM_CODE WHERE ITEM_CODE =	#itemCode#)
		 )
	</insert>
	
	<!-- 물품 대분류코드를 가져온다. -->
	<select id="itemManageUpperGroupCode" resultClass="java.util.HashMap">
		SELECT GROUP_CODE AS VALUE,
				GROUP_NAME AS CAPTION
		  FROM T_ITEM_GROUP
		 WHERE UPPER_GROUP_CODE IS NULL OR UPPER_GROUP_CODE = ''
			AND USE_FLAG = 'Y'
		 ORDER BY UPT_DT ASC
	</select>
	
	<!-- 물품 중분류코드를 가져온다. -->
	<select id="itemManageGroupCode" resultClass="java.util.HashMap" parameterClass="ItemCodeVO">
		SELECT GROUP_CODE AS VALUE,
				GROUP_NAME AS CAPTION
		  FROM T_ITEM_GROUP
		 WHERE UPPER_GROUP_CODE = #upperGroupCode#
			AND USE_FLAG = 'Y'
		 ORDER BY UPT_DT ASC
	</select>
	
	<!-- 물품코드를 가져온다. 대,중분류 삭제 2016.12.22 KANG JINAM-->
	<select id="itemConditionCode" resultClass="java.util.HashMap" parameterClass="itemCodeVO">
		SELECT ITEM_CODE || '-' || ITEM_CODE_NUM AS VALUE,
				ITEM_NAME AS CAPTION
		  FROM T_ITEM_CODE
		 WHERE USE_FLAG = 'Y'
		 ORDER BY ITEM_CODE ASC
	</select>
	
	<!-- 방제물품 물품관리 물품수정 -->
	<update id="updateItemManage" parameterClass="itemCodeVO">
		UPDATE T_ITEM_CODE
		SET	ITEM_NAME		= #itemName#,
				ITEM_UNIT		= #itemUnit#,
				ITEM_STAN		= #itemStan#,
				TYPE1_APPL_FLAG  = #type1ApplFlag#,
				TYPE2_APPL_FLAG  = #type2ApplFlag#,
				TYPE3_APPL_FLAG  = #type3ApplFlag#,
				TYPE4_APPL_FLAG  = #type4ApplFlag#,
				TYPE5_APPL_FLAG  = #type5ApplFlag#,
				TYPE6_APPL_FLAG  = #type6ApplFlag#,
				TYPE7_APPL_FLAG  = #type7ApplFlag#,
				TYPE8_APPL_FLAG  = #type8ApplFlag#,
				TYPE9_APPL_FLAG  = #type9ApplFlag#,
				TYPE10_APPL_FLAG = #type10ApplFlag#,
				TYPE11_APPL_FLAG = #type11ApplFlag#,
				TYPE12_APPL_FLAG = #type12ApplFlag#,
				USE_FLAG		 = #useFlag#,
				PRICE			= #price#,
				UPT_DT			= SYSDATE
		WHERE  ITEM_CODE		= #itemCode#
		AND   item_code_num		= #itemCodeNum#
	</update>
	
	<!-- 방제물품 코드관리 대분류목록 -->
	<select id="itemUpperGroupDataList" resultClass="ItemGroupSearchVO" parameterClass="ItemGroupSearchVO">
		SELECT ROWNUM RNUM,
				rownum num,
				ALL_LIST.* 
		FROM (SELECT GROUP_CODE				AS groupCode,
						GROUP_NAME			AS groupName,
						UPPER_GROUP_CODE	AS upperGroupCode,
						USE_FLAG			AS useFlag,
						REG_DT				AS regDt,
						UPT_DT				AS uptDt
				FROM T_ITEM_GROUP
				WHERE UPPER_GROUP_CODE IS NULL
				ORDER BY GROUP_CODE
				) ALL_LIST
	</select>
	
	<!-- 방제물품 코드관리 대분류목록 카운트-->
	<select id="itemUpperGroupDataListCnt" resultClass="int" parameterClass="ItemGroupSearchVO">
		SELECT COUNT(*) AS TOTCNT
		FROM T_ITEM_GROUP	
		WHERE UPPER_GROUP_CODE IS NULL
	</select>
	
	<!-- 방제물품 코드관리 중분류목록 -->
	<select id="itemGroupDataList" resultClass="ItemGroupSearchVO" parameterClass="ItemGroupSearchVO">
		SELECT * 
		FROM (SELECT ROWNUM RNUM,
						rownum num,
						ALL_LIST.*
				FROM (SELECT	A.GROUP_CODE	AS groupCode,
								A.GROUP_NAME	AS groupName,
								B.GROUP_NAME	AS upperGroupCode,
								A.USE_FLAG		AS useFlag,
								A.REG_DT		AS regDt,
								A.UPT_DT		AS uptDt
						FROM T_ITEM_GROUP A, T_ITEM_GROUP B
						WHERE A.UPPER_GROUP_CODE = B.GROUP_CODE 
							AND A.UPPER_GROUP_CODE IS NOT NULL
							<isNotEmpty property="searchUpperGroupCode">
							AND A.UPPER_GROUP_CODE = #searchUpperGroupCode#
							</isNotEmpty>
							ORDER BY A.GROUP_CODE, B.GROUP_CODE
						) ALL_LIST
				)
		<![CDATA[	
		WHERE  RNUM > #firstIndex#
			AND  RNUM <= #firstIndex# + #recordCountPerPage#
		]]>
	</select>
	
	<!-- 방제물품 코드관리 중분류목록 카운트-->
	<select id="itemGroupDataListCnt" resultClass="int" parameterClass="ItemGroupSearchVO">
		SELECT COUNT(*) AS TOTCNT	 
		FROM T_ITEM_GROUP A, T_ITEM_GROUP B
		WHERE A.UPPER_GROUP_CODE = B.GROUP_CODE 
			AND A.UPPER_GROUP_CODE IS NOT NULL
		<isNotEmpty property="searchUpperGroupCode">
			AND A.UPPER_GROUP_CODE = #searchUpperGroupCode#
		</isNotEmpty>
	</select>
	
	<!-- 방제물품 물품관리 물품수정 -->
	<update id="itemGroupModify" parameterClass="itemCodeGroupVO">
		UPDATE T_ITEM_GROUP
		SET GROUP_NAME		= #groupName#,
				USE_FLAG	= #useFlag#,
				UPT_DT		= SYSDATE
		WHERE GROUP_CODE	= #groupCode#
	</update>
	
	<!-- 방제물품 물품관리 물품등록 -->
	<insert id="itemUpperGroupInsert" parameterClass="itemCodeGroupVO">
		INSERT INTO T_ITEM_GROUP (
			GROUP_CODE,
			GROUP_NAME,
			USE_FLAG,
			REG_DT,
			UPT_DT
		)
		VALUES
		(
			UPPER(#groupCode#),
			#groupName#,
			#useFlag#,
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<statement id="getItemGroupNextCode" parameterClass="itemCodeGroupVO" resultClass="String">
		SELECT LPAD(SUBSTR(MAX(GROUP_CODE), 3,4) + 1 , 2,0)
		FROM T_ITEM_GROUP
		WHERE UPPER_GROUP_CODE = #upperGroupCode#
	</statement>	
	
	<select id="getMaxItemCode" parameterClass="itemCodeSearchVO" resultClass="String">
		SELECT LPAD(SUBSTR(MAX(ITEM_CODE), 5,7) + 1 , 3,0)
		FROM T_ITEM_CODE
		WHERE UPPER_GROUP_CODE = #upperGroupCode# AND ITEM_CODE_DET=#itemCodeDet#
	</select>
	
	<!-- 방제물품 물품관리 물품등록 -->
	<insert id="itemGroupInsert" parameterClass="itemCodeGroupVO">
		INSERT INTO T_ITEM_GROUP (
			GROUP_CODE,
			GROUP_NAME,
			UPPER_GROUP_CODE,
			USE_FLAG,
			REG_DT,
			UPT_DT
		)
		VALUES 
		(
			#groupCode#,
			#groupName#,
			#upperGroupCode#,
			#useFlag#,
			SYSDATE,
			SYSDATE
		)
	</insert>
	<!-- 방제물품 입출내역 목록-->
	<select id="getItemConditionManageList" resultClass="itemConditionSearchVO" parameterClass="itemConditionSearchVO">
		 SELECT *
		FROM (SELECT ROWNUM RNUM,
						ROWNUM as num,
						ALL_LIST.* 
				FROM (
						SELECT A.ITEM_CODE		AS itemCode,
								C.ITEM_NAME		AS itemName,
								C.ITEM_UNIT		AS itemUnit,
								C.ITEM_STAN		AS itemStan,
								A.ITEM_CNT		AS itemcnt,
								A.WH_CODE		AS whCode,
								D.WH_NAME		AS whName,
								A.ITEM_CODE_NUM AS itemCodeNum
						FROM (SELECT WH_CODE,
									ITEM_CODE,
									ITEM_CODE_NUM,
									SUM(ITEM_CNT) AS ITEM_CNT
								FROM T_ITEM_STOCK
								GROUP BY WH_CODE, ITEM_CODE,ITEM_CODE_NUM) A,
								(SELECT ITEM_CODE,
									ITEM_NAME,
									ITEM_UNIT,
									ITEM_STAN,
									GROUP_CODE,
									UPPER_GROUP_CODE,
									ITEM_CODE_NUM
								FROM T_ITEM_CODE) C,
								(SELECT WH_CODE,
									WH_NAME,
									ADMIN_DEPT,
									ADMIN_DEPT_SUB
								FROM T_WAREHOUSE) D
						WHERE A.ITEM_CODE = C.ITEM_CODE(+)
							AND A.WH_CODE = D.WH_CODE(+)
							AND A.item_code_num = C.item_code_num(+)
						<isNotEmpty property="searchItemCode">
							AND A.ITEM_CODE = #searchItemCode#
						</isNotEmpty>
						<isNotEmpty property="searchItemCodeNum">
							AND A.item_code_num = #searchItemCodeNum#
						</isNotEmpty>
						<isNotEqual property="roleCode" compareValue="ROLE_ADMIN">
							AND (D.ADMIN_DEPT = #deptNo#
								OR
								D.ADMIN_DEPT_SUB = #deptNo#
								)
						</isNotEqual>
						ORDER BY A.ITEM_CODE ASC
					) ALL_LIST
				)
		<![CDATA[
		WHERE  RNUM > #firstIndex#
			AND  RNUM <= #firstIndex# + #recordCountPerPage#
		]]>
	</select>	
	
	<!-- 방제물품  입출내역 카운트-->
	<select id="getItemConditionManageListCnt" resultClass="int" parameterClass="itemConditionSearchVO">
		SELECT COUNT(*) AS TOTCNT
		FROM (SELECT WH_CODE, 
						ITEM_CODE, 
						SUM(ITEM_CNT) AS ITEM_CNT,
						ITEM_CODE_NUM
				FROM T_ITEM_STOCK
				GROUP BY WH_CODE, ITEM_CODE,ITEM_CODE_NUM) A,
				(SELECT ITEM_CODE,
						ITEM_NAME,
						ITEM_UNIT,
						ITEM_STAN,
						ITEM_CODE_NUM
				FROM T_ITEM_CODE) C,
				(SELECT WH_CODE, 
						WH_NAME,
						ADMIN_DEPT,
						ADMIN_DEPT_SUB
				FROM T_WAREHOUSE) D
		WHERE A.ITEM_CODE = C.ITEM_CODE(+)
			AND A.item_code_num = C.item_code_num(+)
			AND A.WH_CODE = D.WH_CODE(+)
		<isNotEmpty property="searchItemCode">
			AND A.ITEM_CODE = #searchItemCode#
		</isNotEmpty>
        <isNotEmpty property="searchItemCodeNum">
          AND A.item_code_num = #searchItemCodeNum#
        </isNotEmpty>
		<isNotEqual property="roleCode" compareValue="ROLE_ADMIN">
			AND (D.ADMIN_DEPT = #deptNo#
				OR
				D.ADMIN_DEPT_SUB = #deptNo#
				)
		</isNotEqual>
	</select>	
	
	<!-- 담당창고 코드를 가져온다. -->
	<select id="getWareHouseCode" resultClass="java.util.HashMap" parameterClass="wareHouseVO">
		SELECT WH_CODE AS VALUE,
				WH_NAME AS CAPTION
		FROM T_WAREHOUSE_DEV
		<!-- 추후, 로그인한 직원의 담당부서로 검색 -->
		<!-- WHERE GROUP_CODE = #groupCode# -->
		ORDER BY WH_CODE ASC
	</select>
	
	<!-- 규격,단위를 가져온다. -->
	<select id="getItemDetailValue" resultClass="itemCodeVO" parameterClass="itemCodeVO">
		SELECT ITEM_UNIT AS itemUnit,
				ITEM_STAN AS itemStan
		FROM T_ITEM_CODE
		WHERE ITEM_CODE = #itemCode#
		and item_code_num=#itemCodeNum#
	</select>
	
	<!-- 물품입고 -->
	<insert id="insertItemConditionStor" parameterClass="itemCodeVO">
		INSERT INTO T_ITEM_STOR (
			STOR_DATE, 
			WH_CODE,
			ITEM_CODE,
			ITEM_CODE_NUM,
			STOR_TIME,
			STOR_AMT,
			REG_ID,
			STOR_DESC
		) VALUES (
			TO_CHAR(SYSDATE,'YYYYMMDD'),
			#whCode#,
			#itemCode#,
			#itemCodeNum#,
			TO_CHAR(SYSDATE,'HH24MISS'),
			#amt#,
			#regId#,
			#storDesc#
			)
	</insert>
	
	<!-- 방제물품 입출내역 출고 페이지-->
	<select id="getItemConditionReleDetail" resultClass="itemCodeVO" parameterClass="itemCodeVO">
		SELECT A.ITEM_CODE		AS itemCode,
				C.ITEM_NAME		AS itemName,
				C.ITEM_UNIT		AS itemUnit,
				C.ITEM_STAN		AS itemStan,
				A.ITEM_CNT		AS itemcnt,
				A.WH_CODE		AS whCode,
				D.WH_NAME		AS whName,
				E.GROUP_CODE	AS upperGroupCode,
				E.GROUP_NAME	AS upperGroupName,
				F.GROUP_CODE	AS groupCode,
				F.GROUP_NAME	AS groupName
		FROM (SELECT WH_CODE,
					ITEM_CODE,
					SUM(ITEM_CNT) AS ITEM_CNT
				FROM T_ITEM_STOCK
				GROUP BY WH_CODE, ITEM_CODE) A,
				(SELECT ITEM_CODE,
						ITEM_NAME,
						ITEM_UNIT,
						ITEM_STAN,
						GROUP_CODE,
						UPPER_GROUP_CODE
				FROM T_ITEM_CODE) C,
				(SELECT WH_CODE, 
						WH_NAME 
				FROM T_WAREHOUSE) D,
					T_ITEM_GROUP E,
					T_ITEM_GROUP F
		WHERE A.ITEM_CODE = C.ITEM_CODE(+)
			AND A.item_code_num = C.item_code_num(+)
			AND A.WH_CODE = D.WH_CODE(+)
			AND C.UPPER_GROUP_CODE = E.GROUP_CODE
			AND C.GROUP_CODE = F.GROUP_CODE
			AND A.ITEM_CODE = #itemCode#
			AND A.item_code_num = #itemCodeNum#
			AND A.WH_CODE = #whCode#
	</select>
	
	<!-- 물품출고 -->
	<insert id="insertItemConditionRele" parameterClass="itemCodeVO">
		INSERT INTO T_ITEM_RELE (
			RELE_DATE, 
			WH_CODE,
			ITEM_CODE,
			ITEM_CODE_NUM,
			RELE_TIME,
			RELE_AMT,
			REG_ID,
			RELE_DESC
		) VALUES (
			TO_CHAR(SYSDATE,'YYYYMMDD'),
			#whCode#,
			#itemCode#,
			#itemCodeNum#,
			TO_CHAR(SYSDATE,'HH24MISS'),
			#amt#,
			#regId#,
			#releDesc#
			)
	</insert>

	<!-- 정산목록 수계별 목록 -->
	<select id="itemCalculateRiverList" resultClass="ItemCodeSearchVO" parameterClass="ItemCodeSearchVO">
		SELECT * 
		FROM (SELECT ROWNUM RNUM,
					ROWNUM as num,
					ALL_LIST.* 
				FROM (
						SELECT C.RIVER_DIV AS riverDiv 
								,D.RIVER_NAME AS riverDivName
								,A.ITEM_CODE AS itemCode
								,A.ITEM_NAME itemName
								,SUM(B.ITEM_CNT)||' '|| MAX(A.ITEM_STAN)||CASE WHEN MAX(A.ITEM_UNIT) IS NOT NULL THEN ' ['||MAX(A.ITEM_UNIT)||']' END AS	amt
							FROM T_ITEM_CODE A, T_ITEM_STOCK B, T_WAREHOUSE C, T_RIVER_INFO D
							WHERE A.ITEM_CODE = B.ITEM_CODE
							AND A.ITEM_CODE_NUM=B.ITEM_CODE_NUM
							AND  A.USE_FLAG='Y'
							AND  B.WH_CODE = C.WH_CODE
							AND  C.RIVER_DIV = D.RIVER_DIV
							AND  C.USE_FLAG ='Y'
						<isNotEmpty property="searchRiverId">
						AND D.RIVER_DIV = #searchRiverId#
						</isNotEmpty>
						GROUP BY C.RIVER_DIV, A.ITEM_CODE, A.ITEM_NAME, D.RIVER_NAME
						ORDER BY C.RIVER_DIV ASC, A.ITEM_CODE ASC
					) ALL_LIST
				)
		<![CDATA[	
		WHERE RNUM > #firstIndex#
			AND RNUM <= #firstIndex# + #recordCountPerPage#
		]]>
	</select>	
	
	<!-- 정산목록 수계별 목록 카운트-->
	<select id="itemCalculateRiverListCnt" resultClass="int" parameterClass="ItemCodeSearchVO">
		SELECT COUNT(*) AS TOTCNT
		FROM (
			SELECT 1
			FROM T_ITEM_CODE A, T_ITEM_STOCK B, T_WAREHOUSE C, T_RIVER_INFO D
			WHERE A.ITEM_CODE = B.ITEM_CODE
				AND A.ITEM_CODE_NUM=B.ITEM_CODE_NUM
				AND  A.USE_FLAG='Y'
				AND  B.WH_CODE = C.WH_CODE
				AND  C.RIVER_DIV = D.RIVER_DIV
				AND  C.USE_FLAG ='Y'
			<isNotEmpty property="searchRiverId">
				AND C.RIVER_DIV = #searchRiverId#
			</isNotEmpty>
		GROUP BY C.RIVER_DIV, A.ITEM_CODE, A.ITEM_NAME, D.RIVER_NAME
		)
	</select>

	<!-- 정산목록 창고별 목록 -->
	<select id="itemCalculateWareHouseList" resultClass="ItemCodeSearchVO" parameterClass="ItemCodeSearchVO">
		SELECT * 
		FROM (SELECT ROWNUM RNUM,
					ROWNUM as num,
					ALL_LIST.* 
				FROM (
						SELECT
							C.WH_CODE  whCode
							,MAX(C.WH_NAME)  whName
							,D.RIVER_NAME AS riverDivName
							,C.RIVER_DIV AS riverDiv 
							,A.ITEM_CODE AS itemCode
							,A.ITEM_NAME itemName
							,SUM(B.ITEM_CNT)||' '|| MAX(A.ITEM_STAN)||CASE WHEN MAX(A.ITEM_UNIT) IS NOT NULL THEN ' ['||MAX(A.ITEM_UNIT)||']' END AS	amt
						FROM T_ITEM_CODE A, T_ITEM_STOCK B, T_WAREHOUSE C, T_RIVER_INFO D
						WHERE A.ITEM_CODE = B.ITEM_CODE
							AND A.ITEM_CODE_NUM=B.ITEM_CODE_NUM
							AND A.USE_FLAG='Y'
							AND B.WH_CODE = C.WH_CODE
							AND C.RIVER_DIV = D.RIVER_DIV
							AND C.USE_FLAG ='Y'
						<isNotEmpty property="searchRiverId">
							AND C.RIVER_DIV = #searchRiverId#
						</isNotEmpty>
						<isNotEmpty property="searchWhCode">
							AND C.WH_NAME LIKE '%'||#searchWhCode#||'%'
						</isNotEmpty>
						GROUP BY C.WH_CODE, C.RIVER_DIV, A.ITEM_CODE, A.ITEM_NAME, D.RIVER_NAME
						ORDER BY C.WH_CODE, c.RIVER_DIV ASC, A.ITEM_CODE ASC
					) ALL_LIST
				)
		<![CDATA[
		WHERE  RNUM > #firstIndex#
			AND  RNUM <= #firstIndex# + #recordCountPerPage#
		]]>
	</select>	

	<!-- 정산목록 창고별 목록 카운트-->
	<select id="itemCalculateWarehouseListCnt" resultClass="int" parameterClass="ItemCodeSearchVO">
		SELECT COUNT(*) AS TOTCNT 
		FROM 
			( SELECT  1
			FROM T_ITEM_CODE A, T_ITEM_STOCK B, T_WAREHOUSE C, T_RIVER_INFO D
			WHERE A.ITEM_CODE = B.ITEM_CODE
				AND A.ITEM_CODE_NUM=B.ITEM_CODE_NUM
				AND  A.USE_FLAG='Y'
				AND  B.WH_CODE = C.WH_CODE
				AND  C.RIVER_DIV = D.RIVER_DIV
				AND  C.USE_FLAG ='Y'
			<isNotEmpty property="searchRiverId">
				AND C.RIVER_DIV = #searchRiverId#
			</isNotEmpty>
			<isNotEmpty property="searchWhCode">
				AND C.WH_NAME LIKE '%'||#searchWhCode#||'%'
			</isNotEmpty>
			GROUP BY C.WH_CODE, C.RIVER_DIV, A.ITEM_CODE, A.ITEM_NAME, D.RIVER_NAME
			)
	</select>	

	<!-- 정산목록 물품별 목록 -->
	<select id="itemCalculateItemList" resultClass="ItemCodeSearchVO" parameterClass="ItemCodeSearchVO">
		SELECT * 
		FROM (SELECT ROWNUM RNUM,
						ROWNUM as num,
						ALL_LIST.*
				FROM (
						SELECT
							 A.ITEM_CODE AS itemCode
							,A.ITEM_NAME itemName
							,SUM(B.ITEM_CNT)||' '|| MAX(A.ITEM_STAN)||CASE WHEN MAX(A.ITEM_UNIT) IS NOT NULL THEN ' ['||MAX(A.ITEM_UNIT)||']' END AS	amtItem
						FROM T_ITEM_CODE A, T_ITEM_STOCK B, T_WAREHOUSE C
						WHERE A.ITEM_CODE = B.ITEM_CODE
							AND A.ITEM_CODE_NUM=B.ITEM_CODE_NUM
							AND A.USE_FLAG='Y'
							AND B.WH_CODE = C.WH_CODE
							AND C.USE_FLAG ='Y'
						<isNotEmpty property="searchItemName">
							AND A.ITEM_NAME like '%'||#searchItemName#||'%'
						</isNotEmpty>
						GROUP BY A.ITEM_CODE, A.ITEM_NAME
						ORDER BY A.ITEM_CODE ASC
						) ALL_LIST
				)
		<![CDATA[	
		WHERE RNUM > #firstIndex#
			AND RNUM <= #firstIndex# + #recordCountPerPage#
		]]>
	</select>	

	<!-- 정산목록 물품별 목록 카운트-->
	<select id="itemCalculateItemListCnt" resultClass="int" parameterClass="ItemCodeSearchVO">
		SELECT COUNT(*) AS TOTCNT
		  FROM (
				SELECT
					 A.ITEM_CODE AS itemCode
					,A.ITEM_NAME||CASE WHEN MAX(A.ITEM_UNIT) IS NOT NULL THEN ' ['||MAX(A.ITEM_UNIT)||']' END itemName
					,SUM(B.ITEM_CNT)||' '|| MAX(A.ITEM_STAN) AS	amt
				FROM T_ITEM_CODE A, T_ITEM_STOCK B, T_WAREHOUSE C
				WHERE A.ITEM_CODE = B.ITEM_CODE
				AND A.ITEM_CODE_NUM=B.ITEM_CODE_NUM
				AND  A.USE_FLAG='Y'
				AND  B.WH_CODE = C.WH_CODE
			GROUP BY A.ITEM_CODE, A.ITEM_NAME
			ORDER BY A.ITEM_CODE ASC
			)
	</select>	
	
	<!-- 방제물품 입출내역 물품별 상세 목록 -->
	<select id="getItemCalculateManageDetail" resultClass="ItemCodeSearchVO" parameterClass="ItemCodeSearchVO">
		SELECT *
		FROM (
				SELECT ROWNUM RNUM,
						ROWNUM as num,
						ALL_LIST.*
				FROM (
						SELECT
								A.WH_CODE AS WHCODE,
								B.WH_NAME AS WHNAME,
								A.ITEM_CODE AS ITEMCODE,
								C.ITEM_NAME AS ITEMNAME,
								A.ITEM_CNT AS ITEMCNT,
								DECODE(A.INOUT_TYPE,'I','입고','O','출고') AS CONDITION,
								TO_CHAR(A.INOUT_DATE,'YYYY/MM/DD') AS CONDITIONDATE,
								TO_CHAR(A.INOUT_DATE,'HH24:MI') AS CONDITIONTIME,
								A.item_code_num as itemCodeNum
						FROM
								T_ITEM_INOUT A,
								T_WAREHOUSE B,
								T_ITEM_CODE C
						WHERE A.WH_CODE =B.WH_CODE(+)
							AND A.ITEM_CODE = C.ITEM_CODE(+)
							AND A.ITEM_CODE_NUM=C.ITEM_CODE_NUM(+)
							AND A.ITEM_CODE = #itemCode#
							AND A.ITEM_CODE_NUM = #itemCodeNum#
							<isNotEmpty property="searchWhName">
							AND B.WH_NAME LIKE '%'||#searchWhName#||'%'
							</isNotEmpty>
							<isNotEmpty property="searchCondition">
							AND A.INOUT_TYPE = #searchCondition#
							</isNotEmpty>
							<isNotEmpty property="startDate">
							<![CDATA[
								AND A.INOUT_DATE >= TO_DATE(#startDate#,'YYYY/MM/DD')
							]]>
							</isNotEmpty>
							<isNotEmpty property="endDate">
							<![CDATA[
								AND A.INOUT_DATE <= TO_DATE(#endDate#,'YYYY/MM/DD')
							]]>
							</isNotEmpty>
						ORDER BY CONDITIONDATE DESC, CONDITIONTIME DESC
					) ALL_LIST
				)
		<![CDATA[
		WHERE  RNUM > #firstIndex#
			AND  RNUM <= #firstIndex# + #recordCountPerPage#
		]]>
	</select>
	
	<!-- 방제물품 입출내역 물품별 상세 목록 카운트-->
	<select id="getItemCalculateManageDetailCnt" resultClass="int" parameterClass="ItemCodeSearchVO">
		SELECT COUNT(*) AS TOTCNT
		FROM (
				SELECT
						A.WH_CODE AS WHCODE,
						B.WH_NAME AS WHNAME,
						A.ITEM_CODE AS ITEMCODE,
						C.ITEM_NAME AS ITEMNAME,
						A.ITEM_CNT AS ITEMCNT,
						DECODE(A.INOUT_TYPE,'I','입고','O','출고') AS CONDITION,
						TO_CHAR(A.INOUT_DATE,'YYYY/MM/DD') AS CONDITIONDATE,
						TO_CHAR(A.INOUT_DATE,'HH24:MI') AS CONDITIONTIME,
						A.item_code_num as itemCodeNum
				FROM
						T_ITEM_INOUT A,
						T_WAREHOUSE B,
						T_ITEM_CODE C
				WHERE A.WH_CODE =B.WH_CODE(+)
					AND A.ITEM_CODE = C.ITEM_CODE(+)
					AND A.item_code_num = C.item_code_num(+)
					AND A.ITEM_CODE = #itemCode#
					AND A.ITEM_CODE_NUM = #itemCodeNum#
				<isNotEmpty property="searchWhName">
					AND B.WH_NAME LIKE '%'||#searchWhName#||'%'
				</isNotEmpty>
				<isNotEmpty property="searchCondition">
					AND A.INOUT_TYPE = #searchCondition#
				</isNotEmpty>
				<isNotEmpty property="startDate">
				<![CDATA[
					AND A.INOUT_DATE >= TO_DATE(#startDate#,'YYYY/MM/DD')
				]]>
				</isNotEmpty>
				<isNotEmpty property="endDate">
				<![CDATA[
					AND A.INOUT_DATE <= TO_DATE(#endDate#,'YYYY/MM/DD')
				]]>
				</isNotEmpty>
			)
	</select>
	
	<!-- 중복여부 체크 -->
	<select id="itemUpperGroupCodeDup" resultClass="itemCodeGroupVO" parameterClass="itemCodeGroupVO">
		SELECT COUNT(*) AS "dupCnt"
		FROM T_ITEM_GROUP
		WHERE GROUP_CODE = UPPER(#groupCode#)
			AND (UPPER_GROUP_CODE IS NULL 
				OR
				UPPER_GROUP_CODE = '')
	</select>
	
	<!-- 담당(정) 직원의 전화번호를 가져온다. -->
	<select id="getAdminTelNo" resultClass="memberVO" parameterClass="memberVO">
		SELECT MEMBER_ID AS memberId,
				MOBILE_NO AS mobileNo,
				MEMBER_NAME AS memberName
		FROM T_MEMBER
		WHERE MEMBER_ID = #memberId#
	</select>
	
	<select id="getWarehouseAddrList" parameterClass="warehouseZipcodeVO" resultClass="warehouseZipcodeVO">
		SELECT  
			ZIPCODE
			,SIDO
			,GUGUN
			,DONG
			,BUNJI
		FROM ZIPCODE 
		WHERE DONG LIKE REPLACE(#dong#||'%',' ','')	
	</select>
	
	<!-- 수계 2자리 번호 가져오기  -->
	<select id="getRiverCodeTwo"  resultClass="java.util.HashMap">
		SELECT RIVER_DIV as riverCode, RIVER_NAME as riverName 
		FROM t_river_info_div 
		WHERE river_no = '1'
	
	</select>
	
	<!-- 운영기관 , 관리주체  -->
	<select id="getUpperDeptCode"  resultClass="java.util.HashMap">
		SELECT DEPT_NAME AS UPPERDEPTNAME, DEPT_CODE AS UPPERDEPTCODE
		FROM t_dept_info 
		WHERE upper_dept_code='0'
	</select>
	
	<!-- 운영부서  , 관리부서 -->
	<select id="getDeptCode" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT DEPT_NAME AS DEPTNAME, DEPT_CODE AS DEPTCODE 
		FROM t_dept_info 
		<isNotEmpty property="upperDeptCode">
			WHERE upper_dept_code=#upperDeptCode#
		</isNotEmpty>
	</select>

	
	<select id="getMaxWareHouseCode" resultClass="java.lang.String">
		SELECT LPAD(MAX(SUBSTR(WH_CODE , 10 , 3))+1 , 3, 0) 
		FROM T_WAREHOUSE 
		WHERE LENGTH(WH_CODE) = 12
	</select>
	
	<select id="getSearchMember" parameterClass="memberSearchVO" resultClass="memberSearchVO">
		SELECT A.MEMBER_ID as memberId,
				A.MOBILE_NO as mobileNo,
				A.OFFICE_NAME as officeName,
				A.GRADE_NAME as gradeName,
				A.MEMBER_NAME as memberName,
				B.DEPT_NAME as deptName
		FROM T_MEMBER A
		INNER JOIN T_DEPT_INFO B
		ON A.DEPT_CODE = B.DEPT_CODE
		WHERE <![CDATA[ A.MEMBER_NAME LIKE '%' || #searchKeyword# || '%']]>
		<isNotEmpty property="deptCode">
			AND B.UPPER_DEPT_CODE = #deptCode#
		</isNotEmpty>
	</select>
	
	<!-- 창고 리스트 검색 query -->
	<select id="getSearchWareHouseList" parameterClass="wareHouseSearchVO" resultClass="wareHouseSearchVO">
	SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			FROM  (
				SELECT	A.WH_CODE			AS whCode,
						A.WH_NAME			AS whName,
						A.RIVER_DIV			AS riverDiv,
						A.ADMIN_DEPT		AS adminDept,
						A.ADMIN_DEPT_SUB	AS adminDeptSub,
						A.ADMIN_NAME		AS adminCode,
						A.ADMIN_TELNO		AS adminTelno,
						A.USE_FLAG			AS useFlag,
						A.LON				AS lon,
						A.LAT				AS lat,
						A.CTY_CODE			AS ctyCode,
						A.ADDR				AS addr,
						A.ADMIN_NAME		AS adminId,
						A.ADMIN_NAME_SUB	AS adminIdSub,
						(SELECT CTY_NAME FROM T_AREA WHERE CTY_CODE = A.CTY_CODE )							AS ctyName,
						(SELECT RIVER_NAME FROM T_RIVER_INFO WHERE RIVER_DIV = A.RIVER_DIV )				AS riverName,
						(SELECT MEMBER_NAME FROM T_MEMBER WHERE MEMBER_ID = A.ADMIN_NAME)					AS adminName,
						(SELECT MEMBER_NAME FROM T_MEMBER WHERE MEMBER_ID = A.ADMIN_NAME_SUB)				AS adminNameSub,
						(SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE = TO_NUMBER(B.DEPT_CODE))		AS adminDeptName,
						(SELECT DEPT_NAME FROM T_DEPT_INFO WHERE DEPT_CODE = TO_NUMBER(A.ADMIN_DEPT_SUB))	AS adminDeptNameSub
				FROM T_WAREHOUSE A, T_MEMBER B 
				WHERE 1=1 
				    AND A.ADMIN_NAME = B.MEMBER_ID(+)
					<isNotEmpty property="whCode">
						AND ( #whCode# IS NULL OR A.WH_CODE = #whCode#)
					</isNotEmpty>
					<isNotEmpty property="riverDiv">
						AND ( #riverDiv# IS NULL OR A.RIVER_DIV = #riverDiv# )
					</isNotEmpty>
					<isNotEmpty property="adminDept">
						AND ( #adminDept# IS NULL OR A.ADMIN_DEPT = #adminDept#)
					</isNotEmpty>
					<isNotEmpty property="ctyCode">
						AND ( #ctyCode# IS NULL OR A.CTY_CODE = #ctyCode#)
					</isNotEmpty>
					<isNotEmpty property="whName">
						AND ( #whName# IS NULL OR A.WH_NAME = #whName#)
					</isNotEmpty>
					<isNotEmpty property="itemCode">
						AND ( #itemCode# IS NULL OR WH_CODE IN (
							SELECT UNIQUE WH_CODE 
							FROM T_ITEM_STOCK
							WHERE ITEM_CODE LIKE 
							CASE 
						           WHEN substr(#itemCode#,5,4) = '0000' THEN substr(#itemCode#,0,4) || '____'
						           WHEN substr(#itemCode#,7,2) = '00' THEN substr(#itemCode#,0,6) || '__'
						           ELSE #itemCode#
						    END 
       
							<isNotEmpty property="itemCodeNum">
							AND ITEM_CODE_NUM = #itemCodeNum#
							</isNotEmpty>
								)
							)
					</isNotEmpty>
				order by WH_CODE desc
				) ALL_LIST
				
	</select>
	
	<!-- 창고 리스트 검색 query -->
	<select id="getSearchItemStockList" parameterClass="itemCodeSearchVO" resultClass="itemCodeSearchVO">
	
	SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
	FROM(
		SELECT  A.WH_CODE AS whCode,
				A.REG_DATE AS regDt,
				A.ITEM_CODE AS itemCode,
				A.ITEM_CNT AS itemCnt ,
				
				(SELECT SUM(item_cnt) 
					FROM T_ITEM_INOUT c 
					WHERE c.ITEM_CODE = A.ITEM_CODE AND c.WH_CODE = A.WH_CODE
					AND c.INOUT_TYPE = 'I'
					AND ITEM_CODE_NUM = A.ITEM_CODE_NUM
					) AS  inCnt,
				NVL((SELECT SUM(item_cnt) 
					FROM T_ITEM_INOUT c 
					WHERE c.ITEM_CODE = A.ITEM_CODE AND c.WH_CODE = A.WH_CODE
					AND c.INOUT_TYPE = 'O'
					AND ITEM_CODE_NUM = A.ITEM_CODE_NUM
					),0) AS  outCnt ,
				(SELECT ITEM_NAME FROM T_ITEM_CODE WHERE ITEM_CODE = A.ITEM_CODE AND ITEM_CODE_NUM = A.ITEM_CODE_NUM) AS itemName,
				(SELECT ITEM_STAN FROM T_ITEM_CODE WHERE ITEM_CODE = A.ITEM_CODE AND ITEM_CODE_NUM = A.ITEM_CODE_NUM) AS itemStan,
				A.item_code_num as itemCodeNum
		FROM T_ITEM_STOCK A
		WHERE A.WH_CODE= #whCode# 
			<isNotEmpty property="itemCode">
				AND (#itemCode# IS NULL 
				OR A.ITEM_CODE LIKE
					CASE 
				           WHEN substr(#itemCode#,5,4) = '0000' THEN substr(#itemCode#,0,4) || '____'
				           WHEN substr(#itemCode#,7,2) = '00' THEN substr(#itemCode#,0,6) || '__'
				           ELSE #itemCode#
				    END  
				)
			</isNotEmpty>
			<isNotEmpty property="itemCodeNum">
				AND (#itemCodeNum# IS NULL OR <![CDATA[ A.ITEM_CODE_NUM LIKE '%'|| #itemCodeNum# ||'%']]>)
			</isNotEmpty>
			
		order by REG_DATE desc
		)ALL_LIST
	</select>

	<!-- 입출고 내역 기록 '20170101' ITEM_CODE_DET 대/중분류 삭제-->
	<insert id="addItemInOut" parameterClass="itemCodeVO">
		INSERT INTO T_ITEM_INOUT
		 (
			WH_CODE,
			INOUT_TYPE,
			ITEM_CODE,
			ITEM_CODE_NUM,
			ITEM_CNT,
			INOUT_DESC,
			INOUT_DATE,
			REG_ID,
			REG_DATE,
			MOD_ID,
			MOD_DATE
			)
		VALUES (
			#whCode#,  
			#status#,
			#itemCode#,
			#itemCodeNum#,
			#itemCnt#,
			#itemDesc#,
			TO_DATE(#startDate#,'YYYY/MM/DD HH24'),
			#regId#,
			SYSDATE,
			#regId#,
			SYSDATE
		)
	</insert>	

	<update id="modifyItemInOut" parameterClass="itemCodeVO">
		<![CDATA[
		UPDATE T_ITEM_INOUT
		SET WH_CODE			= #whCode#,
			INOUT_TYPE		= #status#,
			ITEM_CNT		= #itemCnt#,
			INOUT_DESC		= #itemDesc#,
			INOUT_DATE		= #startDate#,
			MOD_ID			= #uptId#,
			MOD_DATE		= SYSDATE
		WHERE ITEM_CODE		= #itemCode#
			AND WH_CODE		= #whCode#
			AND ITEM_CODE_NUM	= #itemCodeNum#,
		]]>
	</update>
	
	
	<!-- merge into 재고현황 '20170101' AS ITEM_CODE_DET 대/중분류 삭제 -->
	<statement id="mergeItemStock" parameterClass="itemCodeVO">
		MERGE INTO T_ITEM_STOCK A
		USING ( SELECT #whCode# AS WH_CODE, 
						#itemCode# AS ITEM_CODE,
						#itemCodeNum# AS ITEM_CODE_NUM, 
						#itemCnt# AS ITEM_CNT, 
						#regId# AS REG_ID, 
						#uptId# AS MOD_ID
				FROM DUAL) B
		ON (A.ITEM_CODE = B.ITEM_CODE 
			AND A.WH_CODE = B.WH_CODE
			AND A.ITEM_CODE_NUM = B.ITEM_CODE_NUM
		)
		WHEN MATCHED THEN 
			UPDATE SET 
				A.ITEM_CNT		= B.ITEM_CNT,
				A.MOD_ID		= B.MOD_ID,
				A.MOD_DATE		= SYSDATE
				WHERE 
				A.ITEM_CODE = B.ITEM_CODE 
				AND A.WH_CODE = B.WH_CODE
				AND A.ITEM_CODE_NUM = B.ITEM_CODE_NUM
		WHEN NOT MATCHED THEN
			INSERT (
					A.WH_CODE,
					A.ITEM_CODE,
					A.ITEM_CODE_NUM,
					A.ITEM_CNT,
					A.REG_ID ,
					A.REG_DATE,
					A.MOD_ID,
					A.MOD_DATE
				)
			VALUES (
					B.WH_CODE,
					B.ITEM_CODE,
					B.ITEM_CODE_NUM,
					B.ITEM_CNT, 
					B.REG_ID,
					SYSDATE,
					B.MOD_ID,
					SYSDATE
				)
	</statement>

	<!-- 창고 리스트 검색 query -->
	<select id="getItemInOutList" parameterClass="itemCodeSearchVO" resultClass="itemCodeSearchVO">
		SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
		FROM(
			SELECT 
				  B.ITEM_NAME AS itemName
				, A.INOUT_TYPE AS status 
				, TO_CHAR(A.INOUT_DATE,'YYYY-MM-DD HH24')||'시' AS itemDate
				, A.ITEM_CNT AS itemCnt
				, A.INOUT_DESC AS storDesc
				, A.item_code_num as itemCodeNum
			FROM T_ITEM_INOUT A, T_ITEM_CODE B
			WHERE A.WH_CODE = #whCode# 
				AND A.ITEM_CODE = #itemCode#
				AND A.ITEM_CODE = #itemCodeNum#
				AND A.ITEM_CODE = B.ITEM_CODE
				AND A.item_code_num = B.item_code_num
			ORDER BY A.INOUT_DATE DESC
		)ALL_LIST
	</select>

	<!-- 방제물품 보유현황 물품별 조회시 물품별 창고 분포현황 조회  -->
	<select id="itemWarehouseManage" resultClass="itemCodeSearchVO" parameterClass="itemCodeSearchVO">
		SELECT
			C.WH_CODE  whCode
			,MAX(C.WH_NAME)  whName
			,D.RIVER_NAME AS riverDivName
			,C.RIVER_DIV AS riverDiv
			,A.ITEM_CODE AS itemCode
			,A.ITEM_NAME itemName
			,SUM(B.ITEM_CNT)||' '|| MAX(A.ITEM_STAN)||CASE WHEN MAX(A.ITEM_UNIT) IS NOT NULL THEN ' ['||MAX(A.ITEM_UNIT)||']' END AS	amt
			,A.item_code_num as itemCodeNum
		FROM T_ITEM_CODE A, T_ITEM_STOCK B, T_WAREHOUSE C, T_RIVER_INFO D
		WHERE A.ITEM_CODE = B.ITEM_CODE
			AND A.item_code_num = B.item_code_num
			AND A.USE_FLAG='Y'
			AND B.WH_CODE = C.WH_CODE
			AND C.RIVER_DIV = D.RIVER_DIV
			AND C.USE_FLAG ='Y'
			AND A.ITEM_CODE = #itemCode#
			AND A.item_code_num = #itemCodeNum#
		GROUP BY C.WH_CODE, C.RIVER_DIV, A.ITEM_CODE, A.ITEM_NAME, D.RIVER_NAME
		ORDER BY C.WH_CODE, c.RIVER_DIV ASC, A.ITEM_CODE ASC
	</select>	

	<!-- 창고 리스트 검색 query -->
	<select id="itemCalculateManageDetailList" parameterClass="itemCodeVO" resultClass="itemCodeVO">
		SELECT TF.COMMON_CODE_NAME riverName,
				  TB.WH_NAME whName,
				  TC.ITEM_NAME itemName,
				  TE.DEPT_NAME deptName,
				  TD.MEMBER_NAME memberName,
				  TB.ADMIN_TELNO adminTelNo,
				  TA.ITEM_CODE itemCode,
				  TA.ITEM_CNT itemCnt
		FROM T_ITEM_STOCK TA,
				  T_WAREHOUSE TB,
				  T_ITEM_CODE TC,
				  T_MEMBER TD,
				  T_DEPT_INFO TE,
				  T_COMMON_CODE TF
		WHERE TA.ITEM_CODE        = #itemCode#
		AND TC.ITEM_NAME            = #itemName#
		AND TA.WH_CODE              = TB.WH_CODE
		AND TA.ITEM_CODE           = TC.ITEM_CODE
		AND TA.ITEM_CODE_NUM    = TC.ITEM_CODE_NUM
		AND TC.USE_FLAG              ='Y'
		AND TB.ADMIN_NAME          = TD.MEMBER_ID(+)
		AND TD.DEPT_CODE            = TE.DEPT_CODE
		AND TF.COMMON_CODE_CATEGORY = '01'
		AND TB.RIVER_DIV            = TF.COMMON_CODE
	</select>
	<select id="getWhNameList" resultClass="String">
	<!-- SELECT ListAgg(whName, ', ') within GROUP(ORDER BY whName) whNameList -->
	SELECT WM_CONCAT(whName) whNameList
      FROM 
         (
           SELECT 'NVL(MAX(DECODE(WH_NAME, ^'||WH_NAME||'^, CNT)), 0)  wh'||ROWNUM||'' whName
             FROM T_WAREHOUSE
            WHERE 1=1
              AND ADMIN_DEPT = #deptNo#
              AND USE_FLAG = 'Y'
              ORDER BY WH_CODE ASC
         )
	</select>
	<select id="getItemHoldConditionList" parameterClass="itemConditionSearchVO" resultClass="ItemHoldConditionVO" remapResults="true">
	SELECT RS.*
	FROM
	(
		SELECT ROW_NUMBER() OVER(ORDER BY ITEM_NAME) RNUM,	   
		   	   $whName$,	   
		   	   ITEM_NAME itemName, 
           	   MAX(TOTAL_CNT) totalCnt, 
           	   SUM(CNT) cnt, 
           	   MAX(ITEM_STAN) itemStan 
	    FROM
	    (
	       SELECT W.WH_NAME, 
	              C.ITEM_NAME, 
	              SUM(DECODE(O.INOUT_TYPE, 'I', O.ITEM_CNT, 'O', -O.ITEM_CNT)) CNT,
	              (SELECT SUM(ITEM_CNT) FROM T_ITEM_STOCK WHERE ITEM_CODE = O.ITEM_CODE AND ITEM_CODE_NUM = O.ITEM_CODE_NUM) TOTAL_CNT,
	              (SELECT ITEM_STAN FROM T_ITEM_CODE WHERE ITEM_CODE = O.ITEM_CODE AND ITEM_CODE_NUM = O.ITEM_CODE_NUM) ITEM_STAN 
	         FROM T_WAREHOUSE W, 
	              T_ITEM_CODE C,
	              T_ITEM_INOUT O 
	        WHERE 1=1 
	              AND O.WH_CODE = W.WH_CODE 
	              AND O.ITEM_CODE = C.ITEM_CODE(+) 
	              AND O.ITEM_CODE_NUM = C.ITEM_CODE_NUM(+) 
	              AND W.ADMIN_DEPT = #deptNo#
	              AND W.USE_FLAG = 'Y'
	              <!--  AND O.INOUT_DATE <= TO_DATE('201311302359','YYYYMMDDHH24MI') -->
	        <![CDATA[AND O.INOUT_DATE < = TO_DATE(#endDate#||' 2359','YYYY/MM/DD HH24MI')]]>
	        GROUP BY O.WH_CODE, 
	              W.WH_NAME, 
	              O.ITEM_CODE, 
	              O.ITEM_CODE_NUM, 
	              C.ITEM_NAME 
	     ORDER BY O.WH_CODE , 
	              C.ITEM_NAME 
	    )
	    GROUP BY ITEM_NAME
	) RS
	</select>
	<select id="getItemHoldConditionListCnt" parameterClass="itemConditionSearchVO" resultClass="int">
	SELECT COUNT(*) AS TOTCNT
	FROM(
			SELECT 
				   *
		    FROM
		    (
		       SELECT W.WH_NAME, 
		              C.ITEM_NAME, 
		              SUM(DECODE(O.INOUT_TYPE, 'I', O.ITEM_CNT, 'O', -O.ITEM_CNT)) CNT,
		              (SELECT SUM(ITEM_CNT) FROM T_ITEM_STOCK WHERE ITEM_CODE = O.ITEM_CODE AND ITEM_CODE_NUM = O.ITEM_CODE_NUM) TOTAL_CNT,
		              (SELECT ITEM_STAN FROM T_ITEM_CODE WHERE ITEM_CODE = O.ITEM_CODE AND ITEM_CODE_NUM = O.ITEM_CODE_NUM) ITEM_STAN 
		         FROM T_WAREHOUSE W, 
		              T_ITEM_CODE C,
		              T_ITEM_INOUT O 
		        WHERE 1=1 
		              AND O.WH_CODE = W.WH_CODE 
		              AND O.ITEM_CODE = C.ITEM_CODE(+) 
		              AND O.ITEM_CODE_NUM = C.ITEM_CODE_NUM(+) 
		              AND W.ADMIN_DEPT = #deptNo#
		              AND W.USE_FLAG = 'Y'
		              <!--  AND O.INOUT_DATE <= TO_DATE('201311302359','YYYYMMDDHH24MI') -->
		        <![CDATA[AND O.INOUT_DATE < = TO_DATE(#endDate#||' 2359','YYYY/MM/DD HH24MI')]]>
		        GROUP BY O.WH_CODE, 
		              W.WH_NAME, 
		              O.ITEM_CODE, 
		              O.ITEM_CODE_NUM, 
		              C.ITEM_NAME 
		     ORDER BY O.WH_CODE , 
		              C.ITEM_NAME 
		    )
		    GROUP BY ITEM_NAME
	)
	</select>
	<select id="getWareHouseNames" resultClass="java.util.HashMap" parameterClass="wareHouseVO">
		SELECT W.WH_CODE AS VALUE,
			   W.WH_NAME AS CAPTION,
			   (SELECT CTY_NAME FROM T_AREA WHERE CTY_CODE = W.CTY_CODE) CTY_NAME	
		FROM T_WAREHOUSE W
		WHERE W.ADMIN_DEPT = #adminDept#
		AND W.USE_FLAG = 'Y'
		ORDER BY W.WH_CODE ASC
	</select>
	
	<!-- 동일 시간 동일 물품 입고(출고) 중복 확인 -->
	<select id="checkDuplicateItemInOut" resultClass="int" parameterClass="itemCodeVO">
		SELECT COUNT(*) 
		  FROM T_ITEM_INOUT 
		 WHERE WH_CODE = #whCode# 
		       AND INOUT_TYPE = #status# 
		       AND ITEM_CODE = #itemCode# 
		       AND ITEM_CODE_NUM = #itemCodeNum# 
		       AND INOUT_DATE = TO_DATE(#startDate#,'YYYY/MM/DD HH24')
	</select>
	
	<!-- 물품 코드에 대한 상세 정보(제원,규격)를 조회 -->
 	<select id="showItemDetailView" parameterClass="itemCodeVO" resultClass="itemCodeVO">
		SELECT ITEM_DETAIL AS itemDetail
		  FROM T_ITEM_CODE 
		 WHERE ITEM_CODE = #itemCode# 
		       AND ITEM_CODE_NUM = #itemCodeNum#
	</select> 

	<!-- 물품 코드에 대한 상세 정보(제원,규격)를 저장 -->
	<update id="saveItemDetailView" parameterClass="itemCodeVO">
		UPDATE T_ITEM_CODE 
		       SET ITEM_DETAIL = #itemDetail# 
		 WHERE ITEM_CODE = #itemCode# 
		       AND ITEM_CODE_NUM = #itemCodeNum#
	</update>

</sqlMap>