<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="WaterPollutionDAO">

	<typeAlias  alias="egovMap"							type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="cmmnCode"						type="daewooInfo.admin.cmmncode.bean.CmmnCode"/>
	<typeAlias  alias="deptVO"							type="daewooInfo.cmmn.bean.DeptVO"/>
	<typeAlias  alias="memberVO"						type="daewooInfo.common.login.bean.MemberVO"/>
	<typeAlias  alias="waterPollutionSearchVO"			type="daewooInfo.waterpollution.bean.WaterPollutionSearchVO"/>
	<typeAlias  alias="waterPollutionVO"				type="daewooInfo.waterpollution.bean.WaterPollutionVO"/>
	<typeAlias  alias="waterPollutionStepVO"			type="daewooInfo.waterpollution.bean.WaterPollutionStepVO"/>
	<typeAlias  alias="FileVO"							type="daewooInfo.cmmn.bean.FileVO"/>
	<typeAlias  alias="waterPollutionReportSearchVO"	type="daewooInfo.waterpollution.bean.WaterPollutionReportSearchVO"/>
	<typeAlias  alias="waterPollutionReportVO"			type="daewooInfo.waterpollution.bean.WaterPollutionReportVO"/>
	<typeAlias  alias="chartVO"			type="daewooInfo.cmmn.bean.ChartVO"/>
	
	<!-- 수질오염사고 목록 -->
	<select id="getWaterPollutionList" resultClass="waterPollutionSearchVO" parameterClass="waterPollutionSearchVO">
		SELECT * 
		  FROM 
		       (SELECT ROW_NUMBER() OVER(ORDER BY A.RECEIVEDATE DESC, A.WPCODE DESC ) RNUM, 
		              A.* 
		         FROM 
		              (SELECT ROW_NUMBER() OVER(PARTITION BY A.WP_CODE ORDER BY A.WP_CODE,C.WPS_CODE DESC) RN, 
		                     A.WP_CODE AS wpCode, 
		                     SUBSTR(A.REPORT_DATE,0,4)||'-' || SUBSTR(A.REPORT_DATE,5,2) ||'-'|| SUBSTR(A.REPORT_DATE,7,2) AS reportDate, 
		                     SUBSTR(A.RECEIVE_DATE,0,4)||'-' || SUBSTR(A.RECEIVE_DATE,5,2) ||'-'|| SUBSTR(A.RECEIVE_DATE,7,2) AS receiveDate, 
		                     A.RIVER_DIV AS riverDiv, 
		                     A.REG_KIND AS regKind, 
                     		(SELECT COMMON_CODE.COMMON_CODE_NAME FROM T_COMMON_CODE COMMON_CODE WHERE COMMON_CODE.COMMON_CODE = A.RIVER_DIV) AS riverDivName,
		                     A.WP_KIND AS wpKind, 
		                     A.WP_CONTENT AS wpContent, 
		                     A.SUPPORT_KIND AS supportKind,
		                     C.WPS_STEP AS wpsStep,
		                     A.LONGITUDE AS longituded,
		                     A.ADDRESS,
		                     A.LATITUDE AS latiude
		                FROM T_WATER_POLLUTION A 
		                 INNER JOIN T_MEMBER B 
		                     ON A.RECEIVER_ID = B.MEMBER_ID 
		                 LEFT OUTER JOIN T_WATER_POLLUTION_STEP C 
		                     ON C.WP_CODE = A.WP_CODE 
		               		 AND C.DEL_YN = 'N'
		               WHERE A.RECEIVE_DATE BETWEEN #startDate#||'0000' AND #endDate#||'2359' 
		               		AND A.DEL_YN = 'N'
		                    <isNotEmpty property="searchRiverDiv">
		                        AND A.RIVER_DIV = #searchRiverDiv#
		                    </isNotEmpty>
		                    <isNotEmpty property="searchWpKind">
		                        AND A.WP_KIND = #searchWpKind#
		                    </isNotEmpty>
		                    <isNotEmpty property="searchSupportKind">
		                        AND A.SUPPORT_KIND = #searchSupportKind#
		                    </isNotEmpty>
		                    <isNotEmpty property="searchRegKind">
		                        AND A.REG_KIND = #searchRegKind#
		                    </isNotEmpty>
		              ) A 
		        WHERE RN = 1 
		          <isNotEmpty property="searchWpsStep">
                      AND A.wpsStep = #searchWpsStep#
                  </isNotEmpty>
		<![CDATA[
		)
		WHERE  RNUM > #firstIndex#
			AND  RNUM <= #firstIndex# + #recordCountPerPage#
		]]>	
	</select>
	
	<!-- 수질오염사고 목록 카운트-->
	<select id="getWaterPollutionListCnt" resultClass="int" parameterClass="waterPollutionSearchVO">
		SELECT COUNT(*)
         FROM 
              (SELECT ROW_NUMBER() OVER(PARTITION BY A.WP_CODE ORDER BY A.WP_CODE,C.WPS_CODE DESC) RN,
                     C.WPS_STEP AS wpsStep
                FROM T_WATER_POLLUTION A 
                 INNER JOIN T_MEMBER B 
                     ON A.RECEIVER_ID = B.MEMBER_ID 
                 LEFT OUTER JOIN T_WATER_POLLUTION_STEP C 
                     ON C.WP_CODE = A.WP_CODE 
		             AND C.DEL_YN = 'N'
               WHERE A.RECEIVE_DATE BETWEEN #startDate#||'0000' AND #endDate#||'2359' 
               		AND A.DEL_YN = 'N'
                    <isNotEmpty property="searchRiverDiv">
                        AND A.RIVER_DIV = #searchRiverDiv#
                    </isNotEmpty>
                    <isNotEmpty property="searchWpKind">
                        AND A.WP_KIND = #searchWpKind#
                    </isNotEmpty>
                    <isNotEmpty property="searchSupportKind">
                        AND A.SUPPORT_KIND = #searchSupportKind#
                    </isNotEmpty>
                    <isNotEmpty property="searchRegKind">
                        AND A.REG_KIND = #searchRegKind#
                    </isNotEmpty>
              ) A 
        WHERE RN = 1 
          <isNotEmpty property="searchWpsStep">
              AND A.wpsStep = #searchWpsStep#
          </isNotEmpty>
	</select>
	
	<!-- 로그인한 사용자 정보 가져오기 -->
	<statement id="getLoginMemberInfo" parameterClass="map" resultClass="HashMap">
		SELECT A.MEMBER_ID		AS memberId, 
				A.MEMBER_NAME	AS memberName, 
				A.MOBILE_NO		AS mobileNo, 
				A.DEPT_CODE		AS deptCode, 
				B.DEPT_NAME		AS deptName, 
				C.DEPT_CODE		AS upperDeptCode, 
				C.DEPT_NAME		AS upperDeptName 
		FROM T_MEMBER A, T_DEPT_INFO B, T_DEPT_INFO C
		 WHERE A.DEPT_CODE = B.DEPT_CODE
			AND C.DEPT_CODE(+) = B.UPPER_DEPT_CODE
			AND MEMBER_ID = #user_id#
	</statement>
	
	<!-- Select Fact Name Data -->
	<statement id="getWaterPollutionCode" resultClass="String">
	SELECT LPAD(SEQ_T_WATER_POLLUTION.NEXTVAL,8,'0') 
	FROM DUAL
	</statement>
	
	<statement id="inserttWaterPollutionInfo" parameterClass="waterPollutionVO">
	INSERT INTO WPCS.T_WATER_POLLUTION 
	(
		WP_CODE,
		REPORT_DATE,
		REPORTER_NAME,
		REPORTER_TELNO,
		REPORTER_DEPT,
		RECEIVE_DATE,
		RECEIVER_ID,
		WP_KIND,
		RIVER_DIV,
		REG_KIND,
		ADDRESS,
		ADDR_DET,
		WP_CONTENT,
		REG_DATE,
		MOD_DATE,
		LONGITUDE,
		LATITUDE,
		ATCH_FILE_ID
	)
	VALUES
	(
		#wpCode#,
		#reportDate#,
		#reporterName#,
		#reporterTelNo#,
		#reporterDept#,
		#receiveDate#,
		#receiverId#,
		#wpKind#,
		#riverDiv#,
		#regKind#,
		#address#,
		#addrDet#,
		#wpContent#,
		SYSDATE,
		SYSDATE,
		#longituded#,
		#latiude#,
		#atchFileId#
	)	 
	</statement>
	
	
	<statement id="inserttWaterPollutionStepInfo" parameterClass="waterPollutionStepVO">
	INSERT INTO WPCS.T_WATER_POLLUTION_STEP 
	(
		WP_CODE,
		WPS_CODE,
		WPS_STEP,
		WPS_STEP_DATE,
		WPS_CONTENT,
		WPS_IMG,
		REG_DATE,
		MOD_DATE
	)
	VALUES
	(
		#wpCode#,
		#wpsCode#,
		#wpsStep#,
		#wpsStepDate#,
		#wpsContent#,
		#wpsImg#,
		SYSDATE,
		SYSDATE
	)
	</statement>
	
	
	<statement id="inserttWaterPollutionSmsInfo" parameterClass="map">
	INSERT INTO WPCS.T_WATER_POLLUTION_SMS 
	(
		WP_CODE,
		RECV_ID,
		SMS_CONTENT,
		REG_DATE,
		MOD_DATE
	)
	VALUES
	(
		#wpCode#,
		#memberId#,
		#smsContent#,
		SYSDATE,
		SYSDATE
	)
	</statement>
	
	
	<statement id="insertWaterPollutionCheckAlrim" parameterClass="map">
	    MERGE INTO T_WATER_POLLUTION_ALRIM_CHECK
		USING DUAL
		ON ( WP_CODE = #wpCode# AND  MEMBER_ID = #memberId#)
		WHEN NOT MATCHED THEN
			INSERT (
					WP_CODE,
					MEMBER_ID
				)
				VALUES
				(
					#wpCode#,
					#memberId#
				)
							
	</statement>
	
	<!-- 수질오염사고 상세 내역 가져오기 -->
	<statement id="getWaterPollutionDetail" parameterClass="map" resultClass="waterPollutionVO">
	SELECT * 
	  FROM 
	       (SELECT ROW_NUMBER() OVER(PARTITION BY A.WP_CODE ORDER BY A.WP_CODE,E.WPS_CODE DESC) RN, 
	              A.WP_CODE AS wpCode, 
	              A.REPORT_DATE AS reportDate, 
	              A.RECEIVE_DATE AS receiveDate, 
	              A.REPORTER_NAME AS reporterName, 
	              A.REPORTER_TELNO AS reporterTelNo, 
	              A.REPORTER_DEPT AS reporterDept, 
	              A.RECEIVER_ID AS receiverId, 
	              B.MEMBER_NAME AS receiverName, 
	              B.MOBILE_NO AS receiverTelNo, 
	              D.DEPT_NAME || ' > ' || C.DEPT_NAME AS receiverDept, 
	              A.RIVER_DIV AS riverDiv, 
	              A.REG_KIND AS regKind, 
	              A.WP_KIND AS wpKind, 
	              A.WP_CONTENT AS wpContent, 
	              A.SUPPORT_KIND AS supportKind, 
	              A.ADDRESS AS address, 
	              A.ADDR_DET AS addrDet,
	              A.LONGITUDE AS longituded,
	              A.LATITUDE AS latiude,
	              E.WPS_STEP AS wpsStep,
	              A.ATCH_FILE_ID atchFileiD
	         FROM T_WATER_POLLUTION A, 
	              T_MEMBER B, 
	              T_DEPT_INFO C, 
	              T_DEPT_INFO D, 
	              T_WATER_POLLUTION_STEP E 
	        WHERE A.RECEIVER_ID = B.MEMBER_ID 
	              AND B.DEPT_CODE = C.DEPT_CODE 
	              AND D.DEPT_CODE(+) = C.UPPER_DEPT_CODE
				  AND A.WP_CODE = #wpCode#
		          AND A.DEL_YN = 'N'
		          AND E.DEL_YN = 'N'
		       )
	WHERE RN = 1       
	</statement>
	
	<!-- 수질오염사고 상세 SMS내역 가져오기 -->
	<statement id="getWaterPollutionSms" parameterClass="map" resultClass="waterPollutionVO">
		SELECT A.WP_CODE						AS wpCode,
				A.SMS_CONTENT					AS smsContent,
				B.MEMBER_ID						AS recvId,
				B.MEMBER_Name					AS recvName,
				D.DEPT_NAME || ' > ' || C.DEPT_NAME	AS recvDept
		FROM T_WATER_POLLUTION_SMS A, T_MEMBER B, T_DEPT_INFO C, T_DEPT_INFO D
		WHERE A.RECV_ID = B.MEMBER_ID  
			AND B.DEPT_CODE = C.DEPT_CODE
			AND D.DEPT_CODE(+) = C.UPPER_DEPT_CODE
			AND A.WP_CODE = #wpCode#
		ORDER BY B.MEMBER_ID ASC
	</statement>
	
	<!-- 수질오염사고 상세 수습(조치)경과가져오기 -->
	<statement id="getWaterPollutionStep" parameterClass="map" resultClass="waterPollutionVO">
	SELECT WP_CODE		AS wpCode,
			WPS_CODE	AS wpsCode,
			WPS_CONTENT	AS wpsContent,
			WPS_STEP	AS wpsStep,
			WPS_IMG		AS wpsImg,
			REG_DATE		 AS reg_date,
			SUBSTR(WPS_STEP_DATE,0,4)||'-' || SUBSTR(WPS_STEP_DATE,5,2) ||'-'|| SUBSTR(WPS_STEP_DATE,7,2) AS wpsStepDate
	FROM T_WATER_POLLUTION_STEP
	WHERE WP_CODE = #wpCode#
		AND DEL_YN = 'N'
	ORDER BY CAST(WPS_CODE AS INT) DESC
	</statement>
	
	<!-- Select Fact Name Data -->
	<statement id="getWaterPollutionNextStep" parameterClass="map" resultClass="String">
	SELECT MAX(CAST(WPS_CODE AS INT))+1
	FROM T_WATER_POLLUTION_STEP
	WHERE WP_CODE = #wpCode#
		AND DEL_YN = 'N'
	</statement>
	
	
	<!-- 수질오염사고 상세 SMS내역 가져오기 -->
	<statement id="waterPollutionStepModifyInfo" parameterClass="map" resultClass="waterPollutionVO">
	SELECT WP_CODE		AS wpCode,
			WPS_CODE	AS wpsCode,
			WPS_CONTENT	AS wpsContent,
			WPS_STEP	AS wpsStep,
			WPS_IMG		AS wpsImg
	FROM T_WATER_POLLUTION_STEP
	WHERE WP_CODE = #wpCode#
		AND WPS_CODE = #wpsCode#
		AND DEL_YN = 'N'
	ORDER BY WPS_CODE ASC
	</statement>

	<statement id="modifyWaterPollutionStep" parameterClass="waterPollutionStepVO">
	UPDATE T_WATER_POLLUTION_STEP
		SET WPS_CONTENT	= #wpsContent#,
			WPS_STEP	= #wpsStep#,
			WPS_STEP_DATE = #wpsStepDate#,
			WPS_IMG		= #wpsImg# 
	WHERE WP_CODE = #wpCode#
		AND WPS_CODE = #wpsCode#
	</statement>
	
	
	<statement id="modifyWaterPollutionStepWPS_Code" parameterClass="map">
	UPDATE T_WATER_POLLUTION_STEP
		SET WPS_CODE	= #modifyWpsCode#
	WHERE REG_DATE	= TO_DATE(#reg_date# , 'yyyy-mm-dd hh24:mi:ss')
		AND WPS_CODE	= #wpsCode#
		AND WP_CODE = #wpCode#
	</statement>
	
	<statement id="modifyWaterPollution" parameterClass="waterPollutionVO">
	UPDATE T_WATER_POLLUTION
		SET WP_KIND	= #wpKind#,
			RIVER_DIV	= #riverDiv#,
			ADDRESS	= #address#,
			ADDR_DET	 = #addrDet#,
			WP_CONTENT	= #wpContent#,
			SUPPORT_KIND = #supportKind#,
			MOD_DATE = SYSDATE
			<isNotEmpty property ="reporterName">
			,REPORTER_NAME	= #reporterName#
			</isNotEmpty>
			<isNotEmpty property ="reporterTelNo">
			,REPORTER_TELNO	= #reporterTelNo#
			</isNotEmpty>
			<isNotEmpty property ="longituded">
			,REPORTER_DEPT	= #reporterDept#
			</isNotEmpty>
			
			<isNotEmpty property ="receiverId">
			,RECEIVER_ID	= #receiverId#
			</isNotEmpty>
			<isNotEmpty property ="receiveDate">
			,RECEIVE_DATE	= #receiveDate#
			</isNotEmpty>
			
			<isNotEmpty property ="longituded">
			,LONGITUDE	= #longituded#
			</isNotEmpty>
			<isNotEmpty property="latiude">
			,LATITUDE = #latiude#
			</isNotEmpty>
			, ATCH_FILE_ID = #atchFileId#
	WHERE WP_CODE = #wpCode#
	</statement>
	
	<insert id="insertWpsStepFile" parameterClass="FileVO" >
	<!--		
	INSERT INTO T_WATER_POLLUTION_FILE
	( 
		ATCH_FILE_ID, 
		FILE_SEQ_NO, 
		FILE_SAVE_PATH, 
		SAVE_FILE_NAME, 
		ORIGNL_FILE_NAME, 
		FILE_EXTSN, 
		FILE_SIZE,
		REG_DATE
	)
	VALUES
	( 
		#atchFileId#, 
		#fileSn#, 
		#fileStreCours#, 
		#streFileNm#, 
		#orignlFileNm#, 
		#fileExtsn#, 
		#fileMg#,
		SYSDATE
	 )
	 -->
	INSERT INTO T_FILE
	(
		ATCH_FILE_ID, 
		REG_DATE, 
		USE_FLAG
	)VALUES
	( 
		#atchFileId#, 
		SYSDATE, 
		'Y'
	)
	</insert>
	
	
	<insert id="insertWpsStepFileDetail" parameterClass="FileVO" >
	INSERT INTO T_FILEDETAIL
	( 
		ATCH_FILE_ID,
		FILE_SEQ,
		SAVE_PATH,
		SAVE_FILE_NAME,
		ORIGNL_FILE_NAME,
		FILE_EXTSN,
		FILE_MG,
		FILE_CONTENT
	)VALUES
	( 
		#atchFileId#,
		#fileSn#,
		#fileStreCours#,
		#streFileNm#,
		#orignlFileNm#,
		#fileExtsn#,
		#fileMg#,
		#fileCn#
	)
	
	</insert>
	
	<!-- 수질오염사고 단계별 이미지 가져오기 -->
	<statement id="getWaterPollutionImg" parameterClass="map" resultClass="waterPollutionVO">
	SELECT A.WP_CODE				AS wpCode,
			A.WPS_CODE				AS wpsCode,
			A.WPS_STEP				AS wpsStep,
			A.WPS_STEP_DATE			AS wpsStepDate,
			A.WPS_IMG				AS wpsImg
	FROM T_WATER_POLLUTION_STEP A
	WHERE A.WPS_IMG IS NOT NULL
		AND A.DEL_YN = 'N'
		AND A.WP_CODE = #wpCode#
	ORDER BY A.WPS_CODE ASC
	</statement>
		
	
	<statement id="deleteWaterPollutionStepImg" parameterClass="map" resultClass="java.lang.Integer">
	UPDATE T_WATER_POLLUTION_STEP
		SET WPS_IMG = ''
	WHERE WP_CODE = #wpCode#
		AND WPS_CODE = #wpsCode#
	</statement>
	
	<statement id="deleteWaterPollutionStep" parameterClass="waterPollutionStepVO">
	UPDATE T_WATER_POLLUTION_STEP
		SET DEL_YN = 'Y'
	WHERE WP_CODE = #wpCode#
		AND WPS_CODE = #wpsCode#
	</statement>
	
	
	<statement id="deleteWaterPollution" parameterClass="waterPollutionSearchVO">
	UPDATE T_WATER_POLLUTION
		SET DEL_YN = 'Y'
	WHERE WP_CODE = #wpCode#
	</statement>
	
	<!-- 수질오염사고 목록 -->
	<select id="getWaterPollutionStats" resultClass="waterPollutionSearchVO" parameterClass="waterPollutionSearchVO">
	SELECT YEAR					AS statsYear,
			WP_KIND				AS wpKind,
			NVL(SUM(RCV),0)		AS totalRcv,
			NVL(SUM(SPT),0)		AS totalSpt,
			NVL(SUM(R01_RCV),0)	AS r01Rcv,
			NVL(SUM(R01_SPT),0)	AS r01Spt,
			NVL(SUM(R02_RCV),0)	AS r02Rcv,
			NVL(SUM(R02_SPT),0)	AS r02Spt,
			NVL(SUM(R03_RCV),0)	AS r03Rcv,
			NVL(SUM(R03_SPT),0)	AS r03Spt,
			NVL(SUM(R04_RCV),0)	AS r04Rcv,
			NVL(SUM(R04_SPT),0)	AS r04Spt
	FROM (SELECT SUBSTR(RECEIVE_DATE,0,4) AS YEAR,
					WP_KIND,
					SUM(DECODE(SUPPORT_KIND,'N',1,0)) AS RCV,
					SUM(DECODE(SUPPORT_KIND,'Y',1,0)) AS SPT,
					CASE WHEN RIVER_DIV = 'R01'
						THEN NVL(SUM(DECODE(SUPPORT_KIND,'N',1,0)),0)
					END AS R01_RCV,
					CASE WHEN RIVER_DIV = 'R01'
						THEN NVL(SUM(DECODE(SUPPORT_KIND,'Y',1,0)),0)
					END AS R01_SPT,
					CASE WHEN RIVER_DIV = 'R02'
						THEN NVL(SUM(DECODE(SUPPORT_KIND,'N',1,0)),0)
					END AS R02_RCV,
					CASE WHEN RIVER_DIV = 'R02'
						THEN NVL(SUM(DECODE(SUPPORT_KIND,'Y',1,0)),0)
					END AS R02_SPT,
					CASE WHEN RIVER_DIV = 'R03'
						THEN NVL(SUM(DECODE(SUPPORT_KIND,'N',1,0)),0)
					END AS R03_RCV,
					CASE WHEN RIVER_DIV = 'R03'
						THEN NVL(SUM(DECODE(SUPPORT_KIND,'Y',1,0)),0)
					END AS R03_SPT,
					CASE WHEN RIVER_DIV = 'R04'
						THEN NVL(SUM(DECODE(SUPPORT_KIND,'N',1,0)),0)
					END AS R04_RCV,
					CASE WHEN RIVER_DIV = 'R04'
						THEN NVL(SUM(DECODE(SUPPORT_KIND,'Y',1,0)),0)
					END AS R04_SPT
			FROM T_WATER_POLLUTION
			WHERE RECEIVE_DATE BETWEEN #startDate#||'0000' AND #endDate#||'2359'
				<isNotEmpty property="searchRiverDiv">
				AND RIVER_DIV = #searchRiverDiv#
				</isNotEmpty>
				<isNotEmpty property="searchWpKind">
				AND WP_KIND = #searchWpKind#
				</isNotEmpty>
		        AND DEL_YN = 'N'
			 GROUP BY SUBSTR(RECEIVE_DATE,0,4), SUPPORT_KIND, WP_KIND, RIVER_DIV)
	GROUP BY ROLLUP(YEAR, WP_KIND)
	ORDER BY YEAR DESC, WP_KIND ASC
	</select>
	
	<!-- 수질오염사고 통계차트 수계별 -->
	<select id="getWaterPollutionStatsChartRiver" resultClass="waterPollutionVO" parameterClass="waterPollutionSearchVO">
	SELECT CASE WHEN RIVER_DIV = 'R01'
				THEN '한강'
			WHEN RIVER_DIV = 'R02'
				THEN '낙동강'
			WHEN RIVER_DIV = 'R03'
				THEN '금강'
			WHEN RIVER_DIV = 'R04'
				THEN '영산강'
			END						AS riverDiv,
			COUNT(*)				AS cnt
	FROM T_WATER_POLLUTION
	WHERE RECEIVE_DATE BETWEEN #startDate#||'0000' AND #endDate#||'2359'
	<isNotEmpty property="searchRiverDiv">
	AND RIVER_DIV = #searchRiverDiv#
	</isNotEmpty>
	<isNotEmpty property="searchWpKind">
	AND WP_KIND = #searchWpKind#
	</isNotEmpty>
	AND DEL_YN = 'N'
	GROUP BY RIVER_DIV
	ORDER BY RIVER_DIV
	</select>
	
	<!-- 수질오염사고 통계차트 년도별 -->
	<select id="getWaterPollutionStatsChartYear" resultClass="waterPollutionVO" parameterClass="waterPollutionSearchVO">
	SELECT SUBSTR(RECEIVE_DATE,0,4)		AS year,
			COUNT(*)					AS cnt
	FROM T_WATER_POLLUTION
	 WHERE RECEIVE_DATE BETWEEN #startDate#||'0000' AND #endDate#||'2359'
	<isNotEmpty property="searchRiverDiv">
	AND RIVER_DIV = #searchRiverDiv#
	</isNotEmpty>
	<isNotEmpty property="searchWpKind">
	AND WP_KIND = #searchWpKind#
	</isNotEmpty>
	 AND DEL_YN = 'N'
	 GROUP BY SUBSTR(RECEIVE_DATE,0,4)
	 ORDER BY SUBSTR(RECEIVE_DATE,0,4)
	</select>
	
	<!-- 수질오염사고 통계차트 사고종류별 -->
	<select id="getWaterPollutionStatsChartWpKind" resultClass="waterPollutionVO" parameterClass="waterPollutionSearchVO">
	SELECT CASE WHEN WP_KIND = 'PA'
			THEN '유류유출'
				WHEN WP_KIND = 'PB'
					THEN '물고기폐사'
				WHEN WP_KIND = 'PC'
					THEN '화학물'
				WHEN WP_KIND = 'PD'
					THEN '기타'
			END					AS wpKind,
			COUNT(*)			AS cnt
	FROM T_WATER_POLLUTION
	WHERE RECEIVE_DATE BETWEEN #startDate#||'0000' AND #endDate#||'2359'
		<isNotEmpty property="searchRiverDiv">
		AND RIVER_DIV = #searchRiverDiv#
		</isNotEmpty>
		<isNotEmpty property="searchWpKind">
		AND WP_KIND = #searchWpKind#
		</isNotEmpty>
	AND DEL_YN = 'N'
	GROUP BY WP_KIND
	ORDER BY WP_KIND
	</select>
	
	<select id="getWaterPollutionReportList" resultClass="waterPollutionReportVO" parameterClass="waterPollutionReportSearchVO">
		<![CDATA[
				SELECT  *
				FROM  (
					SELECT ROWNUM RNUM, ALL_LIST.*
						FROM  (
								SELECT TO_CHAR(TO_DATE(REPT_DATE,'YYYY-MM-DD'),'YYYY-MM-DD')  || ' ' || REPT_HH  || ':' || REPT_MM  AS reptDate
									 , TO_CHAR(TO_DATE(REPT_DATE2,'YYYY-MM-DD'),'YYYY-MM-DD') || ' ' || REPT_HH2 || ':' || REPT_MM2 AS reptDate2
									 , TO_CHAR(TO_DATE(REPT_DATE3,'YYYY-MM-DD'),'YYYY-MM-DD') || ' ' || REPT_HH3 || ':' || REPT_MM3 AS reptDate3
									 , CASE_AREA	AS caseArea
									 , ALERT_NAME	AS alertName
									 , ALERT_YN		AS alertYn
									 , ID			AS id
									 , REPT_ORG		AS reptOrg
									 , REPT_DEPT	AS reptDept
									 , REPT_GRADE	AS reptGrade
									 , REPT_NAME	AS reptName
								FROM T_REPORT
								WHERE REPT_DATE IS NOT NULL
							]]>
								<isEqual prepend="AND" property="searchCondition" compareValue="name">
									<![CDATA[ALERT_NAME LIKE '%' || #searchKeyword# || '%']]>
								</isEqual>
								<isEqual prepend="AND" property="searchCondition" compareValue="phone">
									<![CDATA[ALERT_PHONE LIKE '%' || #searchKeyword# || '%']]>
								</isEqual>
								<isEqual prepend="AND" property="searchCondition" compareValue="area">
									<![CDATA[CASE_AREA LIKE '%' || #searchKeyword# || '%']]>
								</isEqual>
								ORDER BY ID DESC
							<![CDATA[
							) ALL_LIST
							)
							WHERE  RNUM  > #firstIndex#
							AND  RNUM <= #firstIndex# + #recordCountPerPage#
							]]>
	</select>
	
	<!-- 수질오염리포트 목록 카운트-->
	<select id="getWaterPollutionReportListCnt" resultClass="int" parameterClass="waterPollutionReportSearchVO">
		SELECT COUNT(*) AS TOTCNT
		FROM T_REPORT
		WHERE REPT_DATE IS NOT NULL
		<isEqual prepend="AND" property="searchCondition" compareValue="name">
			<![CDATA[ALERT_NAME LIKE '%' || #searchKeyword# || '%']]>
		</isEqual>
		<isEqual prepend="AND" property="searchCondition" compareValue="phone">
			<![CDATA[ALERT_PHONE LIKE '%' || #searchKeyword# || '%']]>
		</isEqual>
		<isEqual prepend="AND" property="searchCondition" compareValue="area">
			<![CDATA[CASE_AREA LIKE '%' || #searchKeyword# || '%']]>
		</isEqual>
	</select>
	
	
	<select id="getWaterPollutionRCVCnt" resultClass="int">
		SELECT COUNT(*) 
		  FROM 
		       (SELECT * 
		         FROM 
		              (SELECT ROW_NUMBER() OVER(PARTITION BY A.WP_CODE ORDER BY DECODE(WPS_STEP,'END',4,'ING',3,'STA',1,2) DESC) RNUM, 
		                     A.WP_CODE wpCode, 
		                     A.WP_CODE , 
		                     B.WPS_STEP, 
		                     TO_CHAR(TO_DATE(B.WPS_STEP_DATE,'YYYYMMDD') ,'YYYY-MM-DD') alertTime, 
		                     DECODE(A.WP_KIND,'PA','유류유출','PB','물고기폐사','PC','화학물질','PD','기타') receiptType, 
		                     DECODE(a.RIVER_DIV,'R01','한강','R02','낙동강','R03','금강','R04','영산강') riverDiv 
		                FROM T_WATER_POLLUTION A, 
		                     T_WATER_POLLUTION_STEP B, 
		                     T_WATER_POLLUTION_SMS C 
		               WHERE A.WP_CODE = B.WP_CODE 
		                     AND A.WP_CODE = C.WP_CODE 
		                     AND A.DEL_YN = 'N' 
		                     AND B.DEL_YN = 'N' 
		              ) A 
		        WHERE RNUM = 1 
		       )
		WHERE WPS_STEP = 'RCV'
	</select>
	
	<select id="getAlertCnt" resultClass="waterPollutionSearchVO" parameterClass="waterPollutionReportSearchVO">
	<![CDATA[
		SELECT SYS_KIND, 
		       SUM(REG) cnt1, 
		       SUM(NORMAL) CNT2, 
		       SUM(INTEREST) A1, 
		       SUM(CAUTION) A2, 
		       SUM(ALERT) A3, 
		       SUM(OVER) A4, 
		       SUM(NORECV) M,
               null as cnt3  
		  FROM 
		       (SELECT F1.FACT_CODE, 
		              D1.FACT_CODE, 
		              B1.BRANCH_NO, 
		              (SELECT 
		                     CASE 
		                         WHEN SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3, 'YYYYMMDDHH24MI'), 1) <  5 
		                         THEN SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3, 'YYYYMMDDHH24MI'), 1, 11) || '0' 
		                         ELSE SUBSTR(TO_CHAR(SYSDATE - 60 / 24 / 60 * 3, 'YYYYMMDDHH24MI'), 1, 11) || '5' 
		                     END NOW 
		                FROM DUAL
		              ) MIN_TIME, 
		              (DECODE(D1.MIN_OR, '0', 1, '1', 1, '2', 1, '3', 1,'4', 1, 0)+DECODE(D1.FACT_CODE, NULL, 1, 0) ) AS REG, 
		              DECODE(D1.MIN_OR, '0', 1, 0) NORMAL, 
		              DECODE(D1.MIN_OR, '1', 1, 0) INTEREST, 
		              DECODE(D1.MIN_OR, '2', 1, 0) CAUTION, 
		              DECODE(D1.MIN_OR, '3', 1, 0) ALERT, 
		              DECODE(D1.MIN_OR, '4', 1, 0) OVER, 
		              DECODE(D1.FACT_CODE, NULL, 1, 0) NORECV, 
		              F1.RIVER_DIV, 
		              F1.SYS_KIND 
		         FROM (SELECT * FROM T_FACT_INFO WHERE SYS_KIND <> 'A'
                                   UNION 
                                   SELECT * FROM T_FACT_INFO_TEMP) F1, 
		              T_FACT_BRANCH_INFO B1, 
		              (SELECT A.FACT_CODE, 
		                     A.BRANCH_NO, 
		                     MAX
		                     (
		                           CASE
                                                 WHEN ALERT_LEVEL IS NULL OR ALERT_LEVEL = ''
                                                 THEN MIN_OR 
		                             WHEN ALERT_LEVEL = 'M' 
		                             THEN MIN_OR 		                            
                                                 ELSE ALERT_LEVEL
		                         END
		                     ) 
		                     MIN_OR 
		                FROM 
		                     (SELECT FACT_CODE, 
		                            BRANCH_NO, 
		                            ITEM_CODE, 
		                            MAX(MIN_TIME) MIN_TIME, 
		                            SUBSTR(MAX(LPAD(MIN_TIME,12,0)||MIN_OR),13) MIN_OR 
		                       FROM T_MIN_DATA D 
		                      WHERE D.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60*3, 'YYYYMMDDHH24MI') 
		                            AND EXISTS 
		                            (SELECT '1' 
		                              FROM T_FACT_MEASU_ITEM I 
		                             WHERE I.ITEM_USE_FLAG = 'Y' 
		                                   AND I.FACT_CODE = D.FACT_CODE 
		                                   AND I.BRANCH_NO = D.BRANCH_NO 
		                                   AND I.ITEM_CODE = D.ITEM_CODE
		                            ) 
		                      GROUP BY FACT_CODE, 
		                            BRANCH_NO, 
		                            ITEM_CODE
		                     ) A, 
		                     (SELECT * FROM T_ALERT_INFO WHERE SYS_KIND = 'A') B
		               WHERE A.FACT_CODE = B.FACT_CODE(+)
                                         AND A.BRANCH_NO = B.BRANCH_NO(+)
		                     AND A.MIN_TIME >= TO_CHAR(SYSDATE - 60/24/60 * 3, 'YYYYMMDDHH24MI') 
		               GROUP BY A.FACT_CODE, 
		                     A.BRANCH_NO 
		              ) D1 
		        WHERE B1.FACT_CODE = D1.FACT_CODE(+) 
		              AND B1.FACT_CODE = F1.FACT_CODE 
		              AND B1.BRANCH_NO = D1.BRANCH_NO(+) 
		              AND B1.BRANCH_USE_FLAG = 'Y' 
		              AND F1.FACT_USE_FLAG = 'Y' 
		              AND F1.SYS_KIND IN ('U', 'A')
		       ) 
		 GROUP BY SYS_KIND
		 UNION		 
		 SELECT 'T' as SYS_KIND, COUNT(*) AS cnt1, SUM(DECODE(VALUE,'0',1,0)) AS CNT2, 
                           SUM(DECODE(VALUE,'3',1,0)) A1, 
		       SUM(DECODE(VALUE,'2',1,0)) A2, 
		       SUM(DECODE(VALUE,'1',1,0)) A3, 
		       SUM(DECODE(VALUE,'4',1,0)) A4, 
		       SUM(DECODE(VALUE,'M',1,0)) M,
               max(cnt3) as cnt3
FROM ( 
SELECT FACT_CODE
	   , WAST_NO as BRANCH_NO
	   , MIN_TIME  as MINTIME
	   , CASE WHEN BLACK > 0 THEN 'M' ELSE CASE WHEN WHITE > 0 THEN '0' ELSE CASE WHEN RED > 0 THEN '3' ELSE CASE WHEN ORANGE > 0 THEN '2' ELSE CASE WHEN YELLOW > 0 THEN '1' ELSE CASE WHEN BLUE > 0 THEN '0' ELSE '0' END END END END END END VALUE
       ,  (select count(*) from wtmsc_fact@tms where fact_used = 'Y') as cnt3
	FROM (
	     SELECT FACT_CODE	           
	          , WAST_NO
	          , MAX(MIN_TIME) AS MIN_TIME
	          , NVL(SUM(DECODE(MIN_OR, NULL, 1)), 0) AS BLACK
	          , NVL(SUM(CASE WHEN MIN_ST IN ('05', '15', '06', '16' ) THEN 1 END), 0) AS WHITE
	          , CASE WHEN MAX(MIN_ST) IN ('00', '02' ) THEN NVL(SUM(DECODE(MIN_OR, '3', 1)), 0) END AS RED
	          , CASE WHEN MAX(MIN_ST) IN ('00', '02' ) THEN NVL(SUM(DECODE(MIN_OR, '2', 1)), 0) END AS ORANGE
	          , CASE WHEN MAX(MIN_ST) IN ('00', '02' ) THEN NVL(SUM(DECODE(MIN_OR, '1', 1)), 0) END AS YELLOW
	          , NVL(SUM(DECODE(MIN_OR, '0', 1)), 0) AS BLUE
	       FROM (
	            SELECT MA.FACT_CODE
	                 ,ma.FACT_NAME
	                 , MA.WAST_NO
	                 , MA.ITEM_CODE
	                 , MA.STAND_TIME
	                 , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') AS CUR_TIME
	                 , MB.MIN_TIME
	                 , MB.MIN_VL
	                 , MB.MIN_RTIME
	                 , MB.MIN_DUMP
	                 , MB.MIN_OR
	                 , MB.MIN_ST
	                 , MB.MIN_DCD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'PHY', MIN_VL) PHY
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'BOD', MIN_VL) BOD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'COD', MIN_VL) COD
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'SUS', MIN_VL) SUS
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TOP', MIN_VL) TOP
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'TON', MIN_VL) TON
	                 , DECODE(SUBSTR(MB.ITEM_CODE, 0, 3), 'FLW', MIN_VL) FLW
	                 , ma.area_gbn
	              FROM (
	            SELECT A.FACT_CODE
	            ,c.fact_name
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , (
	                   SELECT CASE WHEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 12, 1) < 5 THEN SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '0' ELSE SUBSTR(TO_CHAR(SYSDATE - 30/24/60, 'YYYYMMDDHH24MI'), 1, 11) || '5' END
	                     FROM DUAL
	                 ) AS STAND_TIME
	                 ,area.area_gbn
	              FROM WTMSC_FACT_ITEM@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT@tms C
	                 , WTMSC_FACT_WAST@tms D
	                 , WTMSC_AREA@TMS AREA
	             WHERE C.FACT_CODE=D.FACT_CODE
	               AND A.FACT_CODE = D.FACT_CODE
	               AND A.WAST_NO = D.WAST_NO
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.ITEM_USED = 'Y'
	               AND B.ITEM_USED = 'Y'
	               AND C.FACT_USED = 'Y'
	               AND D.WAST_USED = 'Y'
	               and area.CTY_CODE = C.CTY_CODE) MA, (
	SELECT A.FACT_CODE
	                 , A.WAST_NO
	                 , A.ITEM_CODE
	                 , A.MIN_TIME
	                 , A.MIN_VL
	                 , A.MIN_RTIME
	                 , A.MIN_DUMP
	                 , NVL(A.MIN_OR, 0) AS MIN_OR
	                 , A.MIN_ST
	                 , A.MIN_DCD
	              FROM WTMSC_MIN_REAL_LAST@tms A
	                 , WTMSC_ITEM@tms B
	                 , WTMSC_FACT_ITEM@tms C
	             WHERE B.ITEM_USED = 'Y'
	               AND A.ITEM_CODE = B.ITEM_CODE
	               AND A.FACT_CODE = C.FACT_CODE
	               AND A.WAST_NO = C.WAST_NO
	               AND A.ITEM_CODE = C.ITEM_CODE
	               AND C.ITEM_USED='Y' ) MB
	             WHERE MA.FACT_CODE = MB.FACT_CODE (+)
	               AND MA.WAST_NO = MB.WAST_NO (+)
	               AND MA.ITEM_CODE = MB.ITEM_CODE (+)
	              AND MA.STAND_TIME <= MB.MIN_TIME (+)
	          )
	      GROUP BY FACT_CODE, fact_name, WAST_NO, STAND_TIME, area_gbn
	   ))
	    ]]>
	</select>

	
	<select id="getWaterPollutionStatus" resultClass="waterPollutionVO" parameterClass="waterPollutionSearchVO">
	    SELECT COUNT(DISTINCT WP_CODE) CNT, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'STA',WP_CODE)) STA, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'RCV',WP_CODE)) RCV, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'ING',WP_CODE)) ING, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'END',DECODE(NVL(SUPPORT_KIND,'N'),'N',WP_CODE))) END_N, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'END',DECODE(NVL(SUPPORT_KIND,'N'),'Y',WP_CODE))) END_Y,
		       MIN(WPS_STEP_DATE) STARTDATE
		  FROM   
		       (SELECT A.WP_CODE, 
				       A.RIVER_DIV, 
				       B.WPS_STEP, 
				       MIN(B.WPS_STEP_DATE) OVER(PARTITION BY A.WP_CODE) WPS_STEP_DATE, 
				       MAX(NVL(A.SUPPORT_KIND,'N')) SUPPORT_KIND, 
				       CASE 
				           WHEN B.WPS_STEP = 'ING' 
				           THEN NVL(LAG(B.WPS_STEP_DATE) OVER(PARTITION BY A.WP_CODE ORDER BY A.WP_CODE, DECODE(B.WPS_STEP,'END',1,'ING',2,3) ASC , B.WPS_STEP_DATE DESC ),TO_CHAR(SYSDATE,'YYYYMMDD')) 
				           ELSE B.WPS_STEP_DATE 
				       END WPS_STEP_END_DATE, 
				       COUNT(*) CNT 
				  FROM T_WATER_POLLUTION A , 
				       T_WATER_POLLUTION_STEP B 
				 WHERE A.WP_CODE = B.WP_CODE 
				       AND A.DEL_YN = 'N' 
				       AND B.DEL_YN = 'N' 
				       <isNotEmpty property="riverDiv" prepend="AND">
				           A.RIVER_DIV = #riverDiv#
				       </isNotEmpty>
				 GROUP BY A.WP_CODE, 
				       B.WPS_STEP_DATE, 
				       B.WPS_STEP , 
				       A.RIVER_DIV  
		       ) 
		 WHERE #startDate# BETWEEN WPS_STEP_DATE AND WPS_STEP_END_DATE
	</select>
	
	
	<select id="getWaterPollutionStatusList" resultClass="waterPollutionVO" parameterClass="waterPollutionSearchVO">
	    SELECT RIVER_DIV RIVERDIV,
		       COUNT(DISTINCT WP_CODE) CNT, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'STA',WP_CODE)) STA, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'RCV',WP_CODE)) RCV, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'ING',WP_CODE)) ING, 
		       COUNT(DISTINCT DECODE(WPS_STEP,'END',DECODE(NVL(SUPPORT_KIND,'N'),'N',WP_CODE))) END_N,
		       COUNT(DISTINCT DECODE(WPS_STEP,'END',DECODE(NVL(SUPPORT_KIND,'N'),'Y',WP_CODE))) END_Y,
		       MIN(WPS_STEP_DATE) STARTDATE
		  FROM 
		       (SELECT A.WP_CODE, 
				       A.RIVER_DIV, 
				       B.WPS_STEP, 
				       MIN(B.WPS_STEP_DATE) OVER(PARTITION BY A.WP_CODE) WPS_STEP_DATE, 
				       MAX(NVL(A.SUPPORT_KIND,'N')) SUPPORT_KIND, 
				       CASE 
				           WHEN B.WPS_STEP = 'ING' 
				           THEN NVL(LAG(B.WPS_STEP_DATE) OVER(PARTITION BY A.WP_CODE ORDER BY A.WP_CODE, DECODE(B.WPS_STEP,'END',1,'ING',2,3) ASC , B.WPS_STEP_DATE DESC ),TO_CHAR(SYSDATE,'YYYYMMDD')) 
				           ELSE B.WPS_STEP_DATE 
				       END WPS_STEP_END_DATE, 
				       COUNT(*) CNT 
				  FROM T_WATER_POLLUTION A , 
				       T_WATER_POLLUTION_STEP B 
				 WHERE A.WP_CODE = B.WP_CODE 
				       AND A.DEL_YN = 'N' 
				       AND B.DEL_YN = 'N'
				       <isNotEmpty property="riverDiv" prepend="AND">
				           A.RIVER_DIV = #riverDiv#
				       </isNotEmpty>
				 GROUP BY A.WP_CODE, 
				       B.WPS_STEP_DATE, 
				       B.WPS_STEP , 
				       A.RIVER_DIV  
		       ) 
		 WHERE #startDate# BETWEEN WPS_STEP_DATE AND WPS_STEP_END_DATE
		GROUP BY ROLLUP(RIVER_DIV)
		ORDER BY RIVER_DIV nulls first 
	</select>
	
	<select id="selectWaterPollutionFile" resultClass="String" parameterClass="string">
		SELECT ATCH_FILE_ID
		  FROM T_WATER_POLLUTION
		 WHERE WP_CODE = #wpCode# 
	</select>
	
	<!-- 첨부파일 갯수조회 -->
	<select id="selectWaterPollutionFileCnt" resultClass="int" parameterClass="string">
		SELECT COUNT(*) CNT
		  FROM  T_FILE a
       			  , T_FILEDETAIL b  
	 	WHERE b.ATCH_FILE_ID = #atchFileId#
			AND  a.ATCH_FILE_ID = b.ATCH_FILE_ID
			AND  a.USE_FLAG = 'Y'				
	</select>
	
	<select id="getMainChart" resultClass="chartVO" parameterClass="chartVO">
	    SELECT A.RIVER_DIV, 
		       COUNT(DECODE(A.WP_KIND,'PA',DECODE(SUPPORT_KIND,'Y',A.WP_KIND))) PARAM1_Y,
		       COUNT(DECODE(A.WP_KIND,'PA',DECODE(SUPPORT_KIND,'Y',NULL,A.WP_KIND))) PARAM1_N,
		       COUNT(DECODE(A.WP_KIND,'PA',A.WP_KIND)) PARAM1_ALL,
		       COUNT(DECODE(A.WP_KIND,'PB',DECODE(SUPPORT_KIND,'Y',A.WP_KIND))) PARAM2_Y,
		       COUNT(DECODE(A.WP_KIND,'PB',DECODE(SUPPORT_KIND,'Y',NULL,A.WP_KIND))) PARAM2_N,
		       COUNT(DECODE(A.WP_KIND,'PB',A.WP_KIND)) PARAM2_ALL,
		       COUNT(DECODE(A.WP_KIND,'PC',DECODE(SUPPORT_KIND,'Y',A.WP_KIND))) PARAM3_Y,
		       COUNT(DECODE(A.WP_KIND,'PC',DECODE(SUPPORT_KIND,'Y',NULL,A.WP_KIND))) PARAM3_N,
		       COUNT(DECODE(A.WP_KIND,'PC',A.WP_KIND)) PARAM3_ALL,
		       COUNT(DECODE(A.WP_KIND,'PD',DECODE(SUPPORT_KIND,'Y',A.WP_KIND))) PARAM4_Y,
		       COUNT(DECODE(A.WP_KIND,'PD',DECODE(SUPPORT_KIND,'Y',NULL,A.WP_KIND))) PARAM4_N,
		       COUNT(DECODE(A.WP_KIND,'PD',A.WP_KIND)) PARAM4_ALL
		  FROM T_WATER_POLLUTION A 
		 WHERE a.DEL_YN = 'N' 
       			<!-- AND A.REPORT_DATE BETWEEN TO_CHAR(SYSDATE-365,'YYYYMMDDHH24MI') AND TO_CHAR(SYSDATE,'YYYYMMDDHH24MI') --> 
       			AND A.REPORT_DATE LIKE TO_CHAR(SYSDATE,'YYYY') || '%' 
		       <!-- AND A.RIVER_DIV = #river_div#  -->
		 GROUP BY A.RIVER_DIV
		ORDER BY A.RIVER_DIV
	</select>
</sqlMap>
