<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="operateDAO">

	<typeAlias alias="operateSectionVO" type="daewooInfo.operate.bean.OperateSectionVO"/>
	<typeAlias alias="operateFlowVO" type="daewooInfo.operate.bean.OperateFlowVO"/>
	<typeAlias alias="operatePointVO" type="daewooInfo.operate.bean.OperatePointVO"/>
	<typeAlias alias="operateObservatoryVO" type="daewooInfo.operate.bean.OperateObservatoryVO"/>	
	<typeAlias alias="hashMap" type="java.util.HashMap"/>
	
	<statement id="getSectionList" parameterClass="operateSectionVO" resultClass="operateSectionVO">
    <![CDATA[
		SELECT	SECTION_ID as sectionId,			
				RIVER_ID as riverId,
				S_SECTION_NAME as startSectionName,			
				E_SECTION_NAME as endSectionName,			
				S_ORDER as orderNum,			
				WAY as way,			
				S_LATITUDE as startLatitude,		
				S_LONGTITUDE as startLongtitude, 			
				E_LATITUDE as endLatitude,			
				E_LONGTITUDE as endLongtitude,			
				ETC as etc,						
				REG_DATE as regDate		
		FROM 	T_SECTION
		WHERE	RIVER_ID = #riverId#		
		ORDER BY TO_NUMBER(S_ORDER)					 		                 		                	
	]]>	                
	</statement>		

	<statement id="getSection" parameterClass="operateSectionVO" resultClass="operateSectionVO">
    <![CDATA[
		SELECT	SECTION_ID as sectionId,			
				RIVER_ID as riverId,
				S_SECTION_NAME as startSectionName,			
				E_SECTION_NAME as endSectionName,			
				S_ORDER as orderNum,			
				WAY as way,			
				S_LATITUDE as startLatitude,		
				S_LONGTITUDE as startLongtitude, 			
				E_LATITUDE as endLatitude,			
				E_LONGTITUDE as endLongtitude,
				ETC as etc,						
				REG_DATE as regDate		
		FROM 	T_SECTION
		WHERE	SECTION_ID = #sectionId#							 		                 		                	
	]]>	                
	</statement>		
	
	<statement id="updateSection" parameterClass="operateSectionVO">
    <![CDATA[
		MERGE INTO T_SECTION A 
		USING ( SELECT #sectionId# AS SECTION_ID, #riverId# AS RIVER_ID, #startSectionName# AS S_SECTION_NAME, #endSectionName# AS E_SECTION_NAME,
					   #orderNum# AS S_ORDER, #way# AS WAY, #startLatitude# AS S_LATITUDE, #startLongtitude# AS S_LONGTITUDE, #endLatitude# AS E_LATITUDE, 
					   #endLongtitude# AS E_LONGTITUDE, #etc# AS ETC 
				FROM DUAL) B
		ON (A.SECTION_ID = B.SECTION_ID)
		WHEN MATCHED THEN 
		    UPDATE SET 
		    	A.RIVER_ID = B.RIVER_ID
		    	, A.S_SECTION_NAME = B.S_SECTION_NAME
		    	, A.E_SECTION_NAME = B.E_SECTION_NAME
		    	, A.S_ORDER = B.S_ORDER
		    	, A.WAY = B.WAY
		    	, A.S_LATITUDE = B.S_LATITUDE
		    	, A.S_LONGTITUDE = B.S_LONGTITUDE
		    	, A.E_LATITUDE = B.E_LATITUDE
		    	, A.E_LONGTITUDE = B.E_LONGTITUDE
		    	, A.ETC = B.ETC
		WHEN NOT MATCHED THEN
		    INSERT (A.SECTION_ID, A.RIVER_ID, A.S_SECTION_NAME, A.E_SECTION_NAME, A.S_ORDER, A.WAY, A.S_LATITUDE, A.S_LONGTITUDE, A.E_LATITUDE, A.E_LONGTITUDE, A.ETC, A.REG_DATE)
		    VALUES (SEQ_SECTION.NEXTVAL, B.RIVER_ID, B.S_SECTION_NAME, B.E_SECTION_NAME, B.S_ORDER, B.WAY, B.S_LATITUDE, B.S_LONGTITUDE, B.E_LATITUDE, B.E_LONGTITUDE, B.ETC, TO_CHAR(SYSDATE,'yyyymmddhh24mi'))						 		                 		                	
	]]>	                
	</statement>
	
	<statement id="deleteSection" parameterClass="operateSectionVO">
    <![CDATA[
    	DELETE FROM T_SECTION
    	WHERE SECTION_ID = #sectionId#						 		                 		                	
	]]>	                
	</statement>				
	
	<statement id="getSectionSpeedList" parameterClass="operateFlowVO" resultClass="operateFlowVO">
    <![CDATA[
		SELECT	FLOW_ID as flowId,			
				SECTION_ID as sectionId,		
				FLOW as flow,			
				END_TIME as endTime,										
				REG_DATE as regDate		
		FROM 	T_FLOW
		WHERE	SECTION_ID = #sectionId#
		ORDER BY TO_NUMBER(FLOW)							 		                 		                	
	]]>	                
	</statement>		
	
	<statement id="updateSectionSpeed" parameterClass="operateFlowVO">
    <![CDATA[
		MERGE INTO T_FLOW A 
		USING ( SELECT #flowId# AS FLOW_ID, #sectionId# AS SECTION_ID, #flow# AS FLOW, #endTime# AS END_TIME
				FROM DUAL) B
		ON (A.FLOW_ID = B.FLOW_ID)
		WHEN MATCHED THEN 
		    UPDATE SET 
		    	A.SECTION_ID = B.SECTION_ID
		    	, A.FLOW = B.FLOW
		    	, A.END_TIME = B.END_TIME
		WHEN NOT MATCHED THEN
		    INSERT (A.FLOW_ID, A.SECTION_ID, A.FLOW, A.END_TIME, A.REG_DATE)
		    VALUES (SEQ_FLOW.NEXTVAL, B.SECTION_ID, B.FLOW, B.END_TIME, TO_CHAR(SYSDATE,'yyyymmddhh24mi'))						 		                 		                	
	]]>	                
	</statement>	

    <statement id="deleteSectionSpeed" parameterClass="operateFlowVO">
		DELETE FROM T_FLOW		
		WHERE FLOW_ID IN ( #flowId# )
	</statement>  	
	
	<statement id="getSectionPointList" parameterClass="operatePointVO" resultClass="operatePointVO">
    <![CDATA[
		SELECT	POINT_ID as pointId,			
				SECTION_ID as sectionId,			
				POINT_NAME as pointName,			
				P_ORDER as orderNum,			
				WAY as way,			
				LATITUDE as latitude,			
				LONGTITUDE as longtitude,			
				ETC as etc,						
				REG_DATE as regDate										
		FROM 	T_POINT
		WHERE	SECTION_ID = #sectionId#		
		ORDER BY TO_NUMBER(P_ORDER)					 		                 		                	
	]]>	                
	</statement>					
	
	<statement id="getSectionPoint" parameterClass="operatePointVO" resultClass="operatePointVO">
    <![CDATA[
		SELECT	A.POINT_ID as pointId,			
				B.RIVER_ID as riverId,
				A.SECTION_ID as sectionId,			
				A.POINT_NAME as pointName,			
				A.P_ORDER as orderNum,			
				A.WAY as way,			
				A.LATITUDE as latitude,			
				A.LONGTITUDE as longtitude,			
				A.ETC as etc,						
				A.REG_DATE as regDate										
		FROM 	T_POINT A, T_SECTION B
		WHERE	A.POINT_ID = #pointId#		
		AND		A.SECTION_ID = B.SECTION_ID								 		                 		                	
	]]>	                
	</statement>		
	
	<statement id="updateSectionPoint" parameterClass="operatePointVO">
    <![CDATA[
		MERGE INTO T_POINT A 
		USING ( SELECT #pointId# AS POINT_ID, #sectionId# AS SECTION_ID, #pointName# AS POINT_NAME, #orderNum# AS P_ORDER, #way# AS WAY,
					   #latitude# AS LATITUDE, #longtitude# AS LONGTITUDE, #etc# AS ETC 
				FROM DUAL) B
		ON (A.POINT_ID = B.POINT_ID)
		WHEN MATCHED THEN 
		    UPDATE SET 
		    	A.SECTION_ID = B.SECTION_ID
		    	, A.POINT_NAME = B.POINT_NAME
		    	, A.P_ORDER = B.P_ORDER
		    	, A.WAY = B.WAY
		    	, A.LATITUDE = B.LATITUDE
		    	, A.LONGTITUDE = B.LONGTITUDE
		    	, A.ETC = B.ETC
		WHEN NOT MATCHED THEN
		    INSERT (A.POINT_ID, A.SECTION_ID, A.POINT_NAME, A.P_ORDER, A.WAY, A.LATITUDE, A.LONGTITUDE, A.ETC, A.REG_DATE)
		    VALUES (SEQ_POINT.NEXTVAL, B.SECTION_ID, B.POINT_NAME, B.P_ORDER, B.WAY, B.LATITUDE, B.LONGTITUDE, B.ETC, TO_CHAR(SYSDATE,'yyyymmddhh24mi'))						 		                 		                	
	]]>	                
	</statement>
	
	<statement id="deleteSectionPoint" parameterClass="operatePointVO">
    <![CDATA[
    	DELETE FROM T_POINT
    	WHERE POINT_ID = #pointId#						 		                 		                	
	]]>	                
	</statement>		
	
	<statement id="getSectionObservatoryList" parameterClass="operateObservatoryVO" resultClass="operateObservatoryVO">
    <![CDATA[
		SELECT	OBSERVATORY_ID as observatoryId,			
				SECTION_ID as sectionId,			
				OBSERVATORY_NAME as observatoryName,			
				O_ORDER as orderNum,			 
				WAY as way,			
				LATITUDE as latitude,			
				LONGTITUDE as longtitude,			
				OBSERVATORY_TYPE as observatoryType,			
				STAGE_DISCHARGE_CURVE1_VAL1 as stageDischargeCurve1Val1,			
				STAGE_DISCHARGE_CURVE1_VAL2	as stageDischargeCurve1Val2,		
				STAGE_DISCHARGE_CURVE1_VAL3 as stageDischargeCurve1Val3,			
				STAGE_DISCHARGE_CURVE1_EQ1 as stageDischargeCurve1Eq1,			
				STAGE_DISCHARGE_CURVE1_EQ2 as stageDischargeCurve1Eq2,
				STAGE_DISCHARGE_CURVE2_VAL1	as stageDischargeCurve2Val1,		
				STAGE_DISCHARGE_CURVE2_VAL2	as stageDischargeCurve2Val2,		
				STAGE_DISCHARGE_CURVE2_VAL3	as stageDischargeCurve2Val3,		
				STAGE_DISCHARGE_CURVE2_EQ1 as stageDischargeCurve2Eq1,			
				STAGE_DISCHARGE_CURVE2_EQ2 as stageDischargeCurve2Eq2,			
				STAGE_DISCHARGE_CURVE3_VAL1	as stageDischargeCurve3Val1,		
				STAGE_DISCHARGE_CURVE3_VAL2	as stageDischargeCurve3Val2,		
				STAGE_DISCHARGE_CURVE3_VAL3	as stageDischargeCurve3Val3,		
				STAGE_DISCHARGE_CURVE3_EQ1 as stageDischargeCurve3Eq1,			
				STAGE_DISCHARGE_CURVE3_EQ2 as stageDischargeCurve3Eq2,			
				ETC as etc,						
				REG_DATE as regDate											
		FROM 	T_OBSERVATORY
		WHERE	SECTION_ID = #sectionId#		
		ORDER BY TO_NUMBER(O_ORDER)					 		                 		                	
	]]>	                
	</statement>			
	
	<statement id="getSectionObservatory" parameterClass="operateObservatoryVO" resultClass="operateObservatoryVO">
    <![CDATA[
		SELECT	A.OBSERVATORY_ID as observatoryId,
				B.RIVER_ID as riverId,			
				A.SECTION_ID as sectionId,			
				A.OBSERVATORY_NAME as observatoryName,			
				A.O_ORDER as orderNum,			 
				A.WAY as way,			
				A.LATITUDE as latitude,			
				A.LONGTITUDE as longtitude,			
				A.OBSERVATORY_TYPE as observatoryType,			
				A.STAGE_DISCHARGE_CURVE1_VAL1 as stageDischargeCurve1Val1,			
				A.STAGE_DISCHARGE_CURVE1_VAL2	as stageDischargeCurve1Val2,		
				A.STAGE_DISCHARGE_CURVE1_VAL3 as stageDischargeCurve1Val3,			
				A.STAGE_DISCHARGE_CURVE1_EQ1 as stageDischargeCurve1Eq1,			
				A.STAGE_DISCHARGE_CURVE1_EQ2 as stageDischargeCurve1Eq2,
				A.STAGE_DISCHARGE_CURVE2_VAL1	as stageDischargeCurve2Val1,		
				A.STAGE_DISCHARGE_CURVE2_VAL2	as stageDischargeCurve2Val2,		
				A.STAGE_DISCHARGE_CURVE2_VAL3	as stageDischargeCurve2Val3,		
				A.STAGE_DISCHARGE_CURVE2_EQ1 as stageDischargeCurve2Eq1,			
				A.STAGE_DISCHARGE_CURVE2_EQ2 as stageDischargeCurve2Eq2,			
				A.STAGE_DISCHARGE_CURVE3_VAL1	as stageDischargeCurve3Val1,		
				A.STAGE_DISCHARGE_CURVE3_VAL2	as stageDischargeCurve3Val2,		
				A.STAGE_DISCHARGE_CURVE3_VAL3	as stageDischargeCurve3Val3,		
				A.STAGE_DISCHARGE_CURVE3_EQ1 as stageDischargeCurve3Eq1,			
				A.STAGE_DISCHARGE_CURVE3_EQ2 as stageDischargeCurve3Eq2,			
				A.ETC as etc,						
				A.REG_DATE as regDate											
		FROM 	T_OBSERVATORY A, T_SECTION B
		WHERE	A.OBSERVATORY_ID = #observatoryId#		
		AND		A.SECTION_ID = B.SECTION_ID
	]]>	                
	</statement>		
	
	<statement id="updateSectionObservatory" parameterClass="operateObservatoryVO">
    <![CDATA[
		MERGE INTO T_OBSERVATORY A 
		USING ( SELECT #observatoryId# AS OBSERVATORY_ID, #sectionId# AS SECTION_ID, #observatoryName# AS OBSERVATORY_NAME, #orderNum# AS O_ORDER, #way# AS WAY,
					   #latitude# AS LATITUDE, #longtitude# AS LONGTITUDE, #observatoryType# AS OBSERVATORY_TYPE, #stageDischargeCurve1Val1# AS STAGE_DISCHARGE_CURVE1_VAL1,
					   #stageDischargeCurve1Val2# AS STAGE_DISCHARGE_CURVE1_VAL2, #stageDischargeCurve1Val3# AS STAGE_DISCHARGE_CURVE1_VAL3, #stageDischargeCurve1Eq1# AS STAGE_DISCHARGE_CURVE1_EQ1,
					   #stageDischargeCurve1Eq2# AS STAGE_DISCHARGE_CURVE1_EQ2, #stageDischargeCurve2Val1# AS STAGE_DISCHARGE_CURVE2_VAL1, #stageDischargeCurve2Val2# AS STAGE_DISCHARGE_CURVE2_VAL2,
					   #stageDischargeCurve2Val3# AS STAGE_DISCHARGE_CURVE2_VAL3, #stageDischargeCurve2Eq1# AS STAGE_DISCHARGE_CURVE2_EQ1, #stageDischargeCurve2Eq2# AS STAGE_DISCHARGE_CURVE2_EQ2,
					   #stageDischargeCurve3Val1# AS STAGE_DISCHARGE_CURVE3_VAL1, #stageDischargeCurve3Val2# AS STAGE_DISCHARGE_CURVE3_VAL2, #stageDischargeCurve3Val3# AS STAGE_DISCHARGE_CURVE3_VAL3,
					   #stageDischargeCurve3Eq1# AS STAGE_DISCHARGE_CURVE3_EQ1, #stageDischargeCurve3Eq2# AS STAGE_DISCHARGE_CURVE3_EQ2, #etc# AS ETC
				FROM DUAL) B
		ON (A.OBSERVATORY_ID = B.OBSERVATORY_ID)
		WHEN MATCHED THEN 
		    UPDATE SET 
		    	A.SECTION_ID = B.SECTION_ID
		    	, A.OBSERVATORY_NAME = B.OBSERVATORY_NAME
		    	, A.O_ORDER = B.O_ORDER
		    	, A.WAY = B.WAY
		    	, A.LATITUDE = B.LATITUDE
		    	, A.LONGTITUDE = B.LONGTITUDE		    	
		    	, A.OBSERVATORY_TYPE = B.OBSERVATORY_TYPE		    
		    	, A.STAGE_DISCHARGE_CURVE1_VAL1 = B.STAGE_DISCHARGE_CURVE1_VAL1
		    	, A.STAGE_DISCHARGE_CURVE1_VAL2 = B.STAGE_DISCHARGE_CURVE1_VAL2
		    	, A.STAGE_DISCHARGE_CURVE1_VAL3 = B.STAGE_DISCHARGE_CURVE1_VAL3
		    	, A.STAGE_DISCHARGE_CURVE1_EQ1 = B.STAGE_DISCHARGE_CURVE1_EQ1
		    	, A.STAGE_DISCHARGE_CURVE1_EQ2 = B.STAGE_DISCHARGE_CURVE1_EQ2		    	
		    	, A.STAGE_DISCHARGE_CURVE2_VAL1 = B.STAGE_DISCHARGE_CURVE2_VAL1
		    	, A.STAGE_DISCHARGE_CURVE2_VAL2 = B.STAGE_DISCHARGE_CURVE2_VAL2
		    	, A.STAGE_DISCHARGE_CURVE2_VAL3 = B.STAGE_DISCHARGE_CURVE2_VAL3
		    	, A.STAGE_DISCHARGE_CURVE2_EQ1 = B.STAGE_DISCHARGE_CURVE2_EQ1
		    	, A.STAGE_DISCHARGE_CURVE2_EQ2 = B.STAGE_DISCHARGE_CURVE2_EQ2
		    	, A.STAGE_DISCHARGE_CURVE3_VAL1 = B.STAGE_DISCHARGE_CURVE3_VAL1
		    	, A.STAGE_DISCHARGE_CURVE3_VAL2 = B.STAGE_DISCHARGE_CURVE3_VAL2
		    	, A.STAGE_DISCHARGE_CURVE3_VAL3 = B.STAGE_DISCHARGE_CURVE3_VAL3
		    	, A.STAGE_DISCHARGE_CURVE3_EQ1 = B.STAGE_DISCHARGE_CURVE3_EQ1
		    	, A.STAGE_DISCHARGE_CURVE3_EQ2 = B.STAGE_DISCHARGE_CURVE3_EQ2		    			    
		    	, A.ETC = B.ETC
		WHEN NOT MATCHED THEN
		    INSERT (A.OBSERVATORY_ID, A.SECTION_ID, A.OBSERVATORY_NAME, A.O_ORDER, A.WAY, A.LATITUDE, A.LONGTITUDE, A.OBSERVATORY_TYPE, A.STAGE_DISCHARGE_CURVE1_VAL1, A.STAGE_DISCHARGE_CURVE1_VAL2,
		    		A.STAGE_DISCHARGE_CURVE1_VAL3, A.STAGE_DISCHARGE_CURVE1_EQ1, A.STAGE_DISCHARGE_CURVE1_EQ2, A.STAGE_DISCHARGE_CURVE2_VAL1, A.STAGE_DISCHARGE_CURVE2_VAL2, A.STAGE_DISCHARGE_CURVE2_VAL3,
		    		A.STAGE_DISCHARGE_CURVE2_EQ1, A.STAGE_DISCHARGE_CURVE2_EQ2, A.STAGE_DISCHARGE_CURVE3_VAL1, A.STAGE_DISCHARGE_CURVE3_VAL2, A.STAGE_DISCHARGE_CURVE3_VAL3, A.STAGE_DISCHARGE_CURVE3_EQ1,
		    		A.STAGE_DISCHARGE_CURVE3_EQ2, A.ETC, A.REG_DATE)
		    VALUES (SEQ_OBSERVATORY.NEXTVAL, B.SECTION_ID, B.OBSERVATORY_NAME, B.O_ORDER, B.WAY, B.LATITUDE, B.LONGTITUDE, B.OBSERVATORY_TYPE, B.STAGE_DISCHARGE_CURVE1_VAL1, B.STAGE_DISCHARGE_CURVE1_VAL2,
		    		B.STAGE_DISCHARGE_CURVE1_VAL3, B.STAGE_DISCHARGE_CURVE1_EQ1, B.STAGE_DISCHARGE_CURVE1_EQ2, B.STAGE_DISCHARGE_CURVE2_VAL1, B.STAGE_DISCHARGE_CURVE2_VAL2, B.STAGE_DISCHARGE_CURVE2_VAL3,
		    		B.STAGE_DISCHARGE_CURVE2_EQ1, B.STAGE_DISCHARGE_CURVE2_EQ2, B.STAGE_DISCHARGE_CURVE3_VAL1, B.STAGE_DISCHARGE_CURVE3_VAL2, B.STAGE_DISCHARGE_CURVE3_VAL3, B.STAGE_DISCHARGE_CURVE3_EQ1,
		    		B.STAGE_DISCHARGE_CURVE3_EQ2, B.ETC, TO_CHAR(SYSDATE,'yyyymmddhh24mi'))						 		                 		                	
	]]>	                
	</statement>
	
	<statement id="deleteSectionObservatory" parameterClass="operateObservatoryVO">
    <![CDATA[
    	DELETE FROM T_OBSERVATORY
    	WHERE OBSERVATORY_ID = #observatoryId#						 		                 		                	
	]]>	                
	</statement>						
</sqlMap>