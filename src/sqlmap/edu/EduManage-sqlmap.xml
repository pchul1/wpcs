<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="EduManageDAO">

	<typeAlias  alias="egovMap"    type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<typeAlias  alias="eduVO"   type="daewooInfo.edu.bean.EduVO"/>
	<typeAlias  alias="eduSearchVO"   type="daewooInfo.edu.bean.EduSearchVO"/>
	
	<!-- 교육 목록 전체 (페이징 없음) -->
	<select id="eduDataListAll" parameterClass="eduSearchVO" resultClass="eduSearchVO">
		select
		    edu_seq eduSeq,
		    title title,
		    capacity capacity,
		    (
		        select count(*) from t_edu_member where edu_seq = a.edu_seq
		    ) memberCnt
		from t_edu a
		where edu_seq is not null
		order by to_number(edu_seq) desc
	</select>
	
	<!-- 교육 목록 -->
	<select id="eduDataList" parameterClass="eduSearchVO" resultClass="eduSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				select
				    edu_seq eduSeq,
				    atch_file_id atchFileId,
				    title title,
				    to_char(str_date,'YYYY-MM-DD') strDate,
				    to_char(end_date,'YYYY-MM-DD') endDate,
				    capacity capacity,
				    content content,
				    (
				        select count(*) from t_edu_member where edu_seq = a.edu_seq
				    ) memberCnt
				from t_edu a
				where edu_seq is not null
				<isNotEmpty property="eduSeq">
					and edu_seq = #eduSeq#
				</isNotEmpty>
				<isNotEmpty property="title">
					and title like '%'||#title#||'%'
				</isNotEmpty>
				order by to_number(edu_seq) desc
			/* 구현 Sql */
			    ) ALL_LIST
			    )
		 WHERE  RNUM  &gt; #firstIndex#
		   AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 교육 목록 카운트 -->
	<select id="eduDataListCnt" parameterClass="eduSearchVO" resultClass="int">
		SELECT 
            count(*) as totcnt
        FROM T_EDU
        where edu_seq is not null
        <isNotEmpty property="title">
			and title like '%'||#title#||'%'
		</isNotEmpty>
	</select>
	
	<!-- 교육 대상자 전체 삭제 -->
	<delete id="deleteEduMemberAll" parameterClass="eduSearchVO">
		DELETE FROM T_EDU_MEMBER
		WHERE EDU_SEQ = #eduSeq#
	</delete>
	
	<!-- 교육 삭제 -->
	<delete id="deleteEdu" parameterClass="eduSearchVO">
		DELETE FROM T_EDU
		WHERE EDU_SEQ = #eduSeq#
	</delete>
	
	<!-- 교육 merge into -->
	<statement id="mergeEdu" parameterClass="eduSearchVO">
		MERGE INTO T_EDU A
        USING ( SELECT 	#eduSeq# AS EDU_SEQ, #atchFileId# AS ATCH_FILE_ID, 
        				#title# AS TITLE, #strDate# AS STR_DATE, #endDate# AS END_DATE,
        				#capacity# AS CAPACITY, #content# AS CONTENT 
                FROM DUAL) B
        ON (A.EDU_SEQ = B.EDU_SEQ)
        WHEN MATCHED THEN
            UPDATE SET
                A.ATCH_FILE_ID = B.ATCH_FILE_ID,
                A.TITLE = B.TITLE,
                A.STR_DATE = B.STR_DATE,
                A.END_DATE = B.END_DATE,
                A.CAPACITY = B.CAPACITY,
                A.CONTENT = B.CONTENT
        WHEN NOT MATCHED THEN
            INSERT (A.EDU_SEQ, 
            		A.ATCH_FILE_ID, A.TITLE, A.STR_DATE, A.END_DATE, A.CAPACITY, A.CONTENT)
            VALUES ((select nvl(max(to_number(edu_seq))+1,1) from t_edu),
                    B.ATCH_FILE_ID, B.TITLE, B.STR_DATE, B.END_DATE, B.CAPACITY, B.CONTENT)
	</statement>
	
	<!-- 교육 신청자  목록 -->
	<select id="eduMemberDataList" parameterClass="eduSearchVO" resultClass="eduSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				select 
				    c.title title,
                    to_char(c.str_date,'YYYY-MM-DD') strDate,
                    to_char(c.end_date,'YYYY-MM-DD') endDate,
				    a.member_id memberId,
				    a.edu_seq eduSeq,
				    a.reg_date regDate,
				    a.mobile_no mobileNo,
				    b.member_nm memberName,
				    b.email email,
				    dept_name AS "deptName",
				    grade_name AS "gradeName",
				    dept_no AS "deptNo",
				    (    
				    case 
				          when length((select dept_name from t_dept_info where dept_code=(select upper_dept_code from t_dept_info where dept_code=b.dept_no and rownum=1))) > 0 then
						     (select dept_name from t_dept_info where dept_code=(select upper_dept_code from t_dept_info where dept_code=b.dept_no and rownum=1))||' > '||(select dept_name from t_dept_info where dept_code=b.dept_no)
						 else
						     (select dept_name from t_dept_info where dept_code=b.dept_no)
				    end         
				    ) AS "deptNoName",
				    do_code AS "doCode",
				    (
				     select do_name from t_area b where b.do_code = b.do_code and rownum=1 
				    ) AS "doCodeName",
				    cty_code AS "ctyCode",
				    (
				     select cty_name from t_area b where b.cty_code = b.cty_code and rownum=1 
				    ) AS "ctyCodeName",
				    fact_code AS "factCode",
				    (
				     select  fact_fname from t_fact_info b where sys_kind='T' and b.fact_code = b.fact_code and rownum=1 
				    ) AS "factCodeName",
				    river_id as "riverId",
				    (
				     SELECT COMMON_CODE_NAME FROM T_COMMON_CODE WHERE COMMON_CODE_CATEGORY ='01' AND USE_FLAG = 'Y' AND COMMON_CODE = b.river_id
				    ) AS "riverIdName"
				from t_edu_member a, t_member b, t_edu c
				where a.member_id=b.member_id(+)
				and a.edu_seq = c.edu_seq(+)
				and a.edu_seq = #eduSeq#
				order by b.member_nm desc
			/* 구현 Sql */
			    ) ALL_LIST
			    )
		 WHERE  RNUM  &gt; #firstIndex#
		   AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 교육 대상자 목록 카운트 -->
	<select id="eduMemberDataListCnt" parameterClass="eduSearchVO" resultClass="int">
		SELECT 
            count(*) as totcnt
        FROM T_EDU_MEMBER
		where edu_seq = #eduSeq#
	</select>
	
	<!-- 교육 대상자 삭제 -->
	<delete id="deleteEduMember" parameterClass="eduSearchVO">
		DELETE FROM T_EDU_MEMBER
		WHERE EDU_SEQ = #eduSeq#
		AND MEMBER_ID = #memberId#
	</delete>
	
	<!-- 교육 대상자 merge into -->
	<statement id="insertEduMember" parameterClass="eduSearchVO">
	    INSERT INTO T_EDU_MEMBER (
	    		EDU_SEQ,
           		MEMBER_ID, 
           		REG_DATE, 
           		MOBILE_NO)
           VALUES (
           			#eduSeq#,
                   	#memberId#, 
                   	sysdate, 
                   	#mobileNo#)
	</statement>
	
	<!-- 정원 초과 체크 -->
	<select id="isOverCapacityCnt" parameterClass="eduSearchVO" resultClass="int">
		select capacity-(select count(*) from t_edu_member where edu_seq=a.edu_seq) as totcnt 
		from t_edu a 
		where edu_seq=#eduSeq#
	</select>
	
	<!-- 이미 교육이 신청되어 있는지 체크 -->
	<select id="isEduRigisterCnt" parameterClass="eduSearchVO" resultClass="int">
		select count(*) as totcnt 
		from t_edu_member 
		where edu_seq=#eduSeq#
		and member_id=#memberId#
	</select>
	
	<!-- 나의 교육 신청 현황 교육 목록 -->
	<select id="myEduDataList" parameterClass="eduSearchVO" resultClass="eduSearchVO">
		SELECT  * 
			  FROM  (
			SELECT ROWNUM RNUM, rownum num, ALL_LIST.* 
			  FROM  (
			/* 구현 Sql */
				select
				    a.edu_seq as eduSeq,
				    mobile_no as mobileNo,
				    title,
				    to_char(str_date, 'YYYY-MM-DD') as strDate,
				    to_char(end_date, 'YYYY-MM-DD') as endDate,
				    capacity,
				    atch_file_id as atchFileId,
				    to_char(reg_date, 'YYYY-MM-DD HH24:MI') as regDate
				from t_edu_member a, t_edu b
				where a.edu_seq=b.edu_seq(+)
				and a.member_id=#memberId#
				<isNotEmpty property="title">
					and title like '%'||#title#||'%'
				</isNotEmpty>
				order by to_number(a.edu_seq) desc
			/* 구현 Sql */
			    ) ALL_LIST
			    )
		 WHERE  RNUM  &gt; #firstIndex#
		   AND  RNUM &lt;= #firstIndex# + #recordCountPerPage#
	</select>
	
	<!-- 나의 교육 신청 현황 교육 목록 카운트 -->
	<select id="myEduDataListCnt" parameterClass="eduSearchVO" resultClass="int">
		select 
			count(*) as totcnt 
		from t_Edu_member a, t_edu b
		where a.edu_seq = b.edu_seq(+)
		and member_id=#memberId#
		<isNotEmpty property="title">
			and title like '%'||#title#||'%'
		</isNotEmpty>
	</select>
	
	
</sqlMap>